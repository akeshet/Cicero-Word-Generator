<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.Common</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute">
            <summary>
            Identifies the descriptors for data types in a different assembly.
            </summary>
            <remarks>
            This attribute is used by the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)"/> method to identify descriptors
            defined in an assembly for external types, such as the system types (e.g., <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>).
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/9/2012 10:44:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute.#ctor(System.Type[])">
            <summary>
            Creates a new <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute"/> instance with the specified descriptor types.
            </summary>
            <param name="implementedDescriptorTypes">The descriptor types the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)"/> method should reference.</param>
            <lastupdated>6/9/2012 10:44:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute.#ctor(System.Type)">
            <exclude/>
            <lastupdated>6/9/2012 10:44:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute.DescriptorTypes">
            <summary>
            Gets the descriptor types the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)"/> method should reference.
            </summary>
            <value>The descriptor types the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)"/> method should reference.</value>
            <lastupdated>6/9/2012 10:44:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.ConversionResult">
            <summary>
            Indicates whether a conversion operation succeeded or resulted in a loss of information.
            </summary>
            <lastupdated>6/10/2012 2:03:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.ConversionResult.Lossless">
            <summary>
            Value successfully converted to target type.
            </summary>
            <example>
                <list type="table">
                    <item>
                        <term>
                            <c>int 300 -&gt;</c>
                        </term>
                        <description>
                            <c>long 300</c>
                        </description>
                    </item>
                    <item>
                        <term>
                            <c>int 300 -&gt;</c>
                        </term>
                        <description>
                            <c>double 300.0</c>
                        </description>
                    </item>
                </list>
            </example>
            <lastupdated>6/10/2012 2:06:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.ConversionResult.LossOfPrecision">
            <summary>
            Value could not be represented with the same precision in the target type.
            </summary>
            <example>
                <list type="table">
                    <item>
                        <term>
                            <c>double 1.2 -&gt;</c>
                        </term>
                        <description>
                            <c>int 1</c>
                        </description>
                    </item>
                    <item>
                        <term>
                            <c>long.MaxValue -&gt;</c>
                        </term>
                        <description>
                            <c>double 9.22E+18</c>
                        </description>
                    </item>
                </list>
            </example>
            <lastupdated>6/10/2012 2:10:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.ConversionResult.LossOfRange">
            <summary>
            Value could not be represented in the range of target type.
            </summary>
            <example>
                <list type="table">
                    <item>
                        <term>
                            <c>int 300 -&gt; </c>
                        </term>
                        <description>
                            <c>byte 255</c>
                        </description>
                    </item>
                    <item>
                        <term>
                            <c>int -1 -&gt;</c>
                        </term>
                        <description>
                            <c>uint 0</c>
                        </description>
                    </item>
                </list>
            </example>
            <lastupdated>6/10/2012 2:11:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.ConversionResult.LossOfIdentity">
            <summary>
            Special value could not be represented in the target type.
            </summary>
            <example>
                <list type="table">
                    <item>
                        <term>
                            <c>double NaN -&gt;</c>
                        </term>
                        <description>
                            <c>int 0</c>
                        </description>
                    </item>
                    <item>
                        <term>
                            <c>int? null -&gt;</c>
                        </term>
                        <description>
                            <c>int 0</c>
                        </description>
                    </item>
                </list>
            </example>
            <lastupdated>6/10/2012 2:07:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptorAttribute">
            <summary>
            Identifies the descriptor for the targeted data type.
            </summary>
            <remarks>
            This attribute is used by the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/> method to identify the descriptor
            to use for the targeted data type.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/9/2012 10:45:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptorAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptorAttribute"/> instance with the specified descriptor type.
            </summary>
            <param name="descriptorType">The <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> to use for the data type the attribute is applied to.</param>
            <lastupdated>6/9/2012 10:45:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptorAttribute.DescriptorType">
            <summary>
            Gets the descriptor for the targeted data type.
            </summary>
            <value>The descriptor for the targeted data type.</value>
            <lastupdated>6/9/2012 10:45:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors">
            <summary>
            Contains all registered data type descriptors, and includes members for adding additional descriptors.
            </summary>
            <remarks>
            Descriptors can be retrieved using the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/> method.
            To register a descriptor for a custom data type, apply a <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptorAttribute"/> to that data type referencing the target descriptor.
            To register a descriptor for a data type in another assembly, apply an <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute"/> to the assembly referencing the target descriptor,
            and call the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)"/> method during application startup, before any calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/> with the target data type are made.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/9/2012 10:46:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)">
            <summary>
            Gets the descriptor for the specified data type in the repository.
            </summary>
            <remarks>
            Once a descriptor has been retrieved for a data type, the registered descriptor for that data type is fixed and cannot be changed.
            All future calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/> with that data type return the same descriptor type.
            </remarks>
            <param name="dataType">The data type with the descriptor to be found.</param>
            <returns>The descriptor for the specified data type in the repository, or <see langword="null"/> if there is no descriptor registered for the data type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dataType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="dataType"/> is an interface type.
                <para>- or -</para>
                <para><paramref name="dataType"/> is an open generic type.</para>
            </exception>
            <lastupdated>6/9/2012 10:49:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorInstance``1">
            <summary>
            Gets an instance of the descriptor returned by <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/> for the specified data type in the repository.
            </summary>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/>
            <typeparam name="T">The data type with the descriptor to be found.</typeparam>
            <returns>An instance of the descriptor for the specified data type in the repository, or <see langword="null"/> if there is no descriptor registered for the data type.</returns>
            <exception cref="T:System.ArgumentException">
                <typeparamref name="T"/> is an interface type.
            </exception>
            <lastupdated>6/9/2012 10:48:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)">
            <summary>
            Examines the specified assembly for an <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute"/> attribute
            </summary>
            <remarks>
            To guarantee a descriptor type referenced by an <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute"/> attribute is used,
            this method must be called before any other type attempts to retrieve a registered descriptor.
            This can be accomplished by placing the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ExamineAssembly(System.Reflection.Assembly)"/> call in the entry point of the end application,
            or in the static constructor of a type used to start the application.
            </remarks>
            <param name="assembly">The assembly to examine for an <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute"/> attribute.</param>
            <returns>The data types that will use descriptors referenced by the <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.AssemblyDataTypeDescriptorsAttribute"/> attribute in the <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="assembly"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/9/2012 10:47:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetCurrentRegisteredDataTypes">
            <summary>
            Gets an array of all of the data types with registered descriptors.
            </summary>
            <returns>An array of all of the data types with registered descriptors.</returns>
            <lastupdated>6/9/2012 10:48:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetLosslessConverter``2">
            <summary>
            Gets a lossless converter between the specified data types.
            </summary>
            <typeparam name="TData">The type of the value to convert.</typeparam>
            <typeparam name="TResult">The type to convert the value to.</typeparam>
            <returns>
            A descriptor instance implementing lossless conversion between <typeparamref name="TData"/> and <typeparamref name="TResult"/>,
            or <see langword="null"/> if no lossless conversion descriptor could be found.
            </returns>
            <lastupdated>6/9/2012 10:49:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetConverter``2">
            <summary>
            Gets a converter between the specified data types.
            </summary>
            <typeparam name="TData">The type of the value to convert.</typeparam>
            <typeparam name="TResult">The type to convert the value to.</typeparam>
            <returns>
            A descriptor instance implementing conversion between <typeparamref name="TData"/> and <typeparamref name="TResult"/>,
            or <see langword="null"/> if no conversion descriptor could be found.
            </returns>
            <lastupdated>6/9/2012 10:47:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetFixedDescriptorEntry(System.Type)">
            <summary>Retrieves and fixes the descriptor entry for the specified data type.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.UnlockedGetFixedDescriptorEntry(System.Type)">
            <summary>Retrieves the descriptor entry while under the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.DescriptorsLock"/>.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.UnlockedGetRegisteredDescriptor(System.Type)">
            <summary>Creates a descriptor registration entry for the specified data type while under the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.DescriptorsLock"/>.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetGenericDescriptorProximityScore(System.Type,System.Type)">
            <summary>Gets an integer indicating how close a descriptor is to the declared data type.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetCompatibleDescriptor(System.Type,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Finds the first compatible descriptor from the list of candidate types.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ResolveGenericDescriptor(System.Type,System.String,System.Type,System.String)">
            <summary>Resolves the type arguments on an open generic descriptor candidate.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetConverter(System.Type,System.Type)">
            <summary>Retrieves a converter for the specified types.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.UnlockedFindConverter(System.Type,System.Type)">
            <summary>Searches for a conversion path between the data and result types.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.DescriptorEntry">
            <summary>Represents the descriptor of a registered data type.</summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.DescriptorEntry.DescriptorType">
            <summary>Gets or sets the type of descriptor.</summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.DescriptorEntry.Instance">
            <summary>Gets an instance of the descriptor type, or <see langword="null"/> if there is no descriptor.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ConversionCost">
            <summary>Holds the cost weight for various types of conversions.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ConversionPath">
            <summary>Represents a converter between two data types, and the number of steps taken to reach the result type.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ConversionPathDictionary">
            <summary>Represents a dictionary of converter instances, keyed by result type.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.IntermediateConverterBase`3">
            <summary>Converts <typeparamref name="TData"/> to <typeparamref name="TResult"/>, by way of <typeparamref name="TIntermediate"/>.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpConversion`2">
            <summary>
            Provides access to conversion between different data types.
            </summary>
            <typeparam name="TData">The type of the value to convert.</typeparam>
            <typeparam name="TResult">The type to convert the value to.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpConversion`2"/> to perform conversions
            from <typeparamref name="TData"/> to <typeparamref name="TResult"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:08:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpConversion`2.TryConvert(`0,`1@)">
            <summary>
            Converts a specified value to the nearest equivalent value in the <typeparamref name="TResult"/> data type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">
            When this method returns, contains a value in the <typeparamref name="TResult"/> data type
            nearest in meaning to the <paramref name="value"/> in the <typeparamref name="TData"/> data type.
            </param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.ConversionResult"/> indicating whether the conversion completed successfully.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:23:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpLosslessConversion`2">
            <summary>
            Provides access to guaranteed-lossless conversion between different data types.
            </summary>
            <example>For example, <c>int</c> to <c>long</c>; <c>float</c>  to <c>double</c>; <c>int</c>  to <c>int</c>; etc.</example>
            <typeparam name="TData">The type of the value to convert.</typeparam>
            <typeparam name="TResult">The type to convert the value to.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpLosslessConversion`2"/> to perform lossless conversions
            from <typeparamref name="TData"/> to <typeparamref name="TResult"/> values.
            <para>
            If conversion from <typeparamref name="TData"/> to <typeparamref name="TResult"/> is supported
            but cannot be guaranteed to return lossless results, use the <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpConversion`2"/>
            interface to perform conversions.
            </para>
            </remarks>
            <lastupdated>6/11/2012 2:11:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpLosslessConversion`2.Convert(`0)">
            <summary>
            Converts a specified value to the equivalent value in the <typeparamref name="TResult"/> data type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <typeparamref name="TResult"/> equivalent to the <typeparamref name="TData"/>
                <paramref name="value"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:41:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.ConversionSearch">
            <summary>Represents a search result for a conversion path between data types.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.PrioritySearchQueue">
            <summary>Holds the the set of open conversion searches, prioritized by cost.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility">
            <summary>
            Provides static helper methods for working with generic types.
            </summary>
            <remarks>
            Provides methods for constructing <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/> instances based on a list of candidate generic types or methods
            and for getting type arguments from generic types.
            <para>
            The generic maker types provide a way to call generic members outside of a strongly-typed scope, without having to perform any reflection logic.
            When given multiple candidates, the maker types  return the first generic type or method that can be resolved.
            </para>
                <para>
            The generic maker types  also resolve any additional type arguments based on the registered descriptor types.
            For example, given class <c>C&lt;T,H,D&gt; where D : IOpAddition&lt;T,H&gt;</c> and a maker for the type,
            you can call the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type)"/> method with a type argument of <c>DateTime</c>
            and the maker will find the registered <c>DateAndTimeDescriptor : IOpAddition&lt;DateTime,TimeSpan&gt;</c>
            and infer the type of <c>H</c> to be <c>TimeSpan</c>.
            </para>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/10/2012 10:42:59 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``1(System.Type[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``6(System.Type[])"/>
            <lastupdated>6/10/2012 10:44:55 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``2(System.Type[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``6(System.Type[])"/>
            <lastupdated>6/10/2012 10:44:51 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``3(System.Type[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``6(System.Type[])"/>
            <lastupdated>6/10/2012 10:44:47 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``4(System.Type[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``6(System.Type[])"/>
            <lastupdated>6/10/2012 10:44:41 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``5(System.Type[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``6(System.Type[])"/>
            <lastupdated>6/10/2012 10:44:37 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateTypeMaker``6(System.Type[])">
            <summary>
            Returns a <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/> generic type maker for the given candidate types.
            </summary>
            <remarks>
            Each type in the list of candidate types must be assignable to <typeparamref name="TResult"/>,
            and must have a constructor taking arguments that are assignable to the type parameters.
            <para>
            See <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/> for more information on how the candidate types are resolved.
            </para>
            </remarks>
            <typeparam name="T1">The type of the first constructor argument.</typeparam>
            <typeparam name="T2">The type of the second constructor argument.</typeparam>
            <typeparam name="T3">The type of the third constructor argument.</typeparam>
            <typeparam name="T4">The type of the fourth constructor argument.</typeparam>
            <typeparam name="T5">The type of the fifth constructor argument.</typeparam>
            <typeparam name="TResult">An interface or base class implemented by all of the candidate types.</typeparam>
            <param name="candidates">The collection of candidate types to choose from.</param>
            <returns>A generic type maker for the given candidate types.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="candidates"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="candidates"/> is empty.
                <para>-or-</para>
                <para><paramref name="candidates"/> contains a <see langword="null"/> element.</para>
                <para>- or -</para>
                <para>A type in <paramref name="candidates"/> cannot be assigned to <typeparamref name="TResult"/>.</para>
                <para>- or -</para>
                <para>A type in <paramref name="candidates"/> does not have at least one public constructor taking the specified number of arguments.</para>
            </exception>
            <seealso cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/>
            <lastupdated>6/10/2012 10:44:32 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``1(System.Linq.Expressions.Expression{System.Func{``0}}[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``6(System.Linq.Expressions.Expression{System.Func{``5}}[])"/>
            <lastupdated>6/10/2012 10:44:01 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``2(System.Linq.Expressions.Expression{System.Func{``1}}[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``6(System.Linq.Expressions.Expression{System.Func{``5}}[])"/>
            <lastupdated>6/10/2012 10:43:57 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``3(System.Linq.Expressions.Expression{System.Func{``2}}[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``6(System.Linq.Expressions.Expression{System.Func{``5}}[])"/>
            <lastupdated>6/10/2012 10:43:53 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``4(System.Linq.Expressions.Expression{System.Func{``3}}[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``6(System.Linq.Expressions.Expression{System.Func{``5}}[])"/>
            <lastupdated>6/10/2012 10:43:48 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``5(System.Linq.Expressions.Expression{System.Func{``4}}[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``6(System.Linq.Expressions.Expression{System.Func{``5}}[])"/>
            <lastupdated>6/10/2012 10:43:43 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.CreateMethodMaker``6(System.Linq.Expressions.Expression{System.Func{``5}}[])">
            <summary>
            Returns a <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/> generic method maker for the given candidate methods.
            </summary>
            <remarks>
            Each method in the list of candidate methods must take arguments that are assignable to the type parameters.
            <para>
            See <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/> for more information on how the candidate methods are resolved.
            </para>
            </remarks>
            <typeparam name="T1">The type of the first method argument.</typeparam>
            <typeparam name="T2">The type of the second method argument.</typeparam>
            <typeparam name="T3">The type of the third method argument.</typeparam>
            <typeparam name="T4">The type of the fourth method argument.</typeparam>
            <typeparam name="T5">The type of the fifth method argument.</typeparam>
            <typeparam name="TResult">A type returned by all of the candidate types.</typeparam>
            <param name="candidates">The collection of candidate methods to choose from.</param>
            <returns>A generic method maker for the given candidate methods.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="candidates"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="candidates"/> is empty.
                <para>- or -</para>
                <para><paramref name="candidates"/> contains a <see langword="null"/> element.</para>
                <para>- or -</para>
                <para><paramref name="candidates"/> contains an expression that is not a method call.</para>
            </exception>
            <seealso cref="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1"/>
            <lastupdated>6/10/2012 10:43:37 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GetAssignedTypeArguments(System.Type,System.Type)">
            <summary>
            Returns a collection of all type arguments in the concrete type when given an open generic base type and a type that derives from the base type.
            </summary>
            <remarks>
            If the derived type does not implement the base type, an empty collection is returned.
            Otherwise, a collection of <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments"/> is returned for each implementation of the base type by the derived type.
            <para>
            The type assignments are only determined once for a given base and derived type.
            Subsequent calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GetAssignedTypeArguments(System.Type,System.Type)"/> with the same arguments return the same cached result.
            </para>
            </remarks>
            <example>
            The table below lists results for various example base and derived type arguments.
            <image src="GetAssignedTypeArguments.png"/>
            </example>
            <param name="baseType">The generic type to find generic type argument assignments for.</param>
            <param name="derivedType">The type implementing the base type.</param>
            <returns>A collection containing an entry for each instance of the base type implemented by the derived type.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="baseType"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="derivedType"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/10/2012 11:19:31 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GetAssignedTypeArgumentsCore(System.Collections.Generic.KeyValuePair{System.Type,System.Type})">
            <summary>Performs actual search for _assignedTypeArgumentsCache.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.MatchesTypeArguments(System.Type[],System.Type[])">
            <summary>Determines whether the type assignments for an available type match the requirements of the base generic type.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.SatisfiesGenericParameterConstraints(System.Type,System.Type)">
            <summary>Determines whether a given type satisfies the constraints on a generic parameter.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1">
            <summary>
            Represents an object that can make a closed generic type or method from a candidate list of open generic types or methods.
            </summary>
            <typeparam name="TDelegate">The type of function created by the maker.</typeparam>
            <remarks>
            Use <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> to create a <typeparamref name="TDelegate"/> instance backed
            by a strongly-typed member from the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> collection.
            <para>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Cache(`0,System.Tuple{System.Type,System.Type}[])"/> method to pre-populate the maker with concrete types, or use <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.DisableCaching"/>
            when the results of <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> are only requested once and do not need to be saved.
            </para>
            </remarks>
            <seealso cref="T:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility"/>
            <lastupdated>6/10/2012 11:23:38 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.DisableCaching">
            <summary>
            Disables the caching of results from calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/>.
            </summary>
            <remarks>
            Use this if the results of calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> are being cached elsewhere.
            </remarks>
            <returns>The generic maker instance, for further in-line configuration.</returns>
            <lastupdated>6/10/2012 11:25:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Cache(`0,System.Tuple{System.Type,System.Type}[])">
            <summary>
            Caches a pre-defined <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> result.
            </summary>
            <param name="specialization">A pre-defined result.</param>
            <param name="expectedTypeArguments">The list of known type arguments, and the corresponding expected descriptor types.</param>
            <remarks>
            The <paramref name="expectedTypeArguments"/> collection represents the set of known type arguments for <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/>, contained in <see cref="P:System.Tuple`2.Item1"/>,
            and the corresponding expected descriptor type, contained in <see cref="P:System.Tuple`2.Item2"/>.
            <para>
            If a call to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> is made using the known type arguments, and <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.DataTypeDescriptors.GetDescriptorType(System.Type)"/> returns
            the corresponding expected descriptor type for every entry, then the specialization is returned from the cache.
            Otherwise, make proceeds with normal candidate member resolution.
            </para>
                <para>
            The collection is handled positionally, with <see langword="null"/> pairs ignored. If a pair is not <see langword="null"/>, the known type argument must be specified.
            </para>
            </remarks>
            <returns>The generic maker instance, for further in-line configuration.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="expectedTypeArguments"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="expectedTypeArguments"/> contains a <see langword="null"/> known type argument.
                <para>- or -</para>
                <para>A specialization with the same known type arguments has already been specified.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              Caching is disabled.
            </exception>
            <lastupdated>6/10/2012 11:25:37 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type)">
            <summary>
            Returns a delegate to call the generic type constructor or generic method for the first member in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> that
            can be constructed using the specified type argument, and any inferred descriptor arguments.
            </summary>
            <remarks>
            The type argument is handled positionally, with <see langword="null"/> values ignored.
            For example, for a type <c>C&lt;T1,T2,T3&gt;</c>, you can call <c>Make( typeof(int) )</c> to set <c>T1</c> to <c>int</c>).
            <para>
            The candidate member resolution is only performed once for a given set of type arguments.
            Subsequent calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type)"/> with the same type arguments return the same cached result.
            </para>
            </remarks>
            <param name="knownTypeArgument">The known type argument to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.</param>
            <returns>
            A delegate to call the first generic type constructor or generic method in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> using the specified arguments,
            or <see langword="null"/> if no candidate could be constructed.
            </returns>
            <lastupdated>8/12/2013 11:37:42 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type,System.Type)">
            <summary>
            Returns a delegate to call the generic type constructor or generic method for the first member in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> that
            can be constructed using the specified type arguments, and any inferred descriptor arguments.
            </summary>
            <remarks>
            The type arguments are handled positionally, with <see langword="null"/> values ignored.
            For example, for a type <c>C&lt;T1,T2,T3&gt;</c>, you can call <c>Make( null, typeof(int) )</c> to set <c>T2</c> to <c>int</c>).
            <para>
            The candidate member resolution is only performed once for a given set of type arguments.
            Subsequent calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type,System.Type)"/> with the same type arguments return the same cached result.
            </para>
            </remarks>
            <param name="knownTypeArgument1">
            The first known type argument to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.
            This value can be <see langword="null"/>.
            </param>
            <param name="knownTypeArgument2">
            The second known type argument to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.
            This value can be <see langword="null"/>.
            </param>
            <returns>
            A delegate to call the first generic type constructor or generic method in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> using the specified arguments,
            or <see langword="null"/> if no candidate could be constructed.
            </returns>
            <lastupdated>8/12/2013 11:37:42 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type,System.Type,System.Type)">
            <summary>
            Returns a delegate to call the generic type constructor or generic method for the first member in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> that
            can be constructed using the specified type arguments, and any inferred descriptor arguments.
            </summary>
            <remarks>
            The type arguments are handled positionally, with <see langword="null"/> values ignored.
            For example, for a type <c>C&lt;T1,T2,T3&gt;</c>, you can call <c>Make( null, typeof(int), null )</c> to set <c>T2</c> to <c>int</c>).
            <para>
            The candidate member resolution is only performed once for a given set of type arguments.
            Subsequent calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type,System.Type,System.Type)"/> with the same type arguments return the same cached result.
            </para>
            </remarks>
            <param name="knownTypeArgument1">
            The first known type argument to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.
            This value can be <see langword="null"/>.
            </param>
            <param name="knownTypeArgument2">
            The second known type argument to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.
            This value can be <see langword="null"/>.
            </param>
            <param name="knownTypeArgument3">
            The third known type argument to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.
            This value can be <see langword="null"/>.
            </param>
            <returns>
            A delegate to call the first generic type constructor or generic method in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> using the specified arguments,
            or <see langword="null"/> if no candidate could be constructed.
            </returns>
            <lastupdated>8/12/2013 11:37:42 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])">
            <summary>
            Returns a delegate to call the generic type constructor or generic method for the first member in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> that
            can be constructed using the specified type arguments, and any inferred descriptor arguments.
            </summary>
            <remarks>
            The <paramref name="knownTypeArguments"/> collection is handled positionally, with <see langword="null"/> elements ignored.
            For example, for a type <c>C&lt;T1,T2,T3&gt;</c>, you can call <c>Make( null, typeof(int) )</c> to set <c>T2</c> to <c>int</c>).
            Extra type arguments are ignored.
            <para>
            The candidate member resolution is only performed once for a given set of type arguments.
            Subsequent calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> with the same type arguments return the same cached result.
            </para>
            </remarks>
            <param name="knownTypeArguments">The list of known type arguments to use when trying to construct one of the candidate members in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>.</param>
            <returns>
            A delegate to call the first generic type constructor or generic method in <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/> using the specified <paramref name="knownTypeArguments"/>,
            or <see langword="null"/> if no candidate could be constructed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="knownTypeArguments"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/10/2012 11:26:32 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.IsCaching">
            <summary>
            Gets a value indicating whether the results of calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> are cached.
            </summary>
            <value>A value indicating whether the results of calls to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/> are cached.</value>
            <lastupdated>6/10/2012 11:24:12 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates">
            <summary>
            Gets the candidate types or methods the generic maker uses.
            </summary>
            <value>The candidate types or methods the generic maker  uses.</value>
            <lastupdated>6/10/2012 11:24:02 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.DisableCaching">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.DisableCaching"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Cache(`0,System.Tuple{System.Type,System.Type}[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Cache(`0,System.Tuple{System.Type,System.Type}[])"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Make(System.Type)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type)"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Make(System.Type,System.Type)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type,System.Type)"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Make(System.Type,System.Type,System.Type)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type,System.Type,System.Type)"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Make(System.Type[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Make(System.Type[])"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.GetCandidates(`1[])">
            <summary>
            Returns a collection of the available candidate members.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.IsGenericMemberDefinition(`1)">
            <summary>
            Returns a value indicating whether the member is a generic definition.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.MakeGenericMember(`1,System.Type[])">
            <summary>
            Creates a closed instance of the given generic member definition.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.MakeCore(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker{`0,`1}.Candidate},NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument[])">
            <summary>
            Returns the first valid member invoker delegate.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.TryGetInvokeParameters(System.Reflection.ParameterInfo[],System.Linq.Expressions.Expression[]@,System.Linq.Expressions.ParameterExpression[]@)">
            <summary>
            Attempts to create parameter and argument expressions for the invoker delegate and the method call, respectively.
            Returns false if any type is found to be incompatible, or returns true if it successfully created the expressions.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.AssignTypeArguments(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument},NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument[])">
            <summary>
            Assigns concrete arguments for all of the specified open type arguments for the candidate member.
            If valid type arguments cannot be assigned, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.GetClosedMember(NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker{`0,`1}.Candidate,NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument[])">
            <summary>
            Returns a closed member with the specified type arguments.
            If the member is already closed, returns the given member.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.MakeInvoker(System.Type,System.Reflection.MethodBase,System.Reflection.ParameterInfo[])">
            <summary>
            Attempts to create a delegate to call the specified member, returning null if the arguments are not compatible.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.GetInvoker(NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument[])">
            <summary>
            Called by the <c>_invokerCache</c> to retrieve an invoker delegate for the specified type arguments.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.UpdateFixedArgumentInvokerCache``1(System.Collections.Concurrent.NIConcurrentDictionary{``0,`0},``0,`0)">
            <summary>Updates the fixed-count argument cache with the specified value, if caching is enabled.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.GetAssignedTypeFromTypeArgument(System.Type[],System.Type)">
            <summary>Finds the assigned type corresponding to the given generic type argument.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.InferDescriptorFromAssignedDataTypes(System.Type[],NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument)">
            <summary>Searches for a descriptor for the given generic type argument, using previously assigned type arguments.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.GetGenericArgumentConstraintTypeAssignments(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument},System.Type[])">
            <summary>Infers descriptor arguments, and retrieves type assignments based on constraints to generic type argument.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.InferUnassignedTypesFromConstraints(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument},System.Type[])">
            <summary>Searches for type assignments using the generic constraints of known type arguments.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.AssignInferredTypes(NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments,System.Type[])">
            <summary>Updates the set of assigned types, if the inferred arguments are compatible with the existing assignments.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Permute(System.Int32[])">
            <summary>Finds the next lexicographic permutation of indices.</summary>
            http://en.wikipedia.org/wiki/Permutations#Systematic_generation_of_all_permutations
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.IsCaching">
            <inheritdoc cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.IsCaching"/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Candidates">
            <inheritdoc cref="P:NationalInstruments.DataInfrastructure.Descriptors.IGenericMaker`1.Candidates"/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Candidate">
            <summary>
            Represents one of the candidate members the maker can choose from,
            and the open generic arguments that need to be resolved before the member can be used.
            </summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Candidate.Member">
            <summary>The candidate member.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker`2.Candidate.OpenTypeArguments">
            <summary>The open generic arguments for the candidate.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMethodMakerBase`2.GetCandidates(System.Reflection.MethodInfo[])">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMethodMakerBase`2.IsGenericMemberDefinition(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMethodMakerBase`2.MakeGenericMember(System.Reflection.MethodInfo,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMethodMakerBase`2.MakeCore(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker{`0,System.Reflection.MethodInfo}.Candidate},NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument[])">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMethodMakerBase`2.GetCandidateMethods(System.Linq.Expressions.Expression{System.Func{`1}}[])">
            <summary>
            Retrieves the <see cref="T:System.Reflection.MethodInfo"/> candidates from the expressions passed by the user.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericTypeMakerBase`1.GetCandidates(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericTypeMakerBase`1.IsGenericMemberDefinition(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericTypeMakerBase`1.MakeGenericMember(System.Type,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericTypeMakerBase`1.MakeCore(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericMaker{`0,System.Type}.Candidate},NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument[])">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericTypeMakerBase`1.GetConstructorInvokers(System.Type)">
            <summary>
            Returns constructor invoker delegates for all compatible constructors on the specified closed type.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GenericTypeMakerBase`1.GetCandidateTypeConstructors(System.Type)">
            <summary>
            Searches the constructors of the candidate types for one taking arguments assignable to the given argument types.
            </summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1">
            <summary>
            Represents the base type for all data type descriptors.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use the <c>IOp</c> interfaces derived from the base <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> interface
            to perform operations on <typeparamref name="TData"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:07:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpAddition`2">
            <summary>
            Provides access to addition operations on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <typeparam name="TOffset">The data type of the addition offset.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpAddition`2"/> to perform addition operations on
            <typeparamref name="TData"/> and <typeparamref name="TOffset"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:07:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpAddition`2.Add(`0,`1)">
            <summary>
            Performs an add operation on a value by a given offset.
            </summary>
            <example>For example: <c>2.3 + 1.2 = 3.5</c>, <c>(DateTime)"today" + TimeSpan.FromDays( 1 ) = (DateTime)"tomorrow"</c>.</example>
            <param name="value">A data value.</param>
            <param name="offset">The amount to add to <paramref name="value"/>.</param>
            <returns>The sum of <paramref name="value"/> and <paramref name="offset"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 11:29:23 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1">
            <summary>
            Provides access to bitwise operations on integral data types.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1"/> to perform operations on the binary representation of <typeparamref name="TData"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:07:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.ShiftLeft(`0,System.Int32)">
            <summary>
            Performs a left-shift operation on a value by the specified amount.
            </summary>
            <example>For example: <c>12 &lt;&lt; 1 = 24</c>.</example>
            <remarks>
            For further information, refer to <see keyword="925a2894-bbd0-45ea-98aa-626c243b7632" keywordType="msdn">Bitwise Left Shift Operator (&lt;&lt;).</see>
            </remarks>
            <param name="value">The value to shift.</param>
            <param name="amount">The amount to shift the value.</param>
            <returns><paramref name="value"/> left-shifted by <paramref name="amount"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 12:00:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.ShiftRight(`0,System.Int32)">
            <summary>
            Performs a right-shift operation on a value by the specified amount.
            </summary>
            <example>For example: <c>12 &gt;&gt; 1 = 6</c>.</example>
            <remarks>
            For further information, refer to <see keyword="8384161f-ee5a-4d78-811a-321739c70d82" keywordType="msdn">Bitwise Right Shift Operator (&gt;&gt;).</see>
            </remarks>
            <param name="value">The value to shift.</param>
            <param name="amount">The amount to shift the value.</param>
            <returns><paramref name="value"/> right-shifted by <paramref name="amount"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 12:00:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.Not(`0)">
            <summary>
            Performs a bitwise NOT operation on the given value.
            </summary>
            <example>For example: <c>~0xF0 = 0x0F</c>.</example>
            <remarks>For further information, refer to <see keyword="491ebf58-5cbe-4ccd-a5a3-8825bb37eee9" keywordType="msdn">Bitwise NOT Operator (~)</see>.
            <see href="http://msdn.microsoft.com/en-us/library/46zxf1c0.aspx">Bitwise NOT Operator (~)</see>.</remarks>
            <param name="value">A data value.</param>
            <returns>The bitwise complement of <paramref name="value"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 11:53:57 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.And(`0,`0)">
            <summary>
            Performs a bitwise AND operation on the given values.
            </summary>
            <example>For example: <c>0xFF &amp; 0x0F = 0x0F</c>.</example>
            <remarks>For further information, refer to <see keyword="491ebf58-5cbe-4ccd-a5a3-8825bb37eee9" keywordType="msdn">Bitwise AND Operator (&amp;) </see>. </remarks>
            <param name="left">A data value.</param>
            <param name="right">A data value.</param>
            <returns>The bitwise conjunction of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 12:00:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.Or(`0,`0)">
            <summary>
            Performs a bitwise OR operation on the given values.
            </summary>
            <example>For example: <c>0xFF | 0x0F = 0xFF</c>.</example>
            <remarks>
            For further information, refer to <see keyword="b87180f8-c33b-46e2-a9d5-90aa96d0011e" keywordType="msdn">Bitwise OR Operator (|).</see>
            </remarks>
            <param name="left">A data value.</param>
            <param name="right">A data value.</param>
            <returns>The bitwise inclusive disjunction of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 12:00:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.Xor(`0,`0)">
            <summary>
            Performs a bitwise XOR operation on the given values.
            </summary>
            <example>For example: <c>0xFF ^ 0x0F = 0xF0</c>.</example>
            <remarks>
            For further information, refer to <see keyword="8df0d53b-7630-4b61-8239-cf24a7dd7b2b" keywordType="msdn">Bitwise XOR Operator (^).</see>
            </remarks>
            <param name="left">A data value.</param>
            <param name="right">A data value.</param>
            <returns>The bitwise exclusive-or of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 12:04:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.BitCount">
            <summary>
            Gets the number of bits in a data type.
            </summary>
            <example>For example: int = 32, byte = 8, etc.</example>
            <value>The number of bits in a data type.</value>
            <lastupdated>6/10/2012 11:29:52 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpBitwise`1.AllBits">
            <summary>
            Gets a value with all bits set.
            </summary>
            <value>A value with all bits set.</value>
            <example>For example: byte = 0xFF.</example>
            <lastupdated>6/10/2012 11:28:58 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpBounded`1">
            <summary>
            Provides access to the static minimum and maximum value fields on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpBounded`1"/> to access numeric information for <typeparamref name="TData"/> values
            with a finite representation.
            </remarks>
            <lastupdated>6/11/2012 2:08:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpBounded`1.MinValue">
            <summary>
            Gets the value of the <c>TData.MinValue</c> field.
            </summary>
            <value>The minimum value of the data type.</value>
            <lastupdated>6/10/2012 12:06:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpBounded`1.MaxValue">
            <summary>
            Gets the value of the <c>TData.MaxValue</c> field.
            </summary>
            <value>The maximum value of the data type.</value>
            <lastupdated>6/10/2012 12:06:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1">
            <summary>
            Provides methods for comparing values.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1"/> to compare on <typeparamref name="TData"/> values,
            and test for special values.
            </remarks>
            <lastupdated>6/11/2012 2:08:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1.Compare(`0,`0)">
            <summary>
            Compares two specified values and returns an integer that indicates their relationship to one another.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. Refer to
             <see cref="M:System.IComparable`1.CompareTo(`0)" crefType="PartiallyQualified"/> for the meanings of the return value.
            </returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:10:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1.IsDefined(`0)">
            <summary>
            Determines whether a value represents a defined value for the data type.
            </summary>
            <example>
                <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1.IsDefined(`0)"/> would return <see langword="true"/> for a <c>double</c> value of <see cref="F:System.Double.NegativeInfinity"/>
                or a <c>Nullable&lt;int&gt;</c> value of one. <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1.IsDefined(`0)"/> would return <see langword="false"/>
                for a <c>double</c> value of <c>NaN</c> or a <c>Nullable&lt;int&gt;</c> value of <see langword="null"/>.
            </example>
            <param name="value">The value to test.</param>
            <returns><see langword="true"/> if the value is defined; otherwise, <see langword="false"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/11/2012 2:04:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1.IsInfinite(`0)">
            <summary>
            Determines whether a value represents any infinite value for the data type.
            </summary>
            <example>For example, double.PositiveInfinity and double.NegativeInfinity.</example>
            <remarks>
            For more information, refer to <see cref="M:System.Double.IsInfinity(System.Double)"/>.
            </remarks>
            <param name="value">The value to test.</param>
            <returns><see langword="true"/> if the value is infinite; otherwise, <see langword="false"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:15:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1">
            <summary>
            Provides access to operations on continuous data types.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1"/> to perform rounding and truncation operations on <typeparamref name="TData"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:08:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Ceiling(`0)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified value.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Math.Ceiling(System.Double)"/> for more information.
            </remarks>
            <param name="value">A continuous value.</param>
            <returns>The smallest integral value that is greater than or equal to <paramref name="value"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:18:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Floor(`0)">
            <summary>
            Returns the largest integral value that is less than or equal to the specified value.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Math.Floor(System.Double)"/> for more information.
            </remarks>
            <param name="value">A continuous value.</param>
            <returns>The largest integral value that is less than or equal to <paramref name="value"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:19:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Round(`0)">
            <summary>
            Returns the nearest integral value to the specified value.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Math.Round(System.Double)"/> for more information.
            </remarks>
            <param name="value">A continuous value.</param>
            <returns>The nearest integral value to <paramref name="value"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:20:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Round(`0,System.Int32)">
            <summary>
            Rounds a value to the specified number of fractional digits.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Math.Round(System.Double)"/> for more information.
            </remarks>
            <param name="value">A continuous value.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns>The number nearest to <paramref name="value"/> that contains a number of fractional digits equal to <paramref name="digits"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="digits"/> is less than zero or greater than <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.MaximumRoundDigits"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:22:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Truncate(`0)">
            <summary>
            Returns the integral part of the specified value.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Math.Truncate(System.Double)"/> for more information.
            </remarks>
            <param name="value">A continuous value.</param>
            <returns>The integral part of <paramref name="value"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:23:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.MaximumRoundDigits">
            <summary>
            Gets the maximum number of digits that can be passed to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Round(`0,System.Int32)"/>.
            </summary>
            <value>The maximum number of digits that can be passed to <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpContinuous`1.Round(`0,System.Int32)"/>.</value>
            <lastupdated>6/10/2012 1:15:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpDigitPosition`1">
            <summary>
            Provides access to information on the magnitude of a scalar value as given by its base 10 digits.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpDigitPosition`1"/> to access integral and fractional digit information for <typeparamref name="TData"/> values.
            </remarks>
            <example>
            Test if addition of two positive values (left and right) will be successful:
            <code>
            int leftDigits = Ops.GetLargestIntegralDigitPosition( left );
            int rightDigits = Ops.GetLargestIntegralDigitPosition( right );
            int maxResultDigits = 1 + Math.Max( leftDigits, rightDigits );
            bool addGuaranteedSuccessful = maxResultDigits &lt; Ops.GetLargestIntegralDigitPosition( Ops.MaxValue );
            </code>
            </example>
            <lastupdated>6/10/2012 1:28:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpDigitPosition`1.GetLargestIntegralDigitPosition(`0)">
            <summary>
            Gets the signed position of the largest base-10 integral digit in the value.
            </summary>
            <remarks><c>
            if( [Math]::Truncate($d) -eq 0 ) { 0 } else { [int][Math]::Truncate( [Math]::Sign($d) * (1 + [Math]::Log10( [Math]::Abs($d) ))) } </c>
            </remarks>
            <example>For example,  the largest integral digit in 123.05 is at position 3; i.e., 10^3^ &lt;= 123 &lt; 10^4^; for -123.05, signed position is -3.</example>
            <param name="value">The value to examine.</param>
            <returns>The signed position of the largest base-10 integral digit in the value.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:30:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpDigitPosition`1.GetLargestFractionalDigitPosition(`0)">
            <summary>
            Gets the position of the largest base-10 fractional digit in the value.
            </summary>
            <remarks><c>
            $a = [Math]::Abs($d); $f = $a - [Math]::Truncate($a); if( $f -eq 0 ) { 0 } else { [Math]::Ceiling( [Math]::Abs( [Math]::Log10($f) ) ) }</c>
            </remarks>
            <example>For example,  the largest fractional digit in 123.05 is at position 2; i.e., 10^-2^ &lt;= 0.05 &lt; 10^-1^.</example>
            <param name="value">The value to examine.</param>
            <returns>The position of the largest base-10 fractional digit in the value.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:29:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpDivision`2">
            <summary>
            Provides access to division operations on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <typeparam name="TFactor">The data type of the division factor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpDivision`2"/> to perform division and remainder operations on
            <typeparamref name="TData"/> and <typeparamref name="TFactor"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:09:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpDivision`2.Divide(`0,`1)">
            <summary>
            Performs a division operation on a value by a given factor.
            </summary>
            <example>For example, <c>9 / 4 = 2</c>, <c>3.2 / 2.0 = 1.6</c>.</example>
            <param name="value">A data value.</param>
            <param name="factor">The factor to divide <paramref name="value"/> by.</param>
            <returns>The quotient of <paramref name="value"/> and <paramref name="factor"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:30:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpDivision`2.Remainder(`0,`1)">
            <summary>
            Performs a modulus operation on a value by a given factor.
            </summary>
            <example>For example, <c>9 % 4 = 1</c>, <c>3.2 % 2.0 = 1.2</c>.</example>
            <param name="value">A data value.</param>
            <param name="factor">The factor to modulus <paramref name="value"/> by.</param>
            <returns>The remainder of <paramref name="value"/> and <paramref name="factor"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:31:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1">
            <summary>
            Provides methods for formatting and parsing string representations of values.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1"/> to perform formatting and parsing operations on <typeparamref name="TData"/> and string values.
            </remarks>
            <lastupdated>6/11/2012 2:09:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1.ToString(`0,System.String,System.IFormatProvider)">
            <summary>
            Converts a value to a string representation.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)"/> for more information.
            </remarks>
            <param name="value">The value to format.</param>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The string representation of <paramref name="value"/> as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 2:58:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1.TryParse(System.String,System.String,System.IFormatProvider,`0@)">
            <summary>
            Converts a string representation of a value to the equivalent data value.
            </summary>
            <remarks>
                <para>If <paramref name="format"/> is not <see langword="null"/> and <typeparamref name="TData"/> supports exact parsing,
            the <c>TryParseExact</c> method of <typeparamref name="TData"/> is used; otherwise, the <c>TryParse</c> method is used.</para>
            </remarks>
            <param name="input">A string containing a value to convert.</param>
            <param name="format">A parse format specification.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <param name="result">The parsed value, or <c>default(TData)</c> if parsing failed.</param>
            <returns><see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <seealso cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/>
            <lastupdated>6/10/2012 1:37:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1.Parse(System.String,System.String,System.IFormatProvider)">
            <summary>
            Converts a string representation of a value to the equivalent data value.
            </summary>
            <remarks>
                <para>If <paramref name="format"/> is not <see langword="null"/> and <typeparamref name="TData"/> supports exact parsing,
            the <c>ParseExact</c> method of <typeparamref name="TData"/> will be used; otherwise, the <c>Parse</c> method will be used.</para>
            </remarks>
            <param name="input">A string containing a value to convert.</param>
            <param name="format">A parse format specification.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <returns>The parsed value.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <paramref name="input"/> is not in a valid format.
            </exception>
            <exception cref="T:System.Exception">
              Other parser-specific exceptions; e.g., <see cref="T:System.OverflowException"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <seealso cref="M:System.Double.Parse(System.String,System.IFormatProvider)"/>
            <lastupdated>6/10/2012 1:34:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1.RoundTripFormat">
            <summary>
            Gets a format string that allows a value to round-trip through <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1.ToString(`0,System.String,System.IFormatProvider)"/> and <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormat`1.Parse(System.String,System.String,System.IFormatProvider)"/>.
            </summary>
            <value>A round-trip format string.</value>
            <lastupdated>6/10/2012 1:31:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpFormatInBase`1">
            <summary>
            Provides methods for formatting and parsing string representations of values in a specific base.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpFormatInBase`1"/> to perform formatting and parsing operations on <typeparamref name="TData"/> and string values
            in a specific base.
            </remarks>
            <lastupdated>6/11/2012 2:09:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormatInBase`1.ToString(`0,System.Int32,System.IFormatProvider)">
            <summary>
            Converts a value to a string representation in a specified base.
            </summary>
            <remarks>
            Refer to <see cref="M:System.Convert.ToString(System.Int32,System.Int32)"/> for more information.
            </remarks>
            <param name="value">The value to format.</param>
            <param name="toBase">The base of the return value.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The string representation of <paramref name="value"/> in base <paramref name="toBase"/>.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="toBase"/> is not a valid base.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:39:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormatInBase`1.TryParse(System.String,System.Int32,System.IFormatProvider,`0@)">
            <summary>
            Converts a string representation of a value in a specified base to the equivalent data value.
            </summary>
            <param name="input">A string containing a value to convert.</param>
            <param name="fromBase">The base of the input value.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <param name="result">The parsed value, or <c>default(TData)</c> if parsing failed.</param>
            <returns><see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="fromBase"/> is not a valid base.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:40:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpFormatInBase`1.Parse(System.String,System.Int32,System.IFormatProvider)">
            <summary>
            Converts a string representation of a value in a specified base to the equivalent data value.
            </summary>
            <param name="input">A string containing a value to convert.</param>
            <param name="fromBase">The base of the input value.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <returns>The parsed value.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="fromBase"/> is not a valid base.
            </exception>
            <exception cref="T:System.FormatException">
                <paramref name="input"/> is not in a value format.
            </exception>
            <exception cref="T:System.Exception">
              Other parser-specific exceptions; e.g., OverflowException.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:38:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpInfinity`1">
            <summary>
            Provides access to the static positive infinity value field on a data type.
            </summary>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpInfinity`1"/> to access numeric information for <typeparamref name="TData"/> values.
            <para>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpComparison`1"/> interface to test for infinite <typeparamref name="TData"/> values.
            </para>
            <para>
            If <typeparamref name="TData"/> is a signed data type, negative infinity can be retrieved
            by using the <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1"/> interface.
            </para>
            </remarks>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <lastupdated>6/10/2012 1:40:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpInfinity`1.Infinity">
            <summary>
            Gets the value of the <c>TData.Infinity</c> or <c>TData.PositiveInfinity</c> field.
            </summary>
            <value>The value of positive infinity field.</value>
            <lastupdated>6/10/2012 1:40:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1">
            <summary>
            Provides access to methods for composing and decomposing multi-dimensional types.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1"/> to break apart and build up <typeparamref name="TData"/> values
            from their component parts.
            </remarks>
            <lastupdated>6/11/2012 2:11:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1.GetDefaultValue">
            <summary>
            Gets a default <typeparamref name="TData"/> value.
            </summary>
            <returns>A default <typeparamref name="TData"/> value.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:46:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1.GetDimensionDataTypes(`0,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Returns a collection containing the type of each dimension in the given value.
            </summary>
            <param name="value">The value to examine.</param>
            <param name="decomposeOption">An optional trait indicating how values should be decomposed.</param>
            <returns>A collection containing the type of each dimension in the given value.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:46:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1.DecomposeValues(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Decomposes the multi-dimensional value into individual buffers of samples.
            </summary>
            <remarks>
            Each entry in the returned collection corresponds to a dimension of the input value.
            </remarks>
            <example>
              <list type="table">
                <listheader>
                  <term>Input Buffer Type </term>
                  <description>Output Buffer Types </description>
                </listheader>
                <item>
                  <term>Buffer&lt;ComplexDouble&gt;</term>
                  <description>Buffer&lt;double&gt;, Buffer&lt;double&gt;</description>
                </item>
              </list>
            </example>
            <param name="values">The values to decompose.</param>
            <param name="decomposeOption">An optional trait indicating how values should be decomposed.</param>
            <returns>A collection of buffers containing samples for each dimension in the <paramref name="values"/> buffer.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:46:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1.ComposeValues(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Composes the collection of per-dimension samples into a buffer of one or more instances of the data type.
            </summary>
            <example>
              <list type="table">
                <listheader>
                  <term>Data Type</term>
                  <description>Input Buffer Types</description>
                </listheader>
                <item>
                  <term>Buffer&lt;double&gt;, Buffer&lt;double&gt;</term>
                  <description>ComplexDouble</description>
                </item>
              </list>
            </example>
            <param name="dimensionValues">A collection of buffers containing samples for each dimension of the data type.</param>
            <param name="composeOption">An optional trait indicating how values should be composed.</param>
            <returns>A buffer of samples composed of the given values.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dimensionValues"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="dimensionValues"/> contains a <see langword="null"/> element.
              <para>- or -</para>
              <para>The number of buffers in <paramref name="dimensionValues"/> does not match the number of required dimensions for the data type.</para>
              <para>- or -</para>
              <para>The type of a buffer in <paramref name="dimensionValues"/> does not match the type of the corresponding dimension for the data type.</para>
              <para>- or -</para>
              <para>The buffers in <paramref name="dimensionValues"/> do not contain a consistent number of samples to create instances of the data type.</para>
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:43:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiplication`2">
            <summary>
            Provides access to multiplication operations on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <typeparam name="TFactor">The data type of the multiplication factor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiplication`2"/> to perform multiplication operations on
            <typeparamref name="TData"/> and <typeparamref name="TFactor"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:11:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiplication`2.Multiply(`0,`1)">
            <summary>
            Performs a multiplication operation on a value by a given factor.
            </summary>
            <example>For example: <c>  2.3 * 1.2 = 2.76, new Point(1,2) * Matrix.Identity = (Point)"1,2"</c>.</example>
            <param name="value">A data value.</param>
            <param name="factor">The factor to multiply <paramref name="value"/> by.</param>
            <returns>The product of <paramref name="value"/> and <paramref name="factor"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:47:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1">
            <summary>
            Provides access to methods for composing and decomposing multi-sample types.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1"/> to break apart and build up <typeparamref name="TData"/> values
            from their component parts.
            </remarks>
            <lastupdated>6/11/2012 2:11:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1.GetDefaultValue">
            <summary>
            Gets a default <typeparamref name="TData"/> value.
            </summary>
            <returns>A default <typeparamref name="TData"/> value.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:53:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1.GetDimensionDataTypes(`0,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Returns a collection containing the type of each dimension in the given value.
            </summary>
            <param name="value">The value to examine.</param>
            <param name="decomposeOption">An optional trait indicating how the value should be decomposed.</param>
            <returns>A collection containing the type of each dimension in the given value.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:53:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1.Decompose(`0,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Decomposes the multi-sample value into individual buffers of samples.
            </summary>
            <remarks>
            Each entry in the returned collection corresponds to a dimension of the input value.
            </remarks>
            <example>
              <list type="table">
                <listheader>
                  <term> Input Type </term>
                  <description>Output Buffer Types </description>
                </listheader>
                <item>
                  <term>double[]</term>
                  <description>Buffer&lt;int&gt;, Buffer&lt;double&gt;</description>
                </item>
                <item>
                  <term>ComplexDouble[]</term>
                  <description>Buffer&lt;int&gt;, Buffer&lt;ComplexDouble&gt;</description>
                </item>
                <item>
                  <term>AnalogWaveform&lt;double&gt;</term>
                  <description>Buffer&lt;PrecisionDateTime&gt;, Buffer&lt;double&gt;</description>
                </item>
              </list>
            </example>
            <param name="value">The values to decompose.</param>
            <param name="decomposeOption">An optional trait indicating how the value should be decomposed.</param>
            <returns>A collection of buffers containing samples for each dimension in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:53:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Composes the collection of per-dimension samples into an instance of the data type.
            </summary>
            <example>
              <list type="table">
                <listheader>
                  <term>Input Buffer Types</term>
                  <description>Data Types</description>
                </listheader>
                <item>
                  <term>Buffer&lt;int&gt;, Buffer&lt;double&gt;</term>
                  <description>double[]</description>
                </item>
                <item>
                  <term>Buffer&lt;int&gt;, Buffer&lt;ComplexDouble&gt;</term>
                  <description>ComplexDouble[]</description>
                </item>
                <item>
                  <term>Buffer&lt;PrecisionDateTime&gt;, Buffer&lt;double&gt;</term>
                  <description>AnalogWaveform&lt;double&gt;</description>
                </item>
              </list>
            </example>
            <param name="dimensionValues">A collection of buffers containing samples for each dimension of the data type.</param>
            <returns>A data value composed of the given dimension values.</returns>
            <param name="composeOption">An optional trait indicating how the value should be composed.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dimensionValues"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="dimensionValues"/> contains a <see langword="null"/> element.
              <para>- or -</para>
              <para>The number of buffers in <paramref name="dimensionValues"/> does not match the number of required dimensions for the data type.</para>
              <para>- or -</para>
              <para>The type of a buffer in <paramref name="dimensionValues"/> does not match the type of the corresponding dimension for the data type.</para>
              <para>- or -</para>
              <para>The buffers in <paramref name="dimensionValues"/> do not contain a consistent number of samples to create instances of the data type.</para>
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:51:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpNumeric`1">
            <summary>
            Provides access to basic members available on all types that support numeric mathematical operations.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpNumeric`1"/> to access numeric information for <typeparamref name="TData"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:11:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpNumeric`1.Zero">
            <summary>
            Gets the zero value for the data type.
            </summary>
            <value>The zero value for the data type.</value>
            <lastupdated>6/10/2012 1:54:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpNumeric`1.One">
            <summary>
            Gets the one value for the data type.
            </summary>
            <value>The one value for the data type.</value>
            <lastupdated>6/10/2012 1:53:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpNumeric`1.SmallestPositiveValue">
            <summary>
            Gets the smallest value greater than zero for the data type.
            </summary>
            <value>The smallest value greater than zero for the data type.</value>
            <lastupdated>6/10/2012 1:53:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpObservable`1">
            <summary>
            Provides access to methods for observing a multi-sample data type that supports change notification.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpObservable`1"/> to monitor <typeparamref name="TData"/> values for changes.
            </remarks>
            <lastupdated>6/11/2012 2:12:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpObservable`1.GetValueObserver(`0,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Returns a value observer that monitors the data value.
            </summary>
            <param name="value">The value to observe.</param>
            <param name="decomposeOption">An optional trait indicating how the value should be decomposed.</param>
            <returns>An object that sends a notification when the observed data changes (as defined by the observable type).</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:54:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2">
            <summary>
            Provides access to power and logarithm operations on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <typeparam name="TLog">The data type of the logarithm.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2"/> to perform power and logarithmic operations on
            <typeparamref name="TData"/> and <typeparamref name="TLog"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:12:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2.Logarithm(`1,`0)">
            <summary>
            Returns the logarithm of the given value in the given log base.
            </summary>
            <example>For example, <c> log( 10.0, 501.0 ) ~= 2.7, log( 10.0, 100 ) = 2.0</c>. </example>
            <remarks>
            For more information, refer to <see cref="M:System.Math.Log(System.Double,System.Double)"/>.
            </remarks>
            <param name="value">A data value.</param>
            <param name="logBase">The base of the logarithm.</param>
            <returns>The logarithm of <paramref name="value"/> in base <paramref name="logBase"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:56:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2.Power(`1,`1)">
            <summary>
            Raises the given log base to the given power.
            </summary>
            <example>e.g. pow( 10.0, 2.7 ) ~= 501.0, pow( 10, 2.0 ) = 100</example>
            <remarks>http://msdn.microsoft.com/en-us/library/system.math.pow.aspx</remarks>
            <param name="logBase">The base of the logarithm.</param>
            <param name="power">The power to raise the logarithm base to.</param>
            <returns>The base <paramref name="logBase"/> raised to <paramref name="power"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:56:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2.Base2">
            <summary>
            Gets the base of the base-2 logarithm.
            </summary>
            <value>The base of the base-2 logarithm.</value>
            <lastupdated>6/10/2012 1:54:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2.BaseE">
            <summary>
            Gets the base of the natural logarithm.
            </summary>
            <value>The base of the natural logarithm.</value>
            <lastupdated>6/10/2012 1:54:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpPower`2.Base10">
            <summary>
            Gets the base of the base-10 logarithm.
            </summary>
            <value>The base of the base-10 logarithm.</value>
            <lastupdated>6/10/2012 1:54:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpRatio`1">
            <summary>
            Provides access to the ratio operation on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpRatio`1"/> to compare the magnitudes of two <typeparamref name="TData"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:12:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpRatio`1.Ratio(`0,`0)">
            <summary>
            Performs a ratio operation on the given values.
            </summary>
            <example><c> Ratio( 2.4, 1.2 ) = 2.0, Ratio( 6, 4 ) = 1.5</c></example>
            <remarks>The ratio of two values indicates their relative magnitude (e.g., the ratio of 6 and 3 is 2: 6 is 2 times as big as 3).</remarks>
            <param name="left">A data value.</param>
            <param name="right">A data value.</param>
            <returns>The ratio of <paramref name="left"/> to <paramref name="right"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:57:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpScalarMultiplication`1">
            <summary>
            Provides access to the scalar multiplication operation on a data type.
            </summary>
            <example>Using a scalar factor of 2.0 doubles the size of the data value; using 0.5  halves the data value.</example>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpScalarMultiplication`1"/> to multiply <typeparamref name="TData"/> values by a scalar factor.
            </remarks>
            <lastupdated>6/11/2012 2:12:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpScalarMultiplication`1.Multiply(`0,System.Double)">
            <summary>
            Performs a multiplication operation on a value by a given factor.
            </summary>
            <example><c> 12 * 0.5 = 6, new Point(1,2) * 2.0 = (Point)"2,4"</c></example>
            <param name="value">A data value.</param>
            <param name="factor">The factor to multiply <paramref name="value"/> by.</param>
            <returns>The scalar product of <paramref name="value"/> and <paramref name="factor"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:58:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpScalarMultiplication`1.TryMultiply(`0,System.Double,`0@)">
            <summary>
            Performs a multiplication operation on a value by a given factor.
            </summary>
            <example>For example,  (byte)255 * 2.0 = 510 &gt; byte.MaxValue, returning ConversionResult.LossOfRange.</example>
            <param name="value">A data value.</param>
            <param name="factor">The factor to multiply <paramref name="value"/> by.</param>
            <param name="product">The scalar product of <paramref name="value"/> and <paramref name="factor"/>.</param>
            <returns>A value indicating the accuracy of the scalar multiplication.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 1:59:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1">
            <summary>
            Provides access to operations on signed data types.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1"/> to perform sign-based operations on <typeparamref name="TData"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:13:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1.Sign(`0)">
            <summary>
            Returns a 32-bit signed integer indicating the sign of a value.
            </summary>
            <param name="value">A signed value.</param>
            <returns>
            Returns
            -1 = negative; 0 = zero; +1 = positive.
            </returns>
            <seealso cref="M:System.Math.Sign(System.Double)"/>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 2:02:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1.Negate(`0)">
            <summary>
            Returns the negative of a given value.
            </summary>
            <param name="value">A signed value.</param>
            <returns>The negated value.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 2:01:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1.AbsoluteValue(`0)">
            <summary>
            Returns the absolute value of a given data value.
            </summary>
            <param name="value">A signed value.</param>
            <returns>Returns a value greater than or equal to <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IOpNumeric`1.Zero"/>, equal to the absolute value of the given <paramref name="value"/>.</returns>
            <exception cref="T:System.OverflowException">
              The absolute value of the specified <paramref name="value"/> cannot be represented in the range of the data type.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 2:01:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IOpSigned`1.NegativeOne">
            <summary>
            Gets the negative of the one value for the data type.
            </summary>
            <value>The negative of the one value for the data type.</value>
            <lastupdated>6/10/2012 2:00:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IOpSubtraction`2">
            <summary>
            Provides access to subtraction operations on a data type.
            </summary>
            <typeparam name="TData">The data type supported by the descriptor.</typeparam>
            <typeparam name="TOffset">The data type of the addition offset.</typeparam>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpSubtraction`2"/> to perform subtraction and differencing operations on
            <typeparamref name="TData"/> and <typeparamref name="TOffset"/> values.
            </remarks>
            <lastupdated>6/11/2012 2:13:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpSubtraction`2.Subtract(`0,`1)">
            <summary>
            Performs a subtraction operation on a value by a given offset.
            </summary>
            <example>For example: 2.3 - 1.2 = 1.1, (DateTime)"today" - TimeSpan.FromDays( 1 ) = (DateTime)"yesterday".</example>
            <param name="value">A data value.</param>
            <param name="offset">The amount to subtract from <paramref name="value"/>.</param>
            <returns>The difference of <paramref name="value"/> and <paramref name="offset"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 2:03:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.IOpSubtraction`2.Difference(`0,`0)">
            <summary>
            Performs a difference operation between two values.
            </summary>
            <example>For example: 2.3 - 1.2 = 1.1, (DateTime)"today" - (DateTime)"yesterday" = (TimeSpan)"one day".</example>
            <param name="left">A data value.</param>
            <param name="right">A data value.</param>
            <returns>The offset difference of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/10/2012 2:03:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1">
            <summary>
            Represents an object that can observe changes on <typeparamref name="TData"/> values.
            </summary>
            <typeparam name="TData">The type of data monitored by the observer.</typeparam>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1"/> returned by the <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpObservable`1.GetValueObserver(`0,NationalInstruments.DataInfrastructure.Trait)"/>
            on <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpObservable`1"/> to monitor a <typeparamref name="TData"/> value for changes.
            </remarks>
            <lastupdated>6/11/2012 2:13:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValue">
            <summary>
            Gets or sets the data value to observe.
            </summary>
            <value>The data value to observe.</value>
            <lastupdated>6/10/2012 2:03:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.DecomposeOption">
            <summary>
            Gets the decompose option used to create the observer.
            </summary>
            <value>The decompose option used to create the observer.</value>
            <lastupdated>6/10/2012 2:03:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValueChanged">
            <summary>
            Occurs when <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValue"/> changes.
            </summary>
            <lastupdated>6/10/2012 2:03:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs">
            <summary>
            Holds information related to the <see cref="E:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValueChanged"/> event.
            </summary>
            <remarks>
            Use the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs.Buffers"/> collection to access the decomposed values retrieved from the
            <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValue"/> after the change.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:06:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs.MetadataChange">
            <summary>Gets a value representing a non-data change to an observed value.</summary>
            <value>A value representing a non-data change to an observed value.</value>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs.#ctor(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs"/> class.
            </summary>
            <param name="buffers">The set of buffers representing the data held by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValue"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffers"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="buffers"/> is empty.
                <para>- or -</para>
                <para><paramref name="buffers"/> is empty.</para>
            </exception>
            <lastupdated>6/10/2012 11:22:30 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs.ToString">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.ObservedValueChangedEventArgs.Buffers">
            <summary>
            Gets the set of buffers representing the data held by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValue"/>.
            </summary>
            <value>The set of buffers representing the data held by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.IValueObserver`1.ObservedValue"/>.</value>
            <lastupdated>6/10/2012 11:22:18 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments">
            <summary>
            Represents the assigned type arguments returned by <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GetAssignedTypeArguments(System.Type,System.Type)"/>.
            </summary>
            <remarks>
            Use the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Assignments"/> collection on <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments"/> to see the types used
            by <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType"/> to fill the generic type <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Arguments"/> of the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/>.
            <para>
            For example, if you used <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GetAssignedTypeArguments(System.Type,System.Type)"/> to compare the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> open generic interface with a concrete <c>Dictionary&lt;int,double&gt;</c> type,
            then <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/> would be <c>IDictionary&lt;TKey,TValue&gt;</c>, <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType"/> would be
            <c>Dictionary&lt;int,double&gt;</c>, <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.ClosedBaseType"/> would be <c>IDictionary&lt;int,double&gt;</c>,
            <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Arguments"/> would contain <c>TKey</c> and <c>TValue</c>, and <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Assignments"/> would contain
            <c>int</c> and <c>double</c>.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility.GetAssignedTypeArguments(System.Type,System.Type)"/>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:06:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 11:23:25 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType">
            <summary>
            Gets the type with the unassigned <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Arguments"/>.
            </summary>
            <value>The type with the unassigned <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Arguments"/>.</value>
            <lastupdated>6/10/2012 11:23:01 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.ClosedBaseType">
            <summary>
            Gets the closed generic type that is implemented by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType"/>,
            equal to the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/> with the unassigned <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Arguments"/> replaced by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Assignments"/>.
            </summary>
            <value>The closed generic type that is implemented by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType"/>.</value>
            <lastupdated>6/10/2012 11:23:11 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType">
            <summary>
            Gets the type that derives from or implements the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/>.
            </summary>
            <value>The type that derives from or implements the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/>.</value>
            <lastupdated>6/10/2012 11:23:19 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Arguments">
            <summary>
            Gets the original type arguments from the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/>.
            </summary>
            <value>The original type arguments from the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.BaseType"/>.</value>
            <lastupdated>6/10/2012 11:22:43 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.Assignments">
            <summary>
            Gets the assigned type arguments from the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.ClosedBaseType"/> implemented by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType"/>.
            </summary>
            <value>The assigned type arguments from the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.ClosedBaseType"/> implemented by the <see cref="P:NationalInstruments.DataInfrastructure.Descriptors.TypeArgumentAssignments.DerivedType"/>.</value>
            <lastupdated>6/10/2012 11:22:52 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1">
            <summary>
            Represents a raw reference to a block of data.
            </summary>
            <typeparam name="TData">The type of data contained in the store.</typeparam>
            <remarks>
            Represents the strongly-typed <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> used by <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> and
            <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>.
            <note type="note">
            When implementing a <see cref="T:NationalInstruments.DataInfrastructure.BufferPool"/> class, use the
            <see cref="M:NationalInstruments.DataInfrastructure.BufferPool.CreateBuffer``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0},NationalInstruments.DataInfrastructure.Unit)"/> and
            <see cref="M:NationalInstruments.DataInfrastructure.BufferPool.CreateWritableBuffer``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0},NationalInstruments.DataInfrastructure.Unit)"/> methods
            to create buffers with the buffer pool's custom <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> type.
            </note>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/11/2012 2:16:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore">
            <summary>
            Represents a raw reference to a block of data.
            </summary>
            <remarks>
            Provides base functionality for the strongly-typed <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/>
            used by <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> and <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/11/2012 2:16:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.GetVerifier">
            <summary>
            Gets a value used to track when a data store has been modified.
            </summary>
            <returns>The current verifier value.</returns>
            <remarks>
            The verifier is used to detect changes to a data store, to ensure
            an immutable <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> does not report modified data.
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Verify``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0}@,System.Int32)"/>
            <lastupdated>6/10/2012 2:24:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Dispose``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0}@,System.Int32)">
            <summary>
            Replaces the specified data store with a disposed data store.
            </summary>
            <typeparam name="TData">The data type of the raw data store.</typeparam>
            <param name="dataStore">
            The raw data store to dispose.
            <para>After the method returns, <paramref name="dataStore"/>  contains a disposed data store.</para>
            </param>
            <param name="expectedVerifier">The expected verifier value.</param>
            <lastupdated>6/10/2012 2:24:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Verify``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0}@,System.Int32)">
            <summary>
            Replaces the specified data store with a disposed data store, if the data store has been modified.
            </summary>
            <typeparam name="TData">The data type of the raw data store.</typeparam>
            <param name="dataStore">
            The raw data store to verify.
            After the method returns, if the verifier values do not match, <paramref name="dataStore"/> will contain a disposed data store.
            </param>
            <param name="expectedVerifier">The expected verifier value.</param>
            <returns><see langword="true"/> if the verifiers match; otherwise, <see langword="false"/> if a disposed data store was assigned to <paramref name="dataStore"/>.</returns>
            <lastupdated>6/10/2012 2:25:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Invalidate">
            <summary>
            Invalidates the verifier for the raw data store.
            </summary>
            <lastupdated>6/10/2012 2:25:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Equals(System.Object)">
            <inheritdoc/>
            <remarks>Enforces reference equality on data stores.</remarks>
            <lastupdated>6/10/2012 2:24:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.GetHashCode">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:24:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:25:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.GetInvalidationListenerCount">
            <exclude>[INTERNAL FOR TESTING]</exclude>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.DataType">
            <summary>
            Gets the data type of the raw data store.
            </summary>
            <value>The data type of the raw data store.</value>
            <lastupdated>6/11/2012 2:16:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Size">
            <summary>
            Gets the size of the raw data store.
            </summary>
            <value>The size of the raw data store.</value>
            <lastupdated>6/11/2012 2:16:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.IsWritable">
            <summary>
            Gets a value indicating whether the data store can be modified by a writable buffer.
            </summary>
            <value>
            A value indicating whether the data store can be modified by a writable buffer.
            The default value is <see langword="false"/>.
            </value>
            <lastupdated>2013-03-13 11:01:57 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.DebugInfo">
            <summary>
            Gets a string value containing debug information to show in the string representation of the parent buffer.
            </summary>
            <value>
            A string value containing debug information to show in the string representation of the parent buffer.
            The default value is <see langword="null"/>.
            </value>
            <lastupdated>2013-07-26 2:56:17 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> class with no dependencies.
            </summary>
            <lastupdated>6/10/2012 2:26:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.#ctor(NationalInstruments.DataInfrastructure.Primitives.RawDataStore[])">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> class with the specified dependencies.
            </summary>
            <param name="dependencies">
            The set of dependent data stores reference by this data store that should be monitored for invalidation.
            </param>
            <lastupdated>6/10/2012 2:26:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.#ctor(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Primitives.RawDataStore})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> class with the specified dependencies.
            </summary>
            <param name="dependencies">
            The set of dependent data stores reference by this data store that should be monitored for invalidation.
            </param>
            <lastupdated>6/10/2012 2:27:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.VerifiedRead(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0}@,System.Int32,System.Int32)">
            <summary>
            Verifies that the data store has not been modified, and then gets the data value at the specified location in the data store.
            </summary>
            <remarks>
            If <see cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.GetVerifier"/> does not return the value of <paramref name="expectedVerifier"/>,
            then <paramref name="dataStore"/> is disposed and an <see cref="T:System.ObjectDisposedException"/> is thrown.
            </remarks>
            <param name="dataStore">The data store to read from.</param>
            <param name="index">The location of the desired data value.</param>
            <param name="expectedVerifier">The expected verifier value for the data store.</param>
            <returns>The data value at <paramref name="index"/> in <paramref name="dataStore"/></returns>
            <exception cref="T:System.ObjectDisposedException">The data store has been disposed.</exception>
            <lastupdated>6/10/2012 2:30:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.AddReference">
            <summary>
            Notifies the data store that an object has added a reference to this instance.
            </summary>
            <lastupdated>6/10/2012 2:26:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.RemoveReference">
            <summary>
            Notifies the data store that an object has removed a reference to this instance.
            </summary>
            <lastupdated>6/10/2012 2:27:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Touch">
            <summary>
            Called to cause an <see cref="T:System.ObjectDisposedException"/> if the data store has been disposed.
            </summary>
            <lastupdated>6/10/2012 2:28:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Copy">
            <summary>
            Creates a new instance of the data store containing a copy of the same data values.
            </summary>
            <returns>A new instance of the data store containing a copy of the same data values.</returns>
            <lastupdated>6/10/2012 2:26:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.CopyTo(System.Int32,NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0},System.Int32,System.Int32)">
            <summary>
            Reads a range of elements from a raw data store starting at the specified source index
            and copies them to another raw data store starting at the specified destination index.
            </summary>
            <param name="sourceIndex">The index in the data store where copying begins.</param>
            <param name="destination">The data store that receives the data.</param>
            <param name="destinationIndex">The index in the destination data store at which storing begins.</param>
            <param name="length">The number of values to copy.</param>
            <lastupdated>6/10/2012 2:26:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.IndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
            <lastupdated>6/10/2012 2:26:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a data store referencing a subset of the values in the current data store.
            </summary>
            <remarks>
            If <paramref name="startIndex"/> is zero and <paramref name="length"/> is equal to <see cref="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Size"/>,
            then the current data store updated with <see cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.AddReference"/> is returned.
            <para>If <paramref name="length"/> is zero, then a new empty data store is returned.</para>
            <para>Otherwise, <see cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.SliceCore(System.Int32,System.Int32)"/> is used to retrieve the subset data store.</para>
            </remarks>
            <param name="startIndex">The index of the first sample take.</param>
            <param name="length">The number of samples to take from the data store.</param>
            <returns>A data store referencing a subset of the values in the current data store.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is less than zero.
                <para>- or -</para>
                <para><paramref name="length"/> is less than zero.</para>
                <para>- or -</para>
                <para>The range covered by <paramref name="startIndex"/> and <paramref name="length"/> is greater than <see cref="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Size"/>.</para>
            </exception>
            <lastupdated>6/10/2012 2:28:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.SliceCore(System.Int32,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Slice(System.Int32,System.Int32)"/>
            <summary>Implements the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Slice(System.Int32,System.Int32)"/> method.</summary>
            <lastupdated>6/10/2012 2:28:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.TryJoin(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0})">
            <summary>
            Returns a data store referencing all the values in the current and specified data stores.
            </summary>
            <remarks>
            Allows a data store to combine with another matching instance to return a single data store.
            Returning <see langword="null"/> will result in a join using the default mechanism.
            </remarks>
            <param name="other">The data store to append.</param>
            <returns>
            A data store referencing all the values in the current and specified data stores,
            or <see langword="null"/> to use the default join mechanism.
            </returns>
            <lastupdated>2015-03-02 1:40:11 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Transform``1(System.Func{`0,``0})">
            <summary>
            Gets a new data store containing the result of applying the specified transform function to every element in the current data store.
            </summary>
            <typeparam name="TResult">The data type of the result data store.</typeparam>
            <param name="transformer">The function to apply to the data in the current data store.</param>
            <returns>A new <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> containing the transformed data.</returns>
            <lastupdated>6/10/2012 2:28:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Transform``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Gets a new data store containing the result of applying the specified transform function to every element in the current data store.
            </summary>
            <typeparam name="TResult">The data type of the result data store.</typeparam>
            <param name="transformer">The function to apply to the indexed data in the current data store.</param>
            <returns>A new <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> containing the transformed data.</returns>
            <lastupdated>6/10/2012 2:28:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.TryTransform``1(NationalInstruments.DataInfrastructure.TryTransform{`0,``0},``0,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Gets a new data store containing the result of applying the specified transform function to every valid element in the current data store.
            </summary>
            <remarks>
            The <paramref name="transformer"/> is not invoked for values at indices contained in <paramref name="invalidSamples"/>.
            </remarks>
            <typeparam name="TResult">The data type of the result data store.</typeparam>
            <param name="transformer">The function to apply to the data in the current data store.</param>
            <param name="fallbackResult">The result value to use for invalid samples.</param>
            <param name="invalidSamples">
            The indices of known invalid samples currently in the data store.
            <para>When this method returns, also contains any additional invalid index values where <paramref name="transformer"/> returned <see langword="false"/>.</para>
            </param>
            <returns>A new <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> containing the transformed data.</returns>
            <lastupdated>6/10/2012 2:29:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.TryTransformInPlace(System.Func{`0,`0})">
            <summary>
            Applies the specified transform function to every element in the current data store.
            </summary>
            <param name="transformer">The function to apply to the data in the current data store.</param>
            <returns>
            If the data store does not support in-place transformation, a new data store containing the transformed data is returned.
            Otherwise, if in-place transformation is supported, the current data store is returned.
            </returns>
            <lastupdated>6/10/2012 2:29:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.TryTransformInPlace(System.Func{`0,System.Int32,`0})">
            <summary>
            Applies the specified transform function to every element in the current data store.
            </summary>
            <param name="transformer">The function to apply to the indexed data in the current data store.</param>
            <returns>
            If the data store does not support in-place transformation, a new data store containing the transformed data is returned.
            Otherwise, if in-place transformation is supported, the current data store is returned.
            </returns>
            <lastupdated>6/10/2012 2:29:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.GetUnderlyingArrayForIndexer">
            <summary>
            For data stores backed by a zero-based one-dimensional array,
            returns the underlying array for use by <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.TryGetArrayIndexer"/>.
            </summary>
            <returns>
            The zero-based one-dimensional array backing the data store, or <see langword="null"/>.
            The default value is <see langword="null"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.Item(System.Int32)">
            <summary>
            Gets or sets the data value at the specified location in the data store.
            </summary>
            <param name="index">The location of the desired data value.</param>
            <value>The data value at <paramref name="index"/>.</value>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="index"/> is less than zero or greater than the size of the data store.
            </exception>
            <lastupdated>6/10/2012 2:26:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.DataType">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:25:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.IsVolatile">
            <summary>
            Gets a value indicating whether the data store can be modified outside of the context of a writable buffer.
            </summary>
            <value>
            A value indicating whether the data store can be modified outside of the context of a writable buffer.
            The default value is <see langword="true"/>.
            </value>
            <lastupdated>6/10/2012 2:26:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.BufferPool">
            <summary>
            Gets the buffer pool from which the data store was allocated.
            </summary>
            <value>The buffer pool from which the data store was allocated, or <see langword="null"/>.</value>
            <lastupdated>6/10/2012 2:25:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.ArrayEqualityComparer`1">
            <summary>Element-based <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for arrays.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.BufferDebugView">
             <exclude/>
            
             <summary>
             Debugger proxy for <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>.
             </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.BufferDebugView.#ctor(NationalInstruments.DataInfrastructure.IBuffer)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Internal.BufferDebugView.Unit">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Internal.BufferDebugView.Traits">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Internal.BufferDebugView.Items">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.Indices.ScopeImpl">
            <exclude/><summary>Represents all of the indices in a scope, with no gaps.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.Indices.PatternImpl">
            <exclude/><summary>Represents index values with a repeating pattern.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.Indices.CalculatedScopeImpl">
            <exclude/><summary>Base class for implementations that lazily calculate covering scope and alternate count values.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.Indices.SortedRangesImpl">
            <exclude/><summary>Represents index values with contiguous ranges.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.Indices.SortedValuesImpl">
            <exclude/><summary>Represents all of the individual index values as a sorted list.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument">
            <summary>Represents a known type argument. Used as a key for caching previously resolved types.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument.Position">
            <summary>The position of the the argument in the candidate member's list of open type arguments.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument.Type">
            <summary>The type to use for the generic argument at <see cref="F:NationalInstruments.DataInfrastructure.Internal.KnownTypeArgument.Position"/>.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument">
            <summary>
            Represents an open generic type argument on a candidate member.
            </summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.TypeArgument">
            <summary>The open type argument.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.AttributeConstraints">
            <summary>The attribute constraints on the open type argument.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.DerivationConstraints">
            <summary>The derivation constraints on the open type argument.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.DescriptorTypeAssignments">
            <summary>The collection of data types implemented by a <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> argument.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.SatisfiesConstraints(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument},System.Type[])">
            <summary>Tests whether the specified type assignments satisfy the type argument constraints.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.SatisfiesAttributeConstraints(System.Type,System.Reflection.GenericParameterAttributes)">
            <summary>Tests whether a type satisfies the specified generic parameter constraints.</summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Internal.OpenTypeArgument.Position">
            <summary>The position of the open type argument.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.TraitStructuralComparer">
            <exclude/>
            <summary>Compares traits by nominal structure, with or without scope.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions">
            <exclude/>
            <summary>
            Includes additional guard validation members.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.NotEmpty(NationalInstruments.Restricted.Guard{NationalInstruments.DataInfrastructure.TraitScope})">
            <exclude/>
            <summary>
            Ensures the <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> variable is not the empty scope.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.IsRangeScope(NationalInstruments.Restricted.Guard{NationalInstruments.DataInfrastructure.TraitScope})">
            <exclude/>
            <summary>
            Ensures the <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> variable is a range scope.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.BufferTypesAndSizesMatch(NationalInstruments.Restricted.Guard{System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer}},System.Collections.Generic.IList{System.Type}[])">
            <exclude/>
            <summary>
            Ensures the number, size, and data types of buffers match at least one of the expected data type lists.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <param name="dataTypes">The set of buffer data types to match.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.CopyToValid(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude />
            <summary>
            Ensures the index values and sizes are sufficient to source and hold the specified number of elements.
            </summary>
            <param name="sourceIndex">The index in the source collection.</param>
            <param name="sourceSize">The size of the source collection.</param>
            <param name="destinationIndex">The index in the target collection.</param>
            <param name="destinationSize">The size of the target collection.</param>
            <param name="length">The number of elements to copy from source.</param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.IsModifiableNamedUnit(NationalInstruments.Restricted.Guard{NationalInstruments.DataInfrastructure.ScientificUnit},System.Boolean)">
            <exclude/>
            <summary>
            Ensures the named <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> variable can have its <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix"/> or <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power"/> modified.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <param name="modifyPrefix">Indicates whether the <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix"/> or the <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power"/> of the <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> is being modified.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.IsCombinableNamedUnit(NationalInstruments.Restricted.Guard{NationalInstruments.DataInfrastructure.ScientificUnit})">
            <exclude/>
            <summary>
            Ensures the named <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> variable can be combined with other units.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Internal.ValidationExtensions.IsNotDegreeCelsius(NationalInstruments.Restricted.Guard{NationalInstruments.DataInfrastructure.ScientificUnit},System.String)">
            <exclude/>
            <summary>
            Ensures the variable is not <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <param name="message">The message to show if the variable is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool">
            <summary>
            Represents a buffer pool that allocates memory to store all samples in a buffer.
            </summary>
            <remarks>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetBuffer``1(System.Collections.Generic.IEnumerable{``0},NationalInstruments.DataInfrastructure.Unit)"/> method to create a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
            copied from a collection of samples.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetWritableBuffer``1(System.Int32,NationalInstruments.DataInfrastructure.Unit)"/> method to create a <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>
            from the pool that can be initialized and turned into a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>.
            <note type="note">
            When you are finished with a buffer, call <see cref="M:System.IDisposable.Dispose"/> to return the buffer's resources to the pool.
            </note>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:13:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.BufferPool">
            <summary>
            Represents a shared pool that helps manage the lifetime of allocated buffers and reuse resources.
            </summary>
            <remarks>
                <para>
            The <see cref="F:NationalInstruments.DataInfrastructure.BufferPool.Default"/> buffer pool uses a shared pool of <see cref="T:System.Array"/> instances to create buffers.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetBuffer``1(System.Collections.Generic.IEnumerable{``0},NationalInstruments.DataInfrastructure.Unit)"/> method to create a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
            copied from a collection of samples.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetWritableBuffer``1(System.Int32,NationalInstruments.DataInfrastructure.Unit)"/> method to create a <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>
            from the pool that can be initialized and turned into a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>.
            </para>
                <note type="note">
            When implementing a <see cref="T:NationalInstruments.DataInfrastructure.BufferPool"/> class, use the <see cref="M:NationalInstruments.DataInfrastructure.BufferPool.CreateBuffer``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0},NationalInstruments.DataInfrastructure.Unit)"/> and
            <see cref="M:NationalInstruments.DataInfrastructure.BufferPool.CreateWritableBuffer``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0},NationalInstruments.DataInfrastructure.Unit)"/> methods to create buffers with the buffer pool's custom
            <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> type.
            </note>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:18:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.BufferPool.Default">
            <summary>Gets a default instance of a general-purpose <see cref="T:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool"/> for creating new buffers.</summary>
            <lastupdated>6/7/2012 4:55:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.BufferPool.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.BufferPool"/> class.</summary>
            <lastupdated>6/7/2012 4:55:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.BufferPool.GetEmptyBuffer``1">
            <summary>
            Retrieves a buffer of the specified data type containing no elements.
            </summary>
            <typeparam name="TData">The data type of the buffer.</typeparam>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Size"/> of zero
            and a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Unit"/> of <see cref="P:NationalInstruments.DataInfrastructure.Unit.None"/>.
            </returns>
            <lastupdated>6/7/2012 4:57:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.BufferPool.Join``1(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Buffer{``0}},NationalInstruments.DataInfrastructure.Unit)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.BufferPool.Join``1(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Buffer{``0}},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})"/>
            <lastupdated>6/7/2012 4:57:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.BufferPool.Join``1(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Buffer{``0}},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Combines the data from all of the given buffers in sequence.
            </summary>
            <typeparam name="TData">The data type of the buffers.</typeparam>
            <param name="buffers">The buffers to join.</param>
            <param name="unit">The unit for the combined buffer.</param>
            <param name="traitFilter">A function filter each source trait, or <see langword="null"/> to accept all traits.</param>
            <returns>A buffer containing all of the data from each buffer, in order.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffers"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="buffers"/> contains a <see langword="null"/> element.
            </exception>
            <lastupdated>6/7/2012 4:57:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.BufferPool.CreateBuffer``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0},NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Creates a new buffer with the specified data store and unit.
            </summary>
            <typeparam name="TData">The data type of the buffer.</typeparam>
            <param name="dataStore">The underlying data store for the buffer.</param>
            <param name="unit">The unit of the buffer.</param>
            <returns>A new <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> instance backed by <paramref name="dataStore"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dataStore"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/7/2012 4:56:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.BufferPool.CreateWritableBuffer``1(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{``0},NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Creates a new writable buffer with the specified data store and unit.
            </summary>
            <typeparam name="TData">The data type of the buffer.</typeparam>
            <param name="dataStore">The underlying data store for the buffer.</param>
            <param name="unit">The unit of the buffer.</param>
            <returns>A new <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/> instance backed by <paramref name="dataStore"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="dataStore"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/7/2012 4:56:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool"/> class.</summary>
            <lastupdated>6/10/2012 2:15:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetBuffer``1(System.Collections.Generic.IEnumerable{``0},NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Retrieves a buffer containing the specified set of samples.
            </summary>
            <typeparam name="TData">The data type of the samples.</typeparam>
            <param name="samples">The collection of samples to store in the buffer.</param>
            <param name="unit">The unit of measure of the data samples.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing <paramref name="samples"/> and a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Unit"/> of <paramref name="unit"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/10/2012 2:15:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetWritableBuffer``1(System.Int32,NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Retrieves a writable buffer of the specified size.
            </summary>
            <typeparam name="TData">The data type of the buffer.</typeparam>
            <param name="size">The size of the buffer.</param>
            <param name="unit">The unit of measure of the buffer's samples.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Size"/> of <paramref name="size"/>
            and a <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Unit"/> of <paramref name="unit"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="unit"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="size"/> is less than zero.
            </exception>
            <lastupdated>6/10/2012 2:16:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStore``1(System.Int32)">
            <summary>
            Returns a raw data store of the specified size, and with an <see cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.AddReference"/> count of one.
            </summary>
            <typeparam name="TData">The data type of the raw data store.</typeparam>
            <param name="size">The size of the raw data store.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.Primitives.RawDataStore.Size"/> of <paramref name="size"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="size"/> is less than zero.
            </exception>
            <lastupdated>6/10/2012 2:16:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStore``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a raw data store containing the specified samples, and with an <see cref="M:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1.AddReference"/> count of one.
            </summary>
            <typeparam name="TData">The data type of the samples.</typeparam>
            <param name="samples">The collection of raw data samples to store.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Primitives.RawDataStore`1"/> containing <paramref name="samples"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/10/2012 2:16:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStoreCore``1(System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStore``1(System.Int32)"/>
            <summary>Implements the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStore``1(System.Int32)"/> method.</summary>
            <lastupdated>6/10/2012 2:16:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStoreCore``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStore``1(System.Collections.Generic.IEnumerable{``0})"/>
            <summary>Implements the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetRawDataStore``1(System.Collections.Generic.IEnumerable{``0})"/> method.</summary>
            <lastupdated>6/10/2012 2:16:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.AnalogWaveform`1"/>.</summary>
            <typeparam name="TData">The data type of the waveform.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.AnalogWaveform`1"/> data type.</remarks>
            <lastupdated>6/10/2012 2:36:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1.GetDimensionDataTypes(NationalInstruments.AnalogWaveform{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1.Decompose(NationalInstruments.AnalogWaveform{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1.GetValueObserver(NationalInstruments.AnalogWaveform{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.AnalogWaveformDescriptor`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.Array1DDescriptor`1">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for a one-dimensional array of TData.</summary>
            <typeparam name="TData">The element type of the array.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for one-dimensional arrays.</remarks>
            <lastupdated>6/10/2012 2:36:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array1DDescriptor`1.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array1DDescriptor`1.GetDimensionDataTypes(`0[],NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array1DDescriptor`1.Decompose(`0[],NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array1DDescriptor`1.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array1DDescriptor`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.Array2DDescriptor`1">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for a one-dimensional array of TData.</summary>
            <typeparam name="TData">The element type of the array.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for two-dimensional arrays.</remarks>
            <lastupdated>6/10/2012 2:37:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array2DDescriptor`1.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array2DDescriptor`1.GetDimensionDataTypes(`0[0:,0:],NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array2DDescriptor`1.Decompose(`0[0:,0:],NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array2DDescriptor`1.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Array2DDescriptor`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool">
            <summary>
            Represents a buffer pool that uses .NET arrays as the backing store for buffers.
            </summary>
            <remarks>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetBuffer``1(System.Collections.Generic.IEnumerable{``0},NationalInstruments.DataInfrastructure.Unit)"/> method to create a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
            copied from a collection of samples.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.AllocatingBufferPool.GetWritableBuffer``1(System.Int32,NationalInstruments.DataInfrastructure.Unit)"/> method to create a <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>
            from the pool that can be initialized and turned into a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>.
            <note type="note">
            When you are finished with a buffer, call <see cref="M:System.IDisposable.Dispose"/> to return the buffer's resources to the pool.
            </note>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:14:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool"/> class.</summary>
            <lastupdated>6/10/2012 2:16:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool.GetRawDataStoreCore``1(System.Int32)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:17:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool.GetRawDataStoreCore``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:17:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool.ArrayDataStoreCache.Token">
            <summary>Holds a weak reference to a data store, and the number of buffers referencing that data store.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool.ArrayDataStoreCache.CacheEntry">
            <summary>
            Represents an entry for a token in the cache of unused data stores,
            or a search element when looking for data stores of a specific size in the cache.
            </summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ArrayBufferPool.ArrayDataStoreCache.CacheEntryComparer">
            <summary>Orders cache entries by size.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Boolean"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Boolean"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Compare(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.IsDefined(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.IsInfinite(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.ToString(System.Boolean,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.ToString(System.Boolean,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.GetLargestIntegralDigitPosition(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.GetLargestFractionalDigitPosition(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.ShiftLeft(System.Boolean,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.ShiftRight(System.Boolean,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Not(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.And(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Or(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Xor(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Add(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Subtract(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Difference(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Multiply(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Multiply(System.Boolean,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryMultiply(System.Boolean,System.Double,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Divide(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Remainder(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Ratio(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Boolean,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.String,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpLosslessConversion{System#Boolean@System#Boolean}#Convert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Boolean,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpLosslessConversion{System#Boolean@System#Double}#Convert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Boolean,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Double,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpLosslessConversion{System#Boolean@System#Single}#Convert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Boolean,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Single,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpLosslessConversion{System#Boolean@System#SByte}#Convert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Boolean,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.SByte,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpLosslessConversion{System#Boolean@System#Byte}#Convert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Boolean,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.TryConvert(System.Byte,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.BooleanDescriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Byte"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Byte"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Compare(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.IsDefined(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.IsInfinite(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.ToString(System.Byte,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.ToString(System.Byte,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.GetLargestIntegralDigitPosition(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.GetLargestFractionalDigitPosition(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.ShiftLeft(System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.ShiftRight(System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Not(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.And(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Or(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Xor(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Add(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Subtract(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Difference(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Multiply(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Multiply(System.Byte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryMultiply(System.Byte,System.Double,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Divide(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Remainder(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Ratio(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Logarithm(System.Double,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.String,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Double,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Single,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.SByte,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.UInt16,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.UInt32,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.Byte,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.TryConvert(System.UInt64,System.Byte@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ByteDescriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.CommonDescriptorOperations.GetPrimitiveByteSize(System.Type)">
            <summary>Returns the size of the specified data type, or zero if the data type is not a primitive type.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.ComplexDouble"/>.</summary>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.ComplexDouble"/> data type.</remarks>
            <lastupdated>2013-06-07 2:07:19 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.GetDefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.GetDimensionDataTypes(NationalInstruments.ComplexDouble,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.DecomposeValues(NationalInstruments.DataInfrastructure.Buffer{NationalInstruments.ComplexDouble},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.ComposeValues(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Compare(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.IsDefined(NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.IsInfinite(NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.ToString(NationalInstruments.ComplexDouble,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.TryParse(System.String,System.String,System.IFormatProvider,NationalInstruments.ComplexDouble@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Add(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Subtract(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Difference(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.TryConvert(NationalInstruments.ComplexDouble,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.TryConvert(System.String,NationalInstruments.ComplexDouble@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Convert(NationalInstruments.ComplexDouble)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.TryConvert(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.TryConvert(NationalInstruments.ComplexDouble,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.TryConvert(System.Double,NationalInstruments.ComplexDouble@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexDoubleDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.ComplexInt16"/>.</summary>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.ComplexInt16"/> data type.</remarks>
            <lastupdated>2013-06-07 2:07:19 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.GetDefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.GetDimensionDataTypes(NationalInstruments.ComplexInt16,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.DecomposeValues(NationalInstruments.DataInfrastructure.Buffer{NationalInstruments.ComplexInt16},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.ComposeValues(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Compare(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.IsDefined(NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.IsInfinite(NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.ToString(NationalInstruments.ComplexInt16,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryParse(System.String,System.String,System.IFormatProvider,NationalInstruments.ComplexInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Add(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Subtract(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Difference(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(NationalInstruments.ComplexInt16,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(System.String,NationalInstruments.ComplexInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Convert(NationalInstruments.ComplexInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(NationalInstruments.ComplexInt16,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(System.Double,NationalInstruments.ComplexInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(NationalInstruments.ComplexInt16,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.TryConvert(System.Int16,NationalInstruments.ComplexInt16@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexInt16Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.ComplexSingle"/>.</summary>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.ComplexSingle"/> data type.</remarks>
            <lastupdated>2013-06-07 2:07:19 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.GetDefaultValue">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.GetDimensionDataTypes(NationalInstruments.ComplexSingle,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.DecomposeValues(NationalInstruments.DataInfrastructure.Buffer{NationalInstruments.ComplexSingle},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:37:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.ComposeValues(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Compare(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.IsDefined(NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.IsInfinite(NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.ToString(NationalInstruments.ComplexSingle,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryParse(System.String,System.String,System.IFormatProvider,NationalInstruments.ComplexSingle@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Add(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Subtract(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Difference(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(NationalInstruments.ComplexSingle,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(System.String,NationalInstruments.ComplexSingle@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Convert(NationalInstruments.ComplexSingle)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(NationalInstruments.ComplexSingle,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(System.Double,NationalInstruments.ComplexSingle@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(NationalInstruments.ComplexSingle,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.TryConvert(System.Single,NationalInstruments.ComplexSingle@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ComplexSingleDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.ComplexWaveform`1"/>.</summary>
            <typeparam name="TData">The data type of the waveform.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.ComplexWaveform`1"/> data type.</remarks>
            <lastupdated>6/10/2012 2:38:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1.GetDimensionDataTypes(NationalInstruments.ComplexWaveform{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1.Decompose(NationalInstruments.ComplexWaveform{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:38:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1.GetValueObserver(NationalInstruments.ComplexWaveform{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ComplexWaveformDescriptor`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1">
            <summary>
            Represents a combined version of two existing <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> objects
            that each partially support conversion from one unit to another.
            </summary>
            <typeparam name="TData">The conversion data type.</typeparam>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1"/> class to combine two one-way <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/>
            instances into a single two-way converter.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:14:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.IUnitConverter`1">
            <summary>
            Represents a numeric value converter between two different units.
            </summary>
            <typeparam name="TData">The conversion data type.</typeparam>
            <remarks>
            Use the <seealso cref="M:NationalInstruments.DataInfrastructure.Unit.GetConverter``1(NationalInstruments.DataInfrastructure.Unit)"/> methods on <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> to retrieve an
            <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> instance.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> method to convert values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit into values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/> method to convert values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit into values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.
            <para>
            If <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/> returns <see langword="false"/>, <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> is not supported
            and will always return <see langword="false"/>.
            If <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvertBack"/> returns <see langword="false"/>, <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/> is not supported
            and will always return <see langword="false"/>.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Unit.GetConverter``1(NationalInstruments.DataInfrastructure.Unit)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Unit.CanConvert``1(NationalInstruments.DataInfrastructure.Unit)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Unit.TryConvert``1(NationalInstruments.DataInfrastructure.Unit,``0,``0@)"/>
            <lastupdated>6/11/2012 2:05:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)">
            <summary>
            Converts a value of the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit to a value of the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">
            When this method returns, contains the equivalent of <paramref name="value"/> in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit, if the conversion succeeded.
            </param>
            <returns><see langword="true"/> if <paramref name="value"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/>
            <lastupdated>6/9/2012 10:37:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)">
            <summary>
            Converts a value of the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit to a value of the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">
            When this method returns, contains the equivalent of <paramref name="value"/> in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit, if the conversion succeeded.
            </param>
            <returns><see langword="true"/> if <paramref name="value"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
            <seealso cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvertBack"/>
            <lastupdated>6/9/2012 10:38:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From">
            <summary>
            Gets the source unit this converter can convert from.
            </summary>
            <value>The source unit this converter can convert from.</value>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/>
            <lastupdated>6/9/2012 10:36:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To">
            <summary>
            Gets the target unit this converter can convert to.
            </summary>
            <value>The target unit this converter can convert to.</value>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/>
            <lastupdated>6/9/2012 10:36:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert">
            <summary>
            Gets a value indicating whether the converter can convert a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit to a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit.
            </summary>
            <value>A value indicating whether the converter can convert a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit to a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit.</value>
            <remarks>
            This will return <see langword="false"/> if the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit and <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit are unrelated (e.g., "meters" and "volts")
            or if the data type does not support the appropriate math operations (e.g., "string").
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/>
            <lastupdated>6/9/2012 10:36:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvertBack">
            <summary>
            Gets a value indicating whether the converter can convert a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit back to a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.
            </summary>
            <value>A value indicating whether the converter can convert a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit back to a value in the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.</value>
            <remarks>
            This will return <see langword="false"/> if the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit and <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit are unrelated (e.g., "meters" and "volts")
            or if the data type does not support the appropriate math operations (e.g., "string").
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/>
            <lastupdated>6/9/2012 10:36:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.#ctor(NationalInstruments.DataInfrastructure.IUnitConverter{`0},NationalInstruments.DataInfrastructure.IUnitConverter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1"/> class.
            </summary>
            <param name="fromConverter">An <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> supporting conversion from one unit to another.</param>
            <param name="toConverter">An <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> supporting conversion back from one unit to another.</param>
            <remarks>
            Uses the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/> and <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> methods of each converter for the
            convert and convert back members, respectively.  See individual members for details.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="fromConverter"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="toConverter"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>The <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit of <paramref name="fromConverter"/> is not equal to the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit of <paramref name="toConverter"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit of <paramref name="fromConverter"/> is not equal to the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit of <paramref name="toConverter"/>.</para>
            </exception>
            <lastupdated>6/10/2012 2:18:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.TryConvert(`0,`0@)">
            <inheritdoc/>
            <remarks>Uses <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> on the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.FromConverter"/>.</remarks>
            <lastupdated>6/10/2012 2:18:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.TryConvertBack(`0,`0@)">
            <inheritdoc/>
            <remarks>Uses <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> on the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.ToConverter"/>.</remarks>
            <lastupdated>6/10/2012 2:18:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:18:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.FromConverter">
            <summary>
            Returns the converter supporting conversion from the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.From"/> unit to the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.To"/> unit.
            </summary>
            <value>The converter supporting conversion from the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.From"/> unit to the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.To"/> unit.</value>
            <lastupdated>6/10/2012 2:17:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.ToConverter">
            <summary>
            Returns the converter supporting conversion from the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.To"/> unit to the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.From"/> unit.
            </summary>
            <value>The converter supporting conversion from the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.To"/> unit to the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.From"/> unit.</value>
            <lastupdated>6/10/2012 2:17:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.From">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:17:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.To">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:17:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.CanConvert">
            <inheritdoc/>
            <remarks>Returns the value of <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/> from the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.FromConverter"/>.</remarks>
            <lastupdated>6/10/2012 2:17:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.CanConvertBack">
            <inheritdoc/>
            <remarks>Returns the value of <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/> from the <see cref="P:NationalInstruments.DataInfrastructure.Primitives.CompositeUnitConverter`1.ToConverter"/>.</remarks>
            <lastupdated>6/10/2012 2:17:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/>.</summary>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> data type.</remarks>
            <lastupdated>6/10/2012 2:47:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.Convert(NationalInstruments.DataInfrastructure.DigitalSample)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.TryConvert(NationalInstruments.DataInfrastructure.DigitalSample,NationalInstruments.DataInfrastructure.DigitalSample@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.Convert(NationalInstruments.DigitalState)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.TryConvert(NationalInstruments.DigitalState,NationalInstruments.DataInfrastructure.DigitalSample@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.TryConvert(NationalInstruments.DataInfrastructure.DigitalSample,NationalInstruments.DigitalState@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.TryConvert(NationalInstruments.DataInfrastructure.DigitalSample,System.String@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalSampleDescriptor.TryConvert(System.String,NationalInstruments.DataInfrastructure.DigitalSample@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.DigitalWaveform"/>.</summary>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.DigitalWaveform"/> data type.</remarks>
            <lastupdated>6/10/2012 2:36:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor.GetDimensionDataTypes(NationalInstruments.DigitalWaveform,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor.Decompose(NationalInstruments.DigitalWaveform,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor.GetValueObserver(NationalInstruments.DigitalWaveform,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DigitalWaveformDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Double"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Double"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Compare(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.IsDefined(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.IsInfinite(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.ToString(System.Double,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.GetLargestIntegralDigitPosition(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.GetLargestFractionalDigitPosition(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Negate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Sign(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.AbsoluteValue(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Ceiling(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Floor(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Round(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Round(System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Truncate(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Add(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Subtract(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Difference(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Multiply(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.TryMultiply(System.Double,System.Double,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Divide(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Remainder(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Ratio(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Logarithm(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.TryConvert(System.Double,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.TryConvert(System.String,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.TryConvert(System.Double,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Infinity">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.MaximumRoundDigits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.DoubleDescriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.EnumerableDescriptor`2">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for enumerable collections.</summary>
            <typeparam name="TEnumerable">The type of enumerable collection.</typeparam>
            <typeparam name="TData">The type of data in the enumerable.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for enumerable collections.</remarks>
            <lastupdated>6/10/2012 2:39:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.EnumerableDescriptor`2.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.EnumerableDescriptor`2.GetDimensionDataTypes(`0,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.EnumerableDescriptor`2.Decompose(`0,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.EnumerableDescriptor`2.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.EnumerableDescriptor`2.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:39:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory">
            <summary>The trait factory for <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/>.</summary>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory"/> to generate <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/> instances.
            This can be done implicitly using the <see cref="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitQueryOptions)"/> method with a
            <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> configured with a <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType"/> of <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/>
            and a <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/> value of <see langword="true"/>.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/11/2012 2:14:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory">
            <summary>
            Represents a type that can generate traits automatically, based on the values in a buffer.
            </summary>
            <remarks>
            A trait factory, as identified by the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute"/> on a <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> type,
            enables <see cref="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitQueryOptions)"/> to construct trait instances automatically
            when <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/> is set.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/10/2012 2:31:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> type.
            </summary>
            <lastupdated>6/10/2012 2:33:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Create``1(NationalInstruments.DataInfrastructure.Buffer{``0})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Create``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IList{System.Int32})"/>
            <summary>Creates traits for all samples in the buffer.</summary>
            <lastupdated>6/10/2012 2:32:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Create``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates traits for the specified set of samples in the buffer.
            </summary>
            <typeparam name="TData">The type of data in the buffer.</typeparam>
            <param name="buffer">The buffer to create the traits from.</param>
            <param name="scope">The set of samples to create the traits for.</param>
            <param name="invalidSamples">The indices of known invalid samples in the buffer.</param>
            <returns>
            The set of traits calculated for the samples in <paramref name="buffer"/> covered by <paramref name="scope"/>,
            or an empty collection if no traits were created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="invalidSamples"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is not a sample or range scope.
            </exception>
            <lastupdated>6/10/2012 2:32:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.CreateCore``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IList{System.Int32})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Create``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IList{System.Int32})"/>
            <summary>Implements the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Create``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IList{System.Int32})"/> method.</summary>
            <lastupdated>6/10/2012 2:33:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Aggregate``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.Trait[])">
            <summary>
            Combines all of the data in the specified traits into a new trait.
            </summary>
            <remarks>
            The collection of traits should be contiguous.
            </remarks>
            <typeparam name="TData">The type of data in the buffer.</typeparam>
            <param name="buffer">The buffer to aggregate the traits for.</param>
            <param name="traits">The collection of contiguous traits to aggregate.</param>
            <returns>
            A single trait representing the data contained in each of the input <paramref name="traits"/>,
            or <see langword="null"/> if <paramref name="traits"/> could not be aggregated.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="traits"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/10/2012 2:32:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Aggregate``1(NationalInstruments.DataInfrastructure.Buffer{``0},System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Aggregate``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.Trait[])"/>
            <lastupdated>6/10/2012 2:32:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.AggregateCore``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.Trait[])">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Aggregate``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.Trait[])"/>
            <summary>Implements the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.Aggregate``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.Trait[])"/> method.</summary>
            <lastupdated>6/10/2012 2:32:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TraitFactory.TraitType">
            <summary>
            Gets the type of trait the factory can construct.
            </summary>
            <value>The type of trait the factory can construct.</value>
            <lastupdated>6/11/2012 2:18:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory"/>.
            </summary>
            <lastupdated>6/10/2012 2:19:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:19:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory.CreateCore``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IList{System.Int32})">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:19:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory.AggregateCore``1(NationalInstruments.DataInfrastructure.Buffer{``0},NationalInstruments.DataInfrastructure.Trait[])">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:19:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ExtremeSamplesTraitFactory.TraitType">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:18:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1">
            <summary>
            Represents an <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> for converting from a unit to itself.
            </summary>
            <typeparam name="TData">The conversion data type.</typeparam>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1"/> class to represent conversion for a single unit.
            <para>
                    <see cref="P:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.CanConvert"/>, <see cref="P:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.CanConvertBack"/>, <see cref="M:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.TryConvert(`0,`0@)"/>, and <see cref="M:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.TryConvertBack(`0,`0@)"/>
            all return <see langword="true"/> and set the result to the input value.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:14:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.#ctor(NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1"/> class.
            </summary>
            <param name="unit">A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="unit"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/10/2012 2:19:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.TryConvert(`0,`0@)">
            <inheritdoc/>
            <remarks>Assigns <paramref name="result"/> to <paramref name="value"/> and returns <see langword="true"/>.</remarks>
            <lastupdated>6/10/2012 2:20:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.TryConvertBack(`0,`0@)">
            <inheritdoc/>
            <remarks>Assigns <paramref name="result"/> to <paramref name="value"/> and returns <see langword="true"/>.</remarks>
            <lastupdated>6/10/2012 2:20:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:19:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.From">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:19:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.To">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:19:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.CanConvert">
            <inheritdoc/>
            <remarks>Returns <see langword="true"/>.</remarks>
            <lastupdated>6/10/2012 2:19:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IdentityUnitConverter`1.CanConvertBack">
            <inheritdoc/>
            <remarks>Returns <see langword="true"/>.</remarks>
            <lastupdated>6/10/2012 2:19:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet">
            <summary>Represents an immutable ordered set of index values.</summary>
            <seealso cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/>
            <seealso cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Primitives.IndexSet.All">
            <summary>Gets a value indicating the collection of all indices.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Empty">
            <summary>Gets a value indicating the collection of no indices.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Create(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Returns an index set for the specified range of indices.
            </summary>
            <param name="indices">The indices to cover.</param>
            <returns>A set containing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Create(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.TraitScope})">
            <summary>
            Returns an index set for the specified ranges of index values.
            </summary>
            <param name="indices">The indices to cover.</param>
            <returns>A set containing <paramref name="indices"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="indices"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Create(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns an index set for the specified index values.
            </summary>
            <param name="indices">The index values to include.</param>
            <returns>A set containing <paramref name="indices"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="indices"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Contains(System.Int32)">
            <summary>
            Determines whether the specified index value is contained in the set.
            </summary>
            <param name="index">The index value to test.</param>
            <returns><see langword="true"/> if <paramref name="index"/> is in the set.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.InScope(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Gets an index set containing all the index values in the current set that fall within the specified scope.
            </summary>
            <param name="scope">The target scope.</param>
            <returns>A set containing all the index values in both the current set and <paramref name="scope"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.ToScope(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <summary>
            Gets an index set containing all the offset index values in the current set that fall within the specified scope.
            </summary>
            <param name="scope">The target scope.</param>
            <param name="offset">The amount to shift <see cref="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Scope"/> by before intersecting with <paramref name="scope"/>.</param>
            <returns>A set containing all the offset index values that fall within <paramref name="scope"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Union(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Primitives.IndexSet})">
            <summary>
            Gets an index set containing all of the index values in the specified sets.
            </summary>
            <param name="sets">The sets to combine.</param>
            <returns>A set containing all of the index values in <paramref name="sets"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sets"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sets"/> contains a <see langword="null"/> element.</exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.ToList">
            <summary>
            Creates a list containing all of the index values in the set.
            </summary>
            <returns>A mutable list containing all of the index values in the set.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.#ctor(NationalInstruments.DataInfrastructure.Internal.Indices)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> class with the specified indices.
            </summary>
            <param name="indices">
            The indices backing the set.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Equals(NationalInstruments.DataInfrastructure.Primitives.IndexSet)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.op_Equality(NationalInstruments.DataInfrastructure.Primitives.IndexSet,NationalInstruments.DataInfrastructure.Primitives.IndexSet)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> object or <see langword="null"/>.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> object or <see langword="null"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.op_Inequality(NationalInstruments.DataInfrastructure.Primitives.IndexSet,NationalInstruments.DataInfrastructure.Primitives.IndexSet)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> object or <see langword="null"/>.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndexSet"/> object or <see langword="null"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndexSet.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Scope">
            <summary>Gets the exact scope covered by the index values in the set.</summary>
            <value>The exact scope covered by the index values in the set.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.IsEmpty">
            <summary>Gets a value indicating whether the set is empty.</summary>
            <value>A value indicating whether the set is empty.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.ValueCount">
            <summary>Gets the number of index values in the set.</summary>
            <value>The number of index values in the set.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.RangeCount">
            <summary>Gets the number of contiguous index ranges in the set.</summary>
            <value>The number of contiguous index ranges in the set.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Indices">
            <summary>
            Gets the indices backing the set.
            </summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Values">
            <summary>Gets the ordered collection of index values in the set.</summary><value>The ordered collection of index values in the set.</value><lastupdated>2015-02-09 9:16:16 AM</lastupdated><updatedby>Paul Hansen</updatedby><approved>False</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.IndexSet.Ranges">
            <summary>Gets the collection of contiguous index ranges in the set.</summary><value>The collection of contiguous index ranges in the set.</value><lastupdated>2015-02-09 9:16:16 AM</lastupdated><updatedby>Paul Hansen</updatedby><approved>False</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait">
            <summary>
            Represents a trait that works with sets of indices in a buffer.
            </summary>
            <remarks>
            Derive from <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait"/> to associate metadata with a set of samples in a range.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/11/2012 2:15:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Trait">
            <summary>
            Represents an immutable piece of metadata associated with a buffer.
            </summary>
            <remarks>
            A trait indicates which samples it applies to through a <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> instance.
            Traits can be applied to a buffer, to the data stream a buffer is a part of, or to a particular range of samples in a buffer.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/7/2012 5:44:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:49:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.Slice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean)">
            <summary>
            Slices the trait to the specified scope, shifted by an offset.
            </summary>
            <param name="scope">The target container scope, relative to the current <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of the trait.</param>
            <param name="offset">The amount to shift <paramref name="scope"/> by to create the final trait scope.</param>
            <param name="preserveGlobalTraits">Indicates if traits with stream or buffer scope should be preserved or sliced.</param>
            <returns>
            An instance of the current trait contained within <paramref name="scope"/> shifted by <paramref name="offset"/>,
            or <see langword="null"/> if the trait could not be shifted.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is not a range scope.
            </exception>
            <example>
            Consider a simple "CharacterTrait" that associates a <see cref="T:System.Char"/> with a <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/>,
            and a buffer with four samples and the following traits:
            <pre>[Stream] 'A', [Buffer] 'B', [0] 'C', [1] 'D', [2] 'E', [3] 'F', [0-1] 'G', [0-2] 'H', [0-3] 'I', [1-2] 'J', [1-3] 'K', [2-3] 'L'</pre>
                <para>
            Calling <see cref="M:NationalInstruments.DataInfrastructure.Trait.Slice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean)"/> on each trait with the scope <c>[1-2]</c> and offset <c>10</c> (creating a final scope of [1-2] + 10 = [11-12]) produces the following results:
            </para>
                <para><image src="TraitSliceMethod.png"/></para>
            </example>
            <lastupdated>6/11/2012 1:36:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Trait.Slice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean)"/>
            <summary>Implements the <see cref="M:NationalInstruments.DataInfrastructure.Trait.Slice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean)"/> method for overlapping scopes.</summary>
            <param name="newScope">The new scope for the target trait.</param>
            <param name="offset">The offset value used to create <paramref name="newScope"/>.</param>
            <lastupdated>6/7/2012 5:49:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.HasSameStructure(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether the trait has the same type and scope structure as another trait.
            </summary>
            <param name="other">The trait to compare.</param>
            <returns><see langword="true"/> if the traits share the same type and scope; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/7/2012 5:44:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.HasSameStructure(NationalInstruments.DataInfrastructure.Trait,System.Boolean)">
            <summary>
            Determines whether the trait has the same type and scope structure as another trait.
            </summary>
            <param name="other">The trait to compare.</param>
            <param name="includeScope">Indicates whether <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> should be included in the structure test.</param>
            <returns><see langword="true"/> if the traits share the same type, and the same scope for <paramref name="includeScope"/>; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/7/2012 5:45:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.HasSameLocalStructure(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether the trait has the same local structure as another trait, as defined by the derived trait type.
            </summary>
            <param name="other">The trait to compare.</param>
            <returns><see langword="true"/> if the traits share the same local structure; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/7/2012 5:44:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether local members defined on the derived trait are equal.
            </summary>
            <param name="other">A trait of the same type to compare against.</param>
            <returns><see langword="true"/> if all local properties defined on the trait are equal; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/7/2012 5:45:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.GetLocalHashCode">
            <summary>
            Gets a hash code based on the local members defined on derived trait.
            </summary>
            <returns>A hash code for the current trait.</returns>
            <lastupdated>6/7/2012 5:44:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.EqualIgnoringStructure(NationalInstruments.DataInfrastructure.Trait)">
            <exclude/>
            <summary>Used to compare traits whose structure is already known to be the same.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.TrySlice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean,NationalInstruments.DataInfrastructure.Trait@)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.#ctor(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> class with the specified scope.</summary><param name="scope">The range of samples the trait applies to.</param><lastupdated>6/7/2012 5:50:15 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.Equals(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.op_Equality(NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> object or <see langword="null"/>.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> object or <see langword="null"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.op_Inequality(NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> object or <see langword="null"/>.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> object or <see langword="null"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Trait.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Trait.NominalStructure">
            <exclude/>
            <summary>Gets type+local structure for a trait, not including scope.</summary>
            <remarks>
            Used to simplify grouping of traits with the same structure, to avoid unnecessary comparisons.
            <see cref="M:NationalInstruments.DataInfrastructure.Trait.HasSameStructure(NationalInstruments.DataInfrastructure.Trait,System.Boolean)"/> must still be called for all traits with the same nominal structure,
            as nominal structure cannot include structural elements in custom traits.
            </remarks>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Trait.Scope">
            <summary>Gets the range of samples the trait applies to.</summary><value>The range of samples the trait applies to.</value><lastupdated>6/7/2012 5:50:09 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait"/> class with the specified scope.
            </summary>
            <param name="scope">The range of samples the trait applies to.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is empty.
                <para>- or -</para>
                <para><paramref name="scope"/> is not a range scope.</para>
            </exception>
            <lastupdated>6/10/2012 2:21:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.ValidateIndexSet(NationalInstruments.DataInfrastructure.TraitScope,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Verifies that all indices fall within the specified scope.
            </summary>
            <param name="scope">The scope covered by the trait.</param>
            <param name="indicesName">The name of the indices parameter.</param>
            <param name="indices">The collection of indices to validate.</param>
            <returns>A sorted set of unique index values.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="indices"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="indices"/> contains a value that is not within the range of <paramref name="scope"/>.
            </exception>
            <lastupdated>6/10/2012 2:21:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.AllIndicesInScope">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.ValidateIndices(NationalInstruments.DataInfrastructure.TraitScope,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.UpdateHashCode(System.Int32[],System.Int32@)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.GetIndices(NationalInstruments.DataInfrastructure.TraitScope,System.Int32[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.IndicesTrait.RetargetIndices(System.Int32[]@,NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Int16"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Int16"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Compare(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.IsDefined(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.IsInfinite(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.ToString(System.Int16,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.ToString(System.Int16,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.GetLargestIntegralDigitPosition(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.GetLargestFractionalDigitPosition(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Negate(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Sign(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.AbsoluteValue(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.ShiftLeft(System.Int16,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.ShiftRight(System.Int16,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Not(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.And(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Or(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Xor(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Add(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Subtract(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Difference(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Multiply(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Multiply(System.Int16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryMultiply(System.Int16,System.Double,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Divide(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Remainder(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Ratio(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Logarithm(System.Double,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int16,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.String,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int16,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int16,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Double,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int16,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Single,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int16,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int32,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int16,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.TryConvert(System.Int64,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int16Descriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Int32"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Int32"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Compare(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.IsDefined(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.IsInfinite(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.ToString(System.Int32,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.ToString(System.Int32,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.GetLargestIntegralDigitPosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.GetLargestFractionalDigitPosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Negate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Sign(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.AbsoluteValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.ShiftLeft(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.ShiftRight(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Not(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.And(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Or(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Xor(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Add(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Subtract(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Difference(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Multiply(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Multiply(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryMultiply(System.Int32,System.Double,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Divide(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Remainder(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Ratio(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Logarithm(System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Int32,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.String,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Int32,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Double,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Int32,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Single,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Int32,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.TryConvert(System.Int64,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int32Descriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Int64"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Int64"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Compare(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.IsDefined(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.IsInfinite(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.ToString(System.Int64,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.ToString(System.Int64,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.GetLargestIntegralDigitPosition(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.GetLargestFractionalDigitPosition(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Negate(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Sign(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.AbsoluteValue(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.ShiftLeft(System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.ShiftRight(System.Int64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Not(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.And(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Or(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Xor(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Add(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Subtract(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Difference(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Multiply(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Multiply(System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryMultiply(System.Int64,System.Double,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Divide(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Remainder(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Ratio(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Logarithm(System.Double,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.Int64,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.String,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.Int64,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.Int64,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.Double,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.Int64,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.TryConvert(System.Single,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.Int64Descriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1">
            <summary>
            Represents an <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> that does not support conversion between any units.
            </summary>
            <typeparam name="TData">The conversion data type.</typeparam>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1"/> class to indicate that conversion between two units is not possible.
            <para>
            <see cref="P:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.CanConvert"/>, <see cref="P:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.CanConvertBack"/>, <see cref="M:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.TryConvert(`0,`0@)"/>, and <see cref="M:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.TryConvertBack(`0,`0@)"/>
            all return <see langword="false"/>.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:15:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.#ctor(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1"/> class.
            </summary>
            <param name="from">The <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.</param>
            <param name="to">The <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="from"/> is <see langword="null"/>.
                <para>- or -</para>
                <paramref name="to"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/10/2012 2:22:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.TryConvert(`0,`0@)">
            <inheritdoc/>
            <remarks>Assigns <paramref name="result"/> to the default value of <typeparamref name="TData"/> and returns <see langword="false"/>.</remarks>
            <lastupdated>6/10/2012 2:22:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.TryConvertBack(`0,`0@)">
            <inheritdoc/>
            <remarks>Assigns <paramref name="result"/> to the default value of <typeparamref name="TData"/> and returns <see langword="false"/>.</remarks>
            <lastupdated>6/10/2012 2:22:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:22:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.From">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:21:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.To">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:21:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.CanConvert">
            <inheritdoc/>
            <remarks>Returns <see langword="false"/>.</remarks>
            <lastupdated>6/10/2012 2:21:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.NoOpUnitConverter`1.CanConvertBack">
            <inheritdoc/>
            <remarks>Returns <see langword="false"/>.</remarks>
            <lastupdated>6/10/2012 2:21:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> collections.</summary>
            <typeparam name="TCollection">The type of collection.</typeparam>
            <typeparam name="TData">The data type of the collection.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> collections.</remarks>
            <lastupdated>6/10/2012 2:39:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2.GetDimensionDataTypes(`0,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2.Decompose(`0,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2.GetValueObserver(`0,NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ObservableCollectionDescriptor`2.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter">
            <summary>
            Represents an <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> that supports conversion between units with a constant base power difference.
            </summary>
            <remarks>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Create``1(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.RationalInt32)"/> methods to create a converter between units using a constant power
            of 10 and a numeric offset, such that <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> returns <c>(value * 10^power) + offset</c>
            and <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/> returns <c>(value - offset) * 10^-power</c>.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:16:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Create``1(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Creates a new <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> instance for converting between the specified units,
            based on a constant power of 10 and a numeric offset.
            </summary>
            <typeparam name="TData">The conversion data type.</typeparam>
            <param name="from">The <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.</param>
            <param name="to">The <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit.</param>
            <param name="power">The power of 10 conversion factor.</param>
            <param name="offset">The conversion offset.</param>
            <remarks>
            If the data type does not support the required mathematical operations, a no-op converter is returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="from"/> is <see langword="null"/>.
                <para>- or -</para>
                <paramref name="to"/> is <see langword="null"/>.
            </exception>
            <returns>
            An <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> for converting between <paramref name="from"/> and <paramref name="to"/>,
            based on a constant power of 10 and a numeric offset.
            </returns>
            <lastupdated>6/10/2012 2:23:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Create``1(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.RationalInt32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Create``1(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <lastupdated>6/10/2012 2:23:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:23:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.From">
            <inheritdoc cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/>
            <lastupdated>6/10/2012 2:22:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.To">
            <inheritdoc cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/>
            <lastupdated>6/10/2012 2:23:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Type">
            <summary>
            Returns the data type of the values this converter supports.
            </summary>
            <value>The data type of the values this converter supports.</value>
            <lastupdated>6/10/2012 2:23:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Power">
            <summary>
            Gets the base conversion power.
            </summary>
            <value>The base conversion power.</value>
            <lastupdated>6/10/2012 2:23:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.Offset">
            <summary>
            Gets the conversion offset.
            </summary>
            <value>The conversion offset.</value>
            <lastupdated>6/10/2012 2:22:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.CanConvert">
            <inheritdoc cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/>
            <lastupdated>6/10/2012 2:22:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PowerOffsetUnitConverter.CanConvertBack">
            <inheritdoc cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvertBack"/>
            <lastupdated>6/10/2012 2:22:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.PrecisionDateTime"/> and <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:NationalInstruments.PrecisionDateTime"/> and <see cref="T:NationalInstruments.PrecisionTimeSpan"/> data types.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/10/2012 2:40:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Compare(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.IsDefined(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.IsInfinite(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Compare(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.IsDefined(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.IsInfinite(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.ToString(NationalInstruments.PrecisionDateTime,System.String,System.IFormatProvider)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{NationalInstruments#PrecisionDateTime}#Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryParse(System.String,System.String,System.IFormatProvider,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:46:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.ToString(NationalInstruments.PrecisionTimeSpan,System.String,System.IFormatProvider)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{NationalInstruments#PrecisionTimeSpan}#Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryParse(System.String,System.String,System.IFormatProvider,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:46:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.GetLargestIntegralDigitPosition(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.GetLargestFractionalDigitPosition(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.GetLargestIntegralDigitPosition(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.GetLargestFractionalDigitPosition(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.AbsoluteValue(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Negate(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Sign(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Ceiling(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Floor(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Round(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Round(NationalInstruments.PrecisionDateTime,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Truncate(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Ceiling(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Floor(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Round(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Round(NationalInstruments.PrecisionTimeSpan,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Truncate(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Add(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Add(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Difference(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Subtract(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Difference(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Subtract(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Multiply(NationalInstruments.PrecisionTimeSpan,System.Double)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryMultiply(NationalInstruments.PrecisionTimeSpan,System.Double,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:46:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Multiply(NationalInstruments.PrecisionDateTime,System.Double)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryMultiply(NationalInstruments.PrecisionDateTime,System.Double,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Multiply(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:42:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Multiply(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Divide(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Divide(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Remainder(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Remainder(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Ratio(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:43:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Convert(NationalInstruments.PrecisionDateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.Convert(NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:41:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionDateTime,System.String@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionTimeSpan,System.String@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(System.String,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(System.String,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(System.Double,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionDateTime,System.Double@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(System.Double,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionTimeSpan,System.Double@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(System.DateTime,NationalInstruments.PrecisionDateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionDateTime,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:44:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(System.TimeSpan,NationalInstruments.PrecisionTimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.TryConvert(NationalInstruments.PrecisionTimeSpan,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:45:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{NationalInstruments#PrecisionDateTime}#RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{NationalInstruments#PrecisionTimeSpan}#RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{NationalInstruments#PrecisionDateTime}#Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{NationalInstruments#PrecisionDateTime}#One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{NationalInstruments#PrecisionDateTime}#SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{NationalInstruments#PrecisionTimeSpan}#Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{NationalInstruments#PrecisionTimeSpan}#One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{NationalInstruments#PrecisionTimeSpan}#SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{NationalInstruments#PrecisionDateTime}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{NationalInstruments#PrecisionDateTime}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{NationalInstruments#PrecisionTimeSpan}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{NationalInstruments#PrecisionTimeSpan}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.NegativeOne">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.PrecisionTimeDescriptor.MaximumRoundDigits">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:40:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1">
            <summary>
            Represents a reversed version of an existing <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> for converting from one unit to another.
            </summary>
            <typeparam name="TData">The conversion data type.</typeparam>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1"/> class to reverse the direction of the
            <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> and <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/> conversion methods.
            In other words, if the <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> used to construct <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1"/>
            converted values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit into values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit,
            then <see cref="M:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.TryConvert(`0,`0@)"/> on the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1"/> will convert values using the
            <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit into values using the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:18:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.#ctor(NationalInstruments.DataInfrastructure.IUnitConverter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1"/> class.
            </summary>
            <param name="converter">An <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="converter"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/10/2012 2:31:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.TryConvert(`0,`0@)">
            <inheritdoc/>
            <remarks>Uses <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvertBack(`0,`0@)"/> on the underlying <see cref="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter"/>.</remarks>
            <lastupdated>6/10/2012 2:31:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.TryConvertBack(`0,`0@)">
            <inheritdoc/>
            <remarks>Uses <see cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/> on the underlying <see cref="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter"/>.</remarks>
            <lastupdated>6/10/2012 2:31:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:31:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter">
            <summary>
            Gets the underlying unit converter.
            </summary>
            <value>The underlying unit converter.</value>
            <lastupdated>6/10/2012 2:30:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.From">
            <inheritdoc/>
            <remarks>Returns the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.To"/> unit of the underlying <see cref="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter"/>.</remarks>
            <lastupdated>6/10/2012 2:31:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.To">
            <inheritdoc/>
            <remarks>Returns the <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.From"/> unit of the underlying <see cref="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter"/>.</remarks>
            <lastupdated>6/10/2012 2:31:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.CanConvert">
            <inheritdoc/>
            <remarks>Returns the value of <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvertBack"/> from the underlying <see cref="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter"/>.</remarks>
            <lastupdated>6/10/2012 2:30:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.CanConvertBack">
            <inheritdoc/>
            <remarks>Returns the value of <see cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/> from the underlying <see cref="P:NationalInstruments.DataInfrastructure.Primitives.ReversedUnitConverter`1.Converter"/>.</remarks>
            <lastupdated>6/10/2012 2:30:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.SByte"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.SByte"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Compare(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.IsDefined(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.IsInfinite(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.ToString(System.SByte,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.ToString(System.SByte,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.GetLargestIntegralDigitPosition(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.GetLargestFractionalDigitPosition(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Negate(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Sign(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.AbsoluteValue(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.ShiftLeft(System.SByte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.ShiftRight(System.SByte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Not(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.And(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Or(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Xor(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Add(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Subtract(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Difference(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Multiply(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Multiply(System.SByte,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryMultiply(System.SByte,System.Double,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Divide(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Remainder(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Ratio(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Logarithm(System.Double,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.String,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.Double,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.Single,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.Int16,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.Int32,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.SByte,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.TryConvert(System.Int64,System.SByte@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SByteDescriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.Single"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.Single"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Compare(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.IsDefined(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.IsInfinite(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.ToString(System.Single,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.GetLargestIntegralDigitPosition(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.GetLargestFractionalDigitPosition(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Negate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Sign(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.AbsoluteValue(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Ceiling(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Floor(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Round(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Round(System.Single,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Truncate(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Add(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Subtract(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Difference(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Multiply(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Multiply(System.Single,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryMultiply(System.Single,System.Double,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Divide(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Remainder(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Ratio(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Logarithm(System.Double,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryConvert(System.Single,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryConvert(System.String,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryConvert(System.Single,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryConvert(System.Single,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.TryConvert(System.Double,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.NegativeOne">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Infinity">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.MaximumRoundDigits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.SingleDescriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:NationalInstruments.Spectrum`1"/>.</summary>
            <typeparam name="TData">The data type of the waveform.</typeparam>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:NationalInstruments.Spectrum`1"/> data type.</remarks>
            <lastupdated>6/10/2012 2:36:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1.GetDefaultValue">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1.GetDimensionDataTypes(NationalInstruments.Spectrum{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1.Decompose(NationalInstruments.Spectrum{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1.Compose(System.Collections.Generic.IList{NationalInstruments.DataInfrastructure.IBuffer},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1.GetValueObserver(NationalInstruments.Spectrum{`0},NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.SpectrumDescriptor`1.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:36:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.StringDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.String"/>.</summary>
            <threadsafety safety="safe"/>
            <remarks>Exposes data operations for the <see cref="T:System.String"/> data type.</remarks>
            <lastupdated>6/10/2012 2:47:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.StringDescriptor.Convert(System.String)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.StringDescriptor.TryConvert(System.String,System.String@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.StringDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.DateTime"/> and <see cref="T:System.TimeSpan"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.DateTime"/> and <see cref="T:System.TimeSpan"/> data types.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/10/2012 2:47:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Compare(System.DateTime,System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.IsDefined(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.IsInfinite(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Compare(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.IsDefined(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.IsInfinite(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.ToString(System.DateTime,System.String,System.IFormatProvider)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{System#DateTime}#Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.ToString(System.TimeSpan,System.String,System.IFormatProvider)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{System#TimeSpan}#Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryParse(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.GetLargestIntegralDigitPosition(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.GetLargestFractionalDigitPosition(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.GetLargestIntegralDigitPosition(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.GetLargestFractionalDigitPosition(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.AbsoluteValue(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Negate(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Sign(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Ceiling(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Floor(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Round(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Round(System.DateTime,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Truncate(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Ceiling(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Floor(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Round(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Round(System.TimeSpan,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Truncate(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Add(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Add(System.DateTime,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Difference(System.DateTime,System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Subtract(System.DateTime,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Difference(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Subtract(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Multiply(System.TimeSpan,System.Double)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryMultiply(System.TimeSpan,System.Double,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Multiply(System.DateTime,System.Double)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryMultiply(System.DateTime,System.Double,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Multiply(System.DateTime,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Multiply(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Divide(System.DateTime,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Divide(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:49:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Remainder(System.DateTime,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Remainder(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Ratio(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:50:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Convert(System.DateTime)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.DateTime,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.Convert(System.TimeSpan)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.TimeSpan,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.DateTime,System.String@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.TimeSpan,System.String@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.String,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.String,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.DateTime,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.TimeSpan,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.Double,System.DateTime@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.DateTime,System.Double@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.Double,System.TimeSpan@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:51:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.TimeSpan,System.Double@)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:52:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.Int64,System.DateTime@)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpConversion`2.TryConvert(`0,`1@)"/>
            <lastupdated>6/10/2012 2:51:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.TryConvert(System.DateTime,System.Int64@)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpConversion`2.TryConvert(`0,`1@)"/>
            <lastupdated>6/10/2012 2:51:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{System#DateTime}#RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpFormat{System#TimeSpan}#RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{System#DateTime}#Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{System#DateTime}#One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{System#DateTime}#SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{System#TimeSpan}#Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{System#TimeSpan}#One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpNumeric{System#TimeSpan}#SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{System#DateTime}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{System#DateTime}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{System#TimeSpan}#MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NationalInstruments#DataInfrastructure#Descriptors#IOpBounded{System#TimeSpan}#MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.NegativeOne">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:48:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TimeDescriptor.MaximumRoundDigits">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:47:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute">
            <summary>
            Identifies the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> for the targeted <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> type.
            </summary>
            <remarks>
            When applied to a type derived from <see cref="T:NationalInstruments.DataInfrastructure.Trait"/>, enables <see cref="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitQueryOptions)"/>
            to construct trait instances automatically when <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/> is set.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 2:19:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute"/> class.
            </summary>
            <param name="traitFactoryType">The type of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> for the associated <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> class.</param>
            <lastupdated>6/10/2012 2:33:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:33:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute.TraitFactoryType">
            <summary>
            Gets the type of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> for the associated <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> class.
            </summary>
            <value>The type of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> for the associated <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> class.</value>
            <lastupdated>6/11/2012 2:19:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.TraitGroup">
            <summary>
            Represents a group of traits.
            </summary>
            <remarks>
            Can be used with <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiSample`1"/> and <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1"/> descriptors,
            to pass more than one decompose option.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/10/2012 2:35:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.#ctor(NationalInstruments.DataInfrastructure.Trait[])">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitGroup"/> class with the specified traits.
            </summary>
            <param name="traits">A collection of traits.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="traits"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="traits"/> contains a <see langword="null"/> value.
            </exception>
            <lastupdated>6/10/2012 2:36:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.Contains(NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether the specified target is contained in the trait.
            </summary>
            <param name="trait">The trait to search.</param>
            <param name="target">The trait to look for.</param>
            <returns>
                <see langword="true"/> if <paramref name="target"/> is equal to <paramref name="trait"/>,
            or is contained within a <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitGroup"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="target"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/10/2012 2:35:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
            <lastupdated>6/10/2012 2:35:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:35:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:35:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:35:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.TraitGroup.Traits">
            <summary>
            Gets the collection of traits contained in the group.
            </summary>
            <value>The collection of traits contained in the group.</value>
            <lastupdated>6/10/2012 2:35:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.UInt16"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.UInt16"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Compare(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.IsDefined(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.IsInfinite(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.ToString(System.UInt16,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryParse(System.String,System.String,System.IFormatProvider,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.ToString(System.UInt16,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.GetLargestIntegralDigitPosition(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.GetLargestFractionalDigitPosition(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.ShiftLeft(System.UInt16,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.ShiftRight(System.UInt16,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Not(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.And(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Or(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Xor(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Add(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Subtract(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Difference(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Multiply(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Multiply(System.UInt16,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryMultiply(System.UInt16,System.Double,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Divide(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Remainder(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Ratio(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Logarithm(System.Double,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.String,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.Double,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.Single,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.Int16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.Int16,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt32,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt16,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.TryConvert(System.UInt64,System.UInt16@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt16Descriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.UInt32"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.UInt32"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Compare(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.IsDefined(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.IsInfinite(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.ToString(System.UInt32,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryParse(System.String,System.String,System.IFormatProvider,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.ToString(System.UInt32,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.GetLargestIntegralDigitPosition(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.GetLargestFractionalDigitPosition(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.ShiftLeft(System.UInt32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.ShiftRight(System.UInt32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Not(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.And(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Or(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Xor(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Add(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Subtract(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Difference(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Multiply(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Multiply(System.UInt32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryMultiply(System.UInt32,System.Double,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Divide(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Remainder(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Ratio(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Logarithm(System.Double,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt32,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.String,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt32,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt32,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.Double,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt32,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.Single,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.Int32,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt32,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.TryConvert(System.UInt64,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt32Descriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor">
            <summary>The default <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.IDataTypeDescriptor`1"/> for <see cref="T:System.UInt64"/>.</summary>
            <remarks>Exposes data and mathematical operations for the <see cref="T:System.UInt64"/> data type.</remarks>
            <threadsafety safety="safe"/>
            <lastupdated>2012-05-07 11:19:18 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Compare(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.IsDefined(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.IsInfinite(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.ToString(System.UInt64,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryParse(System.String,System.String,System.IFormatProvider,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Parse(System.String,System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.ToString(System.UInt64,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryParse(System.String,System.Int32,System.IFormatProvider,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Parse(System.String,System.Int32,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.GetLargestIntegralDigitPosition(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.GetLargestFractionalDigitPosition(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.ShiftLeft(System.UInt64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.ShiftRight(System.UInt64,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Not(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.And(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Or(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Xor(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Add(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Subtract(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Difference(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Multiply(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Multiply(System.UInt64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryMultiply(System.UInt64,System.Double,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Divide(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Remainder(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Ratio(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Logarithm(System.Double,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Power(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.UInt64,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.String,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.UInt64,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.UInt64,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.Double,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.UInt64,System.Single@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.Single,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.UInt64,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.TryConvert(System.Int64,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.RoundTripFormat">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Zero">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.One">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.SmallestPositiveValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.BitCount">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.AllBits">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Base2">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.BaseE">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Primitives.UInt64Descriptor.Base10">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Buffer`1">
            <summary>
            Represents a read-only collection of data values.
            </summary>
            <remarks>
            Buffers allow low-level array-like access to a set of samples.
            <para>
            Samples in the buffer are immutable and cannot be changed directly, but the various
            <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,``0},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})"/> methods allow for efficient creation of
            new buffers based on the current set of samples.
            </para>
                <para>
            Because buffers are immutable, they can be safely shared between multiple objects. Buffer ownership is reference-based,
            so if an object wants to keep its own copy of the data, it should call <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.GetReadable"/> which returns
            a new buffer instance referring to the same internal data without making a copy.
            When a buffer is no longer needed, you should call <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Dispose"/> to return the underlying memory to the pool.
            </para>
                <para>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Slice(System.Int32,System.Int32)"/> methods to get a buffer containing a subset of the samples in the original buffer.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Join(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Unit)"/> methods to combine individual buffers into a single buffer.
            </para>
                <note type="note">
            If the underlying data store is modified by an external operation, the buffer is disposed automatically.
            This behavior only happens for volatile buffer sources, such as <see cref="T:NationalInstruments.AnalogWaveform`1"/> where the waveform
            samples can be modified by changing the <see cref="P:NationalInstruments.AnalogWaveform`1.Samples"/> collection.
            </note>
            </remarks>
            <threadsafety safety="safe"/>
            <typeparam name="TData">The type of data stored in the buffer.</typeparam>
            <lastupdated>6/11/2012 10:56:27 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.IBuffer">
            <summary>
            Root interface for <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> that provides access to basic members outside of a strongly-typed scope.
            </summary>
            <remarks>
            Use the <see cref="T:NationalInstruments.DataInfrastructure.IBuffer"/> interface to manage buffers when access to the data is not needed,
            or the type of data is not known at compile time.
            <para>
            To access the data within an <see cref="T:NationalInstruments.DataInfrastructure.IBuffer"/> instance, cast to the appropriate <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> type,
            or use <see cref="T:NationalInstruments.DataInfrastructure.Descriptors.GenericMemberUtility"/> to create a strongly-typed helper type or method.
            </para>
            </remarks>
            <lastupdated>6/11/2012 2:04:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.IIndicateDisposed">
            <summary>
            Adds a property to indicate whether the disposable object has been disposed.
            </summary>
            <remarks>
            Use the <see cref="P:NationalInstruments.IIndicateDisposed.IsDisposed"/> property to determine whether it is safe to access the <see cref="T:System.IDisposable"/> object.
            </remarks>
            <lastupdated>6/8/2012 10:27:37 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.IIndicateDisposed.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
            <value>
            A value indicating whether the object has been disposed. The default value is <see langword="false"/>.
            </value>
            <lastupdated>6/7/2012 4:30:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IBuffer.GetReadable">
            <summary>
            Returns a new read-only buffer referencing the same sample values.
            </summary>
            <returns>A new read-only buffer referencing the same sample values.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:32:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IBuffer.GetReadable(System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer referencing the same sample values.
            </summary>
            <param name="traitFilter">A function to filter the set of traits stored with the buffer.</param>
            <returns>A new read-only buffer referencing the same sample values.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:33:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IBuffer.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a new read-only buffer referencing a subset of the samples in this buffer.
            </summary>
            <param name="startIndex">The index of the first sample take.</param>
            <param name="length">The number of samples to take from the buffer.</param>
            <returns>A buffer containing <paramref name="length"/> values from the current buffer, beginning at <paramref name="startIndex"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is less than zero.
                <para>- or -</para>
                <para><paramref name="length"/> is less than zero.</para>
                <para>- or -</para>
                <para>The range covered by <paramref name="startIndex"/> and <paramref name="length"/> is greater than <see cref="P:NationalInstruments.DataInfrastructure.IBuffer.Size"/>.</para>
            </exception>
            <lastupdated>6/9/2012 10:34:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IBuffer.Slice(System.Int32,System.Int32,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer referencing a subset of the samples in this buffer.
            </summary>
            <param name="startIndex">The index of the first sample take.</param>
            <param name="length">The number of samples to take from the buffer.</param>
            <param name="traitFilter">A function to filter the set of traits stored with the buffer.</param>
            <returns>A buffer containing <paramref name="length"/> values from the current buffer, beginning at <paramref name="startIndex"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is less than zero.
                <para>- or -</para>
                <para><paramref name="length"/> is less than zero.</para>
                <para>- or -</para>
                <para>The range covered by <paramref name="startIndex"/> and <paramref name="length"/> is greater than <see cref="P:NationalInstruments.DataInfrastructure.IBuffer.Size"/>.</para>
            </exception>
            <lastupdated>6/9/2012 10:35:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IBuffer.DataType">
            <summary>
            Gets the data type of the buffer.
            </summary>
            <value>The data type of the buffer.</value>
            <lastupdated>6/9/2012 10:32:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IBuffer.Size">
            <summary>
            Gets the number of samples in the buffer.
            </summary>
            <value>The number of samples in the buffer.</value>
            <lastupdated>6/9/2012 10:32:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IBuffer.Unit">
            <summary>
            Gets the unit of measure of the samples in the buffer.
            </summary>
            <value>The unit of measure of the samples in the buffer.</value>
            <lastupdated>6/9/2012 10:32:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.IBuffer.Traits">
            <summary>
            Gets the collection of metadata for the buffer.
            </summary>
            <value>The collection of metadata for the buffer.</value>
            <lastupdated>6/9/2012 10:32:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.ToString">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:51:20 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.GetReadable">
            <summary>
            Returns a new read-only buffer referencing the same sample values.
            </summary>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the sample values in the buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:48:34 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.GetReadable(System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer referencing the same sample values.
            </summary>
            <param name="traitFilter">A function to apply to each trait to transform it or remove it from the result collection.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the sample values in the buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:48:34 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.GetWritable">
            <summary>
            Returns a new writable buffer with an editable copy of the sample values in this buffer.
            </summary>
            <remarks>
            Changes to the writable buffer made after this call will not be reflected in the current buffer.
            </remarks>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>  containing the sample values in the buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:48:58 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable">
            <summary>
            Returns a new writable buffer with an editable copy of the sample values in this buffer, and disposes the current buffer.
            </summary>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>  containing the sample values in the buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:50:40 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Slice(System.Int32,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Slice(System.Int32,System.Int32,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})"/>
            <lastupdated>6/8/2012 10:50:44 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Slice(System.Int32,System.Int32,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer referencing a subset of the samples in this buffer.
            </summary>
            <param name="startIndex">The index of the first sample to include in the buffer slice.</param>
            <param name="length">The number of samples to include in the buffer slice.</param>
            <param name="traitFilter">A function to apply to each trait to transform it or remove it from the result collection.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the samples in the current buffer from <paramref name="startIndex"/> to <paramref name="length"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:51:14 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Join(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Unit)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Join(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})"/>
            <lastupdated>6/8/2012 10:49:34 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Join(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer referencing the samples in the current and specified buffers.
            </summary>
            <remarks>
            Indexes in the range <c>[0, this.Size)</c>  access the samples in this buffer;
            indexes in the range <c>[this.Size, this.Size + other.Size)</c>  access the samples in the other buffer.
            </remarks>
            <param name="other">The buffer to join to the end of the current buffer.</param>
            <param name="unit">The unit of measure of the samples in the combined buffer.</param>
            <param name="traitFilter">A function to apply to each trait to transform or remove it from the result collection.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the samples in the current and <paramref name="other"/> buffers.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="other"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/8/2012 10:50:20 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,``0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer containing the values returned by the given transformer function, using the specified unit and traits.
            </summary>
            <typeparam name="TResult">The data type of the result values.</typeparam>
            <param name="transformer">A transform function to apply to each value.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traits">The updated traits for the result values.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the samples in the current buffer transformed by <paramref name="transformer"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="traits"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/8/2012 10:52:54 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,``0},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,``0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})"/>
            <param name="transformer">A transform function to apply to each source value; the second parameter of the function represents the index of the source value.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traitFilter">A function to apply to each trait to transform it or remove it from the result collection.</param>
            <lastupdated>6/8/2012 10:55:42 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,System.Int32,``0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer containing the values returned by the given transformer function incorporating the value's index, using the specified unit and traits.
            </summary>
            <typeparam name="TResult">The data type of the result values.</typeparam>
            <param name="transformer">A transform function to apply to each source value; the second parameter of the function represents the index of the source value.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traits">The updated traits for the result values.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the samples in the current buffer transformed by <paramref name="transformer"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="traits"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/8/2012 10:51:59 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,System.Int32,``0},NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(System.Func{`0,System.Int32,``0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})"/>
            <param name="transformer">A transform function to apply to each source value; the second parameter of the function represents the index of the source value.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traitFilter">A function to apply to each trait to transform it or remove it from the result collection.</param>
            <lastupdated>6/8/2012 10:52:17 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(NationalInstruments.DataInfrastructure.TryTransform{`0,``0},``0,NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer containing the valid values returned by the given transformer function, using the specified unit and traits.
            </summary>
            <remarks>
            Any values where <paramref name="transformer"/> returns <see langword="false"/> will be marked with an <see cref="F:NationalInstruments.DataInfrastructure.NamedIndicesTrait.InvalidSamples"/> named indices trait.
            </remarks>
            <typeparam name="TResult">The data type of the result values.</typeparam>
            <param name="transformer">A transform function to apply to each value.</param>
            <param name="fallbackResult">The result to use in the returned buffer when transformation fails.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traits">The updated traits for the result values.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the valid samples in the current buffer that were successfully transformed by <paramref name="transformer"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="traits"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/8/2012 10:54:03 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(NationalInstruments.DataInfrastructure.TryTransform{`0,``0},``0,NationalInstruments.DataInfrastructure.Unit,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(NationalInstruments.DataInfrastructure.TryTransform{`0,``0},``0,NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})"/>
            <param name="transformer">A transform function to apply to each value.</param>
            <param name="fallbackResult">The result to use in the returned buffer when transformation fails.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traitFilter">A function to apply to each trait to transform or remove it from the result collection.</param>
            <lastupdated>6/8/2012 10:54:13 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.GetEnumerator">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:48:04 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Contains(`0)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:47:28 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.IndexOf(`0)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:49:30 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:47:55 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.CopyTo(System.Int32,NationalInstruments.DataInfrastructure.WritableBuffer{`0},System.Int32,System.Int32)">
            <summary>
            Copies a specified range of elements from the source buffer to a writable buffer.
            </summary>
            <param name="sourceIndex">The index in the buffer where copying begins.</param>
            <param name="destination">The writable buffer to copy samples to.</param>
            <param name="destinationIndex">The index in the destination where copying begins.</param>
            <param name="length">The number of samples to copy.</param>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/8/2012 10:47:48 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.TryGetArrayIndexer">
            <summary>
            Gets an array indexer for the buffer.
            </summary>
            <returns>An <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1.ArrayDataStoreIndexer"/>, or <see langword="null"/> if the buffer is not backed by an array.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/11/2013 5:26:22 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.Dispose">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:47:59 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.NationalInstruments#DataInfrastructure#IBuffer#GetReadable">
            <exclude/>
            <lastupdated>6/8/2012 10:49:04 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.NationalInstruments#DataInfrastructure#IBuffer#GetReadable(System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <exclude/>
            <lastupdated>6/8/2012 10:49:08 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.NationalInstruments#DataInfrastructure#IBuffer#Slice(System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>6/8/2012 10:49:12 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.NationalInstruments#DataInfrastructure#IBuffer#Slice(System.Int32,System.Int32,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <exclude/>
            <lastupdated>6/8/2012 10:49:19 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>6/8/2012 10:49:23 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#ICollection{TData}#Add(`0)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#ICollection{TData}#Clear">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#ICollection{TData}#Remove(`0)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#IList{TData}#Insert(System.Int32,`0)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#IList{TData}#RemoveAt(System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.#ctor(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0},NationalInstruments.DataInfrastructure.Unit)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.#ctor(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.DataType">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:46:49 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.Size">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:46:56 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.Unit">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:47:21 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.Traits">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:47:17 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.Item(System.Int32)">
            <summary>
            Gets the sample value at the specified location in the buffer.
            </summary>
            <param name="index">The location of the value to retrieve.</param>
            <value>The sample value stored at <paramref name="index"/>.</value>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="index"/> is less than zero, or greater than or equal to <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Size"/>.
            </exception>
            <lastupdated>6/8/2012 10:47:13 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.IsDisposed">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:46:52 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#ICollection{TData}#Count">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#ICollection{TData}#IsReadOnly">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.System#Collections#Generic#IList{TData}#Item(System.Int32)">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Buffer`1.ArrayDataStoreIndexer">
            <summary>
            Represents a data store-specific indexer that provides increased performance for access to buffers that are backed by arrays.
            </summary>
            <lastupdated>6/11/2013 5:25:34 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Buffer`1.ArrayDataStoreIndexer.#ctor(NationalInstruments.DataInfrastructure.Buffer{`0})">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.ArrayDataStoreIndexer.Item(System.Int32)">
            <summary>
            Gets the sample value at the specified location in the buffer.
            </summary>
            <param name="index">The location of the value to retrieve.</param>
            <value>The sample value stored at <paramref name="index"/>.</value>
            <exception cref="T:System.NullReferenceException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero, or greater than or equal to <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.ArrayDataStoreIndexer.Size"/>.
            </exception>
            <lastupdated>6/11/2013 5:33:26 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Buffer`1.ArrayDataStoreIndexer.Size">
            <summary>
            Gets the number of samples in the buffer.
            </summary>
            <value>The number of samples in the buffer.</value>
            <exception cref="T:System.NullReferenceException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/11/2013 5:33:55 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.CoordinateSystemTrait">
            <summary>
            Indicates the associated buffer should be interpreted using the specified coordinate system.
            </summary>
            <remarks>
            For data types that support multiple coordinate systems, use the <see cref="T:NationalInstruments.DataInfrastructure.CoordinateSystemTrait"/> to
            indicate which coordinate system the type should use.
            <para>
            For example, <see cref="T:NationalInstruments.ComplexDouble"/> supports both Cartesian coordinates through the <see cref="P:NationalInstruments.ComplexDouble.Real"/>
            and <see cref="P:NationalInstruments.ComplexDouble.Imaginary"/> properties, and Polar coordinates through the <see cref="P:NationalInstruments.ComplexDouble.Phase"/>
            and <see cref="P:NationalInstruments.ComplexDouble.Magnitude"/> properties. You can use <see cref="T:NationalInstruments.DataInfrastructure.CoordinateSystemTrait"/> with the
            <see cref="M:NationalInstruments.DataInfrastructure.Descriptors.IOpMultiDimensional`1.DecomposeValues(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Trait)"/> method on the descriptor for <see cref="T:NationalInstruments.ComplexDouble"/> to
            decompose a buffer into either real+imaginary or phase+magnitude values based on the decompose option <see cref="T:NationalInstruments.DataInfrastructure.Trait"/>.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 10:57:27 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.Cartesian">
            <summary>Gets a trait instance for the Cartesian coordinate system.</summary>
            <lastupdated>6/7/2012 4:57:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.Polar">
            <summary>Gets a trait instance for the Polar coordinate system.</summary>
            <lastupdated>6/7/2012 4:58:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.CoordinateSystemTrait"/> class with the specified coordinate system.
            </summary>
            <param name="coordinateSystem">A coordinate system identifier.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="coordinateSystem"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="coordinateSystem"/> is empty.
            </exception>
            <lastupdated>6/7/2012 4:58:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 4:58:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/7/2012 4:58:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 4:58:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/7/2012 4:58:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.CoordinateSystemTrait.CoordinateSystem">
            <summary>
            Gets the identifier for the coordinate system.
            </summary>
            <value>The identifier for the coordinate system.</value>
            <lastupdated>6/7/2012 4:58:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.DigitalSample">
            <summary>Represents a read-only collection of <see cref="T:NationalInstruments.DigitalState"/> values.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.#ctor(System.Collections.Generic.IList{NationalInstruments.DigitalState})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> struct with the specified values.
            </summary>
            <param name="values">A collection of <see cref="T:NationalInstruments.DigitalState"/> values.</param>
            <exception cref="T:System.ArgumentException"><see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="values"/> is greater than 32767.</exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.#ctor(System.Collections.Generic.IList{NationalInstruments.DigitalState},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> struct with the specified values and index.
            </summary>
            <param name="values">A collection of <see cref="T:NationalInstruments.DigitalState"/> values.</param>
            <param name="parentIndex">The index of the parent collection containing the sample.</param>
            <exception cref="T:System.ArgumentException"><see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="values"/> is greater than 32767.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="parentIndex"/> is less than zero or greater than 32767.</exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.#ctor(System.Collections.Generic.IList{NationalInstruments.DigitalState},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> struct with the specified values and index.
            </summary>
            <param name="values">A collection of <see cref="T:NationalInstruments.DigitalState"/> values.</param>
            <param name="parentIndex">The index of the parent collection containing the sample.</param>
            <param name="stateIndex">The index of a state within the sample.</param>
            <exception cref="T:System.ArgumentException"><see cref="P:System.Collections.Generic.ICollection`1.Count"/> of <paramref name="values"/> is greater than 32767.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="parentIndex"/> is less than zero or greater than 32767.</para>
              <para>-or-</para>
              <para><paramref name="stateIndex"/> is less than zero or greater than or equal to <see cref="P:NationalInstruments.DataInfrastructure.DigitalSample.Count"/>.</para>
            </exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.ChangeParentIndex(System.Int32)">
            <summary>
            Returns a new digital sample with the specified parent index.
            </summary>
            <param name="parentIndex">The index of the parent collection containing the sample.</param>
            <returns>A new <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> with a <see cref="P:NationalInstruments.DataInfrastructure.DigitalSample.ParentIndex"/> of <paramref name="parentIndex"/>, and the same values and <see cref="P:NationalInstruments.DataInfrastructure.DigitalSample.StateIndex"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="parentIndex"/> is less than zero or greater than 32767.</exception>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.GetValuesType">
            <summary>
            Gets the type of the values collection used to create the digital sample.
            </summary>
            <returns>
            The type of the values collection used to create the digital sample,
            or <see langword="null"/> if no collection was used.
            </returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.TryParse(System.String,NationalInstruments.DataInfrastructure.DigitalSample@)">
            <summary>
            Converts the string representation of a <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> to its equivalent value.
            </summary>
            <param name="input">A string containing a unit to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> equivalent to the string contained in <paramref name="input"/>,
            if the conversion succeeded, or an empty sample if the conversion failed.
            </param>
            <returns><see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.Parse(System.String)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.DigitalSample.TryParse(System.String,NationalInstruments.DataInfrastructure.DigitalSample@)"/>
            <returns>The <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> equivalent to the string contained in <paramref name="input"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.FromDigitalState(NationalInstruments.DigitalState)">
            <summary>
            Returns a digital sample for the specified digital state value.
            </summary>
            <param name="state">A <see cref="T:NationalInstruments.DigitalState"/> value.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> containing <paramref name="state"/>.</returns>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.CopyTo(NationalInstruments.DigitalState[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.Contains(NationalInstruments.DigitalState)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.IndexOf(NationalInstruments.DigitalState)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#ICollection{NationalInstruments#DigitalState}#Add(NationalInstruments.DigitalState)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#ICollection{NationalInstruments#DigitalState}#Clear">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#IList{NationalInstruments#DigitalState}#Insert(System.Int32,NationalInstruments.DigitalState)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#ICollection{NationalInstruments#DigitalState}#Remove(NationalInstruments.DigitalState)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#IList{NationalInstruments#DigitalState}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.#ctor(System.Collections.Generic.IList{NationalInstruments.DigitalState},System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> struct with the specified values and indexData.
            </summary>
            <exception cref="T:System.ArgumentException">
            Size of <paramref name="values"/> is greater than 32767.
            </exception>
            <param name="values">
            The object containing the sample's data.
            </param>
            <param name="indexData">
            The data for the sample's parent and <see cref="T:NationalInstruments.DigitalState"/> index values.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.Equals(NationalInstruments.DataInfrastructure.DigitalSample)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.op_Equality(NationalInstruments.DataInfrastructure.DigitalSample,NationalInstruments.DataInfrastructure.DigitalSample)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.op_Inequality(NationalInstruments.DataInfrastructure.DigitalSample,NationalInstruments.DataInfrastructure.DigitalSample)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.DigitalSample"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.DigitalSample.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.Count">
            <summary>Gets the number of states contained in the sample.</summary>
            <value>The number of states contained in the sample.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.ParentIndex">
            <summary>Gets the index of the parent collection containing the sample.</summary>
            <value>The index of the parent collection containing the sample, or -1 if the index was not set.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.StateIndex">
            <summary>Gets the index of a state within the sample.</summary>
            <value>The index of a state within the sample, or -1 if the index was not set.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.Item(System.Int32)">
            <summary>Gets the state at the specified index.</summary>
            <value>The state at the specified index.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#ICollection{NationalInstruments#DigitalState}#IsReadOnly">
            <summary>Gets a value indicating the collection is read-only.</summary>
            <value><see langword="true"/> to indicate the collection is read-only.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.System#Collections#Generic#IList{NationalInstruments#DigitalState}#Item(System.Int32)">
            <summary>Gets the state at the specified index.</summary>
            <value>The state at the specified index.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.Values">
            <summary>
            Gets the object containing the sample's data.
            </summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.DigitalSample.IndexData">
            <summary>
            Gets the data for the sample's parent and <see cref="T:NationalInstruments.DigitalState"/> index values.
            </summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait">
            <summary>
            Indicates the indices of the largest and smallest finite samples in the associated buffer.
            </summary>
            <remarks>
            This trait can be calculated automatically using <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/>
            when calling <see cref="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitQueryOptions)"/>.
            <para>
            Undefined and infinite samples are not included in the standard.
            </para>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/8/2012 10:56:20 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.Empty">
            <summary>Gets an <seealso cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/> instance without any index values.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/> with the specified indices.
            </summary>
            <param name="scope">The range of samples the trait applies to.</param>
            <param name="minimumIndex">The index of the smallest finite sample in the associated buffer.</param>
            <param name="maximumIndex">The index of the largest finite sample in the associated buffer.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is empty.
                <para>- or -</para>
                <para><paramref name="scope"/> is not a range scope.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minimumIndex"/> is not contained by <paramref name="scope"/>.
                <para>- or -</para>
                <para><paramref name="maximumIndex"/> is not contained by <paramref name="scope"/>.</para>
            </exception>
            <lastupdated>6/7/2012 5:02:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/> with the specified indices.
            </summary>
            <param name="scope">The range of samples the trait applies to.</param>
            <param name="minimumIndices">The indices of the smallest finite samples in the associated buffer.</param>
            <param name="maximumIndices">The indices of the largest finite samples in the associated buffer.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is empty.
                <para>- or -</para>
                <para><paramref name="scope"/> is not a range scope.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minimumIndices"/> includes an element not contained by <paramref name="scope"/>.
                <para>- or -</para>
                <para><paramref name="maximumIndices"/> includes an element not contained by <paramref name="scope"/>.</para>
            </exception>
            <lastupdated>6/7/2012 5:01:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.Primitives.IndexSet,NationalInstruments.DataInfrastructure.Primitives.IndexSet)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/> with the specified indices.
            </summary>
            <param name="scope">The range of samples the trait applies to.</param>
            <param name="minimumIndices">The indices of the smallest finite samples in the associated buffer.</param>
            <param name="maximumIndices">The indices of the largest finite samples in the associated buffer.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is empty.
                <para>- or -</para>
                <para><paramref name="scope"/> is not a range scope.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minimumIndices"/> includes an element not contained by <paramref name="scope"/>.
                <para>- or -</para>
                <para><paramref name="maximumIndices"/> includes an element not contained by <paramref name="scope"/>.</para>
            </exception>
            <lastupdated>6/7/2012 5:01:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:02:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:02:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:02:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.MinimumIndexSet">
            <summary>
            Gets the indices of the smallest finite samples in the associated buffer.
            </summary>
            <value>The indices of the smallest finite samples in the associated buffer.</value>
            <remarks>
            All samples at the returned indices should have the same value.
            </remarks>
            <lastupdated>6/7/2012 5:01:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.MaximumIndexSet">
            <summary>
            Gets the indices of the largest finite samples in the associated buffer.
            </summary>
            <value>The indices of the largest finite samples in the associated buffer.</value>
            <remarks>
            All samples at the returned indices should have the same value.
            </remarks>
            <lastupdated>6/7/2012 5:01:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.MinimumIndices">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait.MaximumIndices">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.IndexBufferTrait">
            <summary>
            Indicates that the associated buffer represents index data from a collection source.
            </summary>
            <remarks>
            Use the <see cref="F:NationalInstruments.DataInfrastructure.IndexBufferTrait.Instance"/> of <see cref="T:NationalInstruments.DataInfrastructure.IndexBufferTrait"/> to indicate that a
            buffer represents generated index data, rather than measured sample data. When displaying data from
            a collection of buffers, sample data is treated preferentially if all of the data cannot be accommodated.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 10:58:13 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.IndexBufferTrait.Instance">
            <summary>Gets the index buffer trait instance.</summary>
            <lastupdated>6/7/2012 5:02:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IndexBufferTrait.#ctor">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IndexBufferTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:03:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IndexBufferTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:02:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IndexBufferTrait.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:02:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.IndexBufferTrait.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:03:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Monotonicity">
            <summary>
            Represents how a sequence of values is ordered.
            </summary>
            <lastupdated>6/9/2012 10:38:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Monotonicity.NonMonotonic">
            <summary>Indicates values are not ordered.</summary>
            <lastupdated>6/9/2012 10:38:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Monotonicity.Increasing">
            <summary>Indicates values are ordered from smaller to larger.</summary>
            <lastupdated>6/9/2012 10:38:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.Monotonicity.Decreasing">
            <summary>Indicates values are ordered from larger to smaller.</summary>
            <lastupdated>6/9/2012 10:38:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.MonotonicityTrait">
            <summary>
            Indicates whether data is known to be monotonic.
            </summary>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> to indicate that the data in a buffer is known to be strictly increasing or strictly decreasing.
            If all data from the source is known to be monotonic, use the <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamIncreasing"/> or <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamDecreasing"/>
            trait instances. Otherwise, use the <see cref="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetMonotonicity(NationalInstruments.DataInfrastructure.TraitSet,System.Boolean@)"/> method to retrieve a monotonicity trait for the desired scope.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 10:58:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetMonotonicity(NationalInstruments.DataInfrastructure.TraitSet)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetMonotonicity(NationalInstruments.DataInfrastructure.TraitSet,System.Boolean@)"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetMonotonicity(NationalInstruments.DataInfrastructure.TraitSet,System.Boolean@)">
            <summary>
            Gets the monotonicity value from the traits for a buffer.
            </summary>
            <param name="traits">The set of traits to query.</param>
            <param name="isSequence">
            Contains the <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsSequence"/> value of the monotonicity trait for the buffer,
            or <see langword="false"/> if no trait was found.
            </param>
            <returns>
            The <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> value from the stream- or buffer-scoped <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> in <paramref name="traits"/>,
            or <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.NonMonotonic"/> if no trait was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="traits"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/7/2012 5:05:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetTrait(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.Monotonicity)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetTrait(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.Monotonicity,System.Boolean)"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetTrait(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.Monotonicity,System.Boolean)">
            <summary>
            Gets the monotonicity trait with the specified scope, value, and sequence specifier.
            </summary>
            <param name="scope">A trait scope.</param>
            <param name="monotonicity">A monotonicity value.</param>
            <param name="isSequence">A value indicating whether this is a sequence with a fixed interval and stride.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> with the specified scope and monotonicity.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="scope"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="monotonicity"/> is <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.NonMonotonic"/> and
                <paramref name="isSequence"/> is <see langword="true"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <paramref name="monotonicity"/> is not a valid <see cref="T:NationalInstruments.DataInfrastructure.Monotonicity"/> value.
            </exception>
            <lastupdated>9/17/2013 11:31:29 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:05:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:05:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:05:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:04:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.MonotonicityTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.Monotonicity,System.Boolean)">
            <exclude/><lastupdated>6/7/2012 5:05:30 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamIncreasing">
            <summary>Gets a value indicating the associated stream of buffers is composed of monotonically increasing values.</summary>
            <value>
            A <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> instance with a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>,
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> value of <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.Increasing"/>, and
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsSequence"/> value of <see langword="false"/>.
            </value>
            <lastupdated>6/7/2012 5:04:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamDecreasing">
            <summary>Gets a value indicating the associated stream of buffers is composed of monotonically decreasing values.</summary>
            <value>
            A <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> instance with a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>,
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> value of <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.Decreasing"/>, and
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsSequence"/> value of <see langword="false"/>.
            </value>
            <lastupdated>6/7/2012 5:04:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamIncreasingSequence">
            <summary>
            Gets a value indicating the associated stream of buffers is composed of monotonically increasing values
            that represent a sequence with a fixed interval and stride.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> instance with a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>,
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> value of <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.Increasing"/>, and
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsSequence"/> value of <see langword="true"/>.
            </value>
            <lastupdated>9/17/2013 10:12:41 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamDecreasingSequence">
            <summary>
            Gets a value indicating the associated stream of buffers is composed of monotonically decreasing values
            that represent a sequence with a fixed interval and stride.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> instance with a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>,
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> value of <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.Decreasing"/>, and
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsSequence"/> value of <see langword="true"/>.
            </value>
            <lastupdated>9/17/2013 10:12:35 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.StreamNonMonotonic">
            <summary>Gets a value indicating the associated stream of buffers is composed of non-monotonic values.</summary>
            <value>
            A <see cref="T:NationalInstruments.DataInfrastructure.MonotonicityTrait"/> instance with a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/> and
            a <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> value of <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.NonMonotonic"/>.
            </value>
            <lastupdated>6/7/2012 5:04:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsMonotonic">
            <summary>
            Gets a value indicating whether the trait indicates monotonic values.
            </summary>
            <value>
                <see langword="true"/> if <see cref="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity"/> is <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.Increasing"/>
            or <see cref="F:NationalInstruments.DataInfrastructure.Monotonicity.Decreasing"/>; otherwise, <see langword="false"/>.
            </value>
            <lastupdated>6/7/2012 5:03:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.Monotonicity">
            <summary>Gets the monotonicity value of the trait.</summary><value>The monotonicity value of the trait.</value><lastupdated>6/7/2012 5:05:30 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.MonotonicityTrait.IsSequence">
            <summary>Gets a value indicating whether the buffer represents a sequence of values with a fixed interval and stride.</summary><value><see langword="true"/> if the buffer represents a sequence of values; otherwise, <see langword="false"/>.</value><lastupdated>9/17/2013 9:58:08 AM</lastupdated><updatedby>Aaron Cederquist</updatedby><approved>False</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait">
            <summary>
            Associates a named set of indices with a range in a buffer.
            </summary>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> to name a set of indices in a buffer,
            rather than creating a custom <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> type to contain the information.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 10:58:58 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedIndicesTrait.InvalidSamples">
            <summary>Indicates the indices of invalid samples in the associated buffer.</summary>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Transform``1(NationalInstruments.DataInfrastructure.TryTransform{`0,``0},``0,NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})"/>
            <lastupdated>6/7/2012 5:05:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedIndicesTrait.JoinLocations">
            <summary>Indicates the indices of all buffers joined to create the associated buffer.</summary>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Buffer`1.Join(NationalInstruments.DataInfrastructure.Buffer{`0},NationalInstruments.DataInfrastructure.Unit)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.BufferPool.Join``1(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Buffer{``0}},NationalInstruments.DataInfrastructure.Unit)"/>
            <lastupdated>6/7/2012 5:05:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedIndicesTrait.RemoveLocations">
            <summary>Indicates the indices of locations in the buffer where samples have been removed.</summary>
            <lastupdated>6/7/2012 5:06:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedIndicesTrait.VisibleIndices">
            <summary>Indicates the indices of locations in the buffer where samples are visible in the current range of an axis.</summary>
            <lastupdated>6/7/2012 5:06:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/> class with the specified scope, name, and index values.
            </summary>
            <param name="scope">The scope over which the indices apply.</param>
            <param name="name">An identifier for the indices.</param>
            <param name="indices">The set of indices to associate with the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="name"/> is <see langword="null"/>.
              <para>- or -</para>
              <para><paramref name="indices"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="scope"/> is empty.
              <para>- or -</para>
              <para><paramref name="scope"/> is not a range scope.</para>
              <para>- or -</para>
              <para><paramref name="name"/> is empty.</para>
              <para>- or -</para>
              <para><paramref name="indices"/> contains a value that is not within the range of <paramref name="scope"/>.</para>
            </exception>
            <lastupdated>6/7/2012 5:08:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,System.String,NationalInstruments.DataInfrastructure.Primitives.IndexSet)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/> class with the specified scope, name, and index values.
            </summary>
            <param name="scope">The scope over which the indices apply.</param>
            <param name="name">An identifier for the indices.</param>
            <param name="indices">The set of indices to associate with the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="name"/> is <see langword="null"/>.
              <para>- or -</para>
              <para><paramref name="indices"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="scope"/> is empty.
              <para>- or -</para>
              <para><paramref name="scope"/> is not a range scope.</para>
              <para>- or -</para>
              <para><paramref name="name"/> is empty.</para>
              <para>- or -</para>
              <para><paramref name="indices"/> contains a value that is not within the range of <paramref name="scope"/>.</para>
            </exception>
            <lastupdated>6/7/2012 5:08:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:09:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllSets(NationalInstruments.DataInfrastructure.TraitSet,System.String)">
            <summary>
            Retrieves all index values from all <see cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/> instances in the buffer with the specified name.
            </summary>
            <param name="traits">The set of traits to examine.</param>
            <param name="name">The name of the <see cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/> instances to retrieve.</param>
            <returns>A collection containing all <see cref="P:NationalInstruments.DataInfrastructure.NamedIndicesTrait.IndexSet"/> values from all <paramref name="name"/><entity value="nbsp"/><see cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="traits"/> is <see langword="null"/>.
              <para>- or -</para>
              <para><paramref name="name"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="name"/> is empty.
            </exception>
            <lastupdated>6/7/2012 5:07:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllSets(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait},System.String)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllSets(NationalInstruments.DataInfrastructure.TraitSet,System.String)"/>
            <lastupdated>6/7/2012 5:06:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllIndices(NationalInstruments.DataInfrastructure.TraitSet,System.String)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllSets(NationalInstruments.DataInfrastructure.TraitSet,System.String)"/>
            <lastupdated>6/7/2012 5:06:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllIndices(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait},System.String)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetAllSets(NationalInstruments.DataInfrastructure.TraitSet,System.String)"/>
            <lastupdated>6/7/2012 5:06:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:08:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:07:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.HasSameLocalStructure(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:07:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedIndicesTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:09:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedIndicesTrait.Name">
            <summary>
            Gets the name used to identify the indices.
            </summary>
            <value>The name used to identify the indices.</value>
            <lastupdated>6/7/2012 5:06:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedIndicesTrait.IndexSet">
            <summary>
            Gets the index values associated with the buffer.
            </summary>
            <value>The index values associated with the buffer.</value>
            <lastupdated>6/7/2012 5:06:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedIndicesTrait.Indices">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedIndicesTrait.NominalStructure">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.NamedValueTrait">
            <summary>
            Associates a named value with a range in a buffer.
            </summary>
            <remarks>
            Use <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> to add a named piece of metadata to a buffer,
            rather than creating a custom <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> type to contain the information.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 10:59:11 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedValueTrait.Interval">
            <summary>Indicates the interval of the data in the associated buffer.</summary>
            <seealso cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)"/>
            <lastupdated>6/7/2012 5:09:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedValueTrait.Stride">
            <summary>Indicates the stride of the data in the associated buffer.</summary>
            <seealso cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)"/>
            <lastupdated>6/7/2012 5:09:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedValueTrait.Index">
            <summary>Indicates the index of the associated buffer.</summary>
            <lastupdated>6/7/2012 5:09:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedValueTrait.NewSamplesCount">
            <summary>Indicates the number of new samples that have been added to the associated buffer.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedValueTrait.LargestSampleSize">
            <summary>Indicates the size of the largest sample in the associated buffer.</summary>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.NamedValueTrait.Metadata">
            <summary>Indicates additional metadata properties associated with the data source.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> class with the specified name and value.
            </summary>
            <param name="name">An identifier for the value.</param>
            <param name="value">The value to associate with the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/7/2012 5:11:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.#ctor(NationalInstruments.DataInfrastructure.TraitScope,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> class with the specified scope, name, and value.
            </summary>
            <param name="scope">The scope over which the value applies.</param>
            <param name="name">An identifier for the value.</param>
            <param name="value">The value to associate with the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="name"/> is <see langword="null"/>.
              <para>- or -</para>
              <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para><paramref name="scope"/> is empty.</para>
              <para>- or -</para>
              <para><paramref name="scope"/> is not a range or buffer scope.</para>
              <para>- or -</para>
              <para><paramref name="name"/> is empty.</para>
            </exception>
            <lastupdated>6/7/2012 5:11:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:11:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.GetNamedTrait(NationalInstruments.DataInfrastructure.TraitSet,NationalInstruments.DataInfrastructure.TraitScope,System.String)">
            <summary>
            Retrieves the trait from the set with the specified name and scope.
            </summary>
            <param name="traits">The set of traits to search.</param>
            <param name="scope">The scope of the trait to find.</param>
            <param name="name">The name of the trait to find.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> with the given <paramref name="scope"/> and <paramref name="name"/>,
            or <see langword="null"/> if the trait was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <para><paramref name="traits"/> is <see langword="null"/>.</para>
              <para>- or -</para>
              <para><paramref name="name"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="name"/> is empty.
            </exception>
            <lastupdated>6/7/2012 5:10:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.GetNamedValue(NationalInstruments.DataInfrastructure.TraitSet,NationalInstruments.DataInfrastructure.TraitScope,System.String)">
            <summary>
            Retrieves the trait value from the set with the specified name and scope.
            </summary>
            <param name="traits">The set of traits to search.</param>
            <param name="scope">The scope of the trait to find.</param>
            <param name="name">The name of the trait to find.</param>
            <returns>
            The <see cref="P:NationalInstruments.DataInfrastructure.NamedValueTrait.Value"/> from the <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> with the given <paramref name="scope"/> and <paramref name="name"/>,
            or <see langword="null"/> if the trait was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <para><paramref name="traits"/> is <see langword="null"/>.</para>
              <para>- or -</para>
              <para><paramref name="name"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="name"/> is empty.
            </exception>
            <lastupdated>2013-06-07 11:21:47 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.GetNamedTraits(NationalInstruments.DataInfrastructure.TraitSet,System.String)">
            <summary>
            Retrieves all of the traits from the set with the specified name.
            </summary>
            <param name="traits">The set of traits to search.</param>
            <param name="name">The name of the trait to find.</param>
            <returns>
            A collection of <see cref="T:NationalInstruments.DataInfrastructure.NamedValueTrait"/> objects with the given <paramref name="name"/>,
            or an empty collection if no trait was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="traits"/> is <see langword="null"/>.
              <para>- or -</para>
              <para><paramref name="name"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="name"/> is empty.
            </exception>
            <lastupdated>6/7/2012 5:11:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.LocalEquals(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:11:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.GetLocalHashCode">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:09:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.HasSameLocalStructure(NationalInstruments.DataInfrastructure.Trait)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:11:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.NamedValueTrait.SliceCore(NationalInstruments.DataInfrastructure.TraitScope,System.Int32)">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:11:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedValueTrait.Name">
            <summary>
            Gets the name used to identify the value.
            </summary>
            <value>The name used to identify the value.</value>
            <lastupdated>6/7/2012 5:09:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedValueTrait.Value">
            <summary>
            Gets the value associated with the buffer.
            </summary>
            <value>The value associated with the buffer.</value>
            <lastupdated>6/7/2012 5:09:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.NamedValueTrait.NominalStructure">
            <inheritdoc/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.RationalInt32">
            <summary>
            Represents a rational number.
            </summary>
            <remarks>
            The <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value type represents rational numbers ranging from positive 2,147,483,647 to negative 2,147,483,648.
            The <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value type is appropriate for numeric calculations requiring exact representations of fractional values.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 11:01:25 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> struct with the specified numerator and default denominator.
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <lastupdated>6/9/2012 10:26:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> struct with the specified numerator and denominator.
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="denominator"/> is zero.
            </exception>
            <lastupdated>6/9/2012 10:26:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.ToString">
            <inheritdoc/>
            <lastupdated>6/9/2012 10:26:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.IsNormalized(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Gets a value indicating whether the <see cref="P:NationalInstruments.DataInfrastructure.RationalInt32.Numerator"/> and <see cref="P:NationalInstruments.DataInfrastructure.RationalInt32.Denominator"/> of
            the rational value are in their most reduced form.
            </summary>
            <param name="value">A rational number.</param>
            <returns>
                <see langword="true"/> if <see cref="P:NationalInstruments.DataInfrastructure.RationalInt32.Numerator"/> and <see cref="P:NationalInstruments.DataInfrastructure.RationalInt32.Denominator"/> are in their most reduced form;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>6/9/2012 10:21:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Normalize(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a normalized rational value equivalent to the specified value.
            </summary>
            <param name="value">A rational number.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> equivalent to the specified value such that the denominator is positive
            and the numerator and denominator do not share any common factors.
            </returns>
            <exception cref="T:System.OverflowException">
            Normalization results in a value greater than <see cref="F:NationalInstruments.DataInfrastructure.RationalInt32.MaxValue"/> or less than <see cref="F:NationalInstruments.DataInfrastructure.RationalInt32.MinValue"/>.
            </exception>
            <lastupdated>6/9/2012 10:23:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Implicit(System.Int32)~NationalInstruments.DataInfrastructure.RationalInt32">
            <summary>
            Creates a <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> from an integer value.
            </summary>
            <param name="value">The numerator of the rational number.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> with the numerator specified by <paramref name="value"/> and a denominator of 1.</returns>
            <lastupdated>6/9/2012 10:21:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Explicit(System.Double)~NationalInstruments.DataInfrastructure.RationalInt32">
            <summary>
            Creates a <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> from a floating point value.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> approximation of the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.OverflowException">
                <paramref name="value"/> is less than <see cref="F:NationalInstruments.DataInfrastructure.RationalInt32.MinValue"/> or greater than <see cref="F:NationalInstruments.DataInfrastructure.RationalInt32.MaxValue"/>.
            </exception>
            <lastupdated>6/9/2012 10:21:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Explicit(NationalInstruments.DataInfrastructure.RationalInt32)~System.Int32">
            <summary>
            Creates an <see cref="T:System.Int32"/> from a rational value.
            </summary>
            <param name="value">A rational number.</param>
            <returns>An <see cref="T:System.Int32"/> with a value approximately equivalent to <paramref name="value"/>.</returns>
            <lastupdated>6/9/2012 10:20:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Explicit(NationalInstruments.DataInfrastructure.RationalInt32)~System.Decimal">
            <summary>
            Creates a <see cref="T:System.Decimal"/> from a rational value.
            </summary>
            <param name="value">A rational number.</param>
            <returns>A <see cref="T:System.Decimal"/> with a value equivalent to <paramref name="value"/>.</returns>
            <lastupdated>6/9/2012 10:20:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Explicit(NationalInstruments.DataInfrastructure.RationalInt32)~System.Double">
            <summary>
            Creates a <see cref="T:System.Double"/> from a rational value.
            </summary>
            <param name="value">A rational number.</param>
            <returns>A <see cref="T:System.Double"/> with a value equivalent to <paramref name="value"/>.</returns>
            <lastupdated>6/9/2012 10:20:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.RationalInt32.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <lastupdated>6/9/2012 10:17:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.RationalInt32.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <lastupdated>6/9/2012 10:17:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.RationalInt32.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
            <lastupdated>6/9/2012 10:17:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.RationalInt32.One">
            <summary>
            Represents the number one (1).
            </summary>
            <lastupdated>6/9/2012 10:17:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.RationalInt32.MinusOne">
            <summary>
            Represents the number negative one (-1).
            </summary>
            <lastupdated>6/9/2012 10:17:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Negate(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns the result of multiplying the specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value by negative one.
            </summary>
            <param name="value">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>
                <para>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> with the value of d, but the opposite sign.</para>
                <para>- or -</para>
                <para>Zero, if <paramref name="value"/> is zero.</para>
            </returns>
            <exception cref="T:System.OverflowException">
            The result value is greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:22:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Inverse(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns the result of dividing one by the specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value.
            </summary>
            <param name="value">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> with the inverse value of <paramref name="value"/>.</returns>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MinValue or greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:21:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Add(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Adds two specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> values.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value that is the sum of <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="left"/> and <paramref name="right"/> is less than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MinValue or greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:17:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Subtract(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Subtracts one specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value from another.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> result of subtracting <paramref name="right"/> from <paramref name="left"/>.</returns>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MinValue or greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:26:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Multiply(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Multiplies two specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> values.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> that is the result of multiplying <paramref name="left"/> and <paramref name="right"/>.</returns>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MinValue or greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:22:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Divide(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Divides two specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> values.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> that is the result of dividing <paramref name="left"/> by <paramref name="right"/>.</returns>
            <exception cref="T:System.DivideByZeroException">
                <paramref name="right"/> is zero.
            </exception>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MinValue or greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:18:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_UnaryPlus(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns the value of the <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="value">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>The value of the operand.</returns>
            <lastupdated>6/9/2012 10:25:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_UnaryNegation(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns the result of multiplying the specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> value by negative one.
            </summary>
            <param name="value">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>
                <para>A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> with the value of <paramref name="value"/>, but the opposite sign.</para>
                <para>- or -</para>
                <para>Zero, if <paramref name="value"/> is zero.</para>
            </returns>
            <exception cref="T:System.OverflowException">
            The result value is greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:24:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Increment(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Increments the <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> operand by 1.
            </summary>
            <param name="value">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>The value of <paramref name="value"/> incremented by 1.</returns>
            <exception cref="T:System.OverflowException">
            The return value is greater than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MaxValue.
            </exception>
            <lastupdated>6/9/2012 10:25:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Decrement(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Decrements the <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> operand by 1.
            </summary>
            <param name="value">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns>The value of <paramref name="value"/> decremented by 1.</returns>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.MinValue.
            </exception>
            <lastupdated>6/9/2012 10:24:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Addition(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Add(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Add(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <lastupdated>6/9/2012 10:25:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Subtraction(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Subtract(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Subtract(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <lastupdated>6/9/2012 10:24:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Multiply(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Multiply(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Multiply(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <lastupdated>6/9/2012 10:24:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Division(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Divide(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.RationalInt32.Divide(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <lastupdated>6/9/2012 10:24:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Equals(System.Object)">
            <inheritdoc/>
            <lastupdated>6/9/2012 10:18:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.GetHashCode">
            <inheritdoc/>
            <lastupdated>6/9/2012 10:21:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.Equals(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value that indicates whether this object is equal to the specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <param name="other">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> to compare with this object.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same value as this object; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:18:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Equality(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> represent the same value; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:25:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_Inequality(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> represent different values; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:23:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.CompareTo(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Compares this instance to a specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.
            </summary>
            <param name="other">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
            <lastupdated>6/9/2012 10:18:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_LessThan(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> is less than another specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:25:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_LessThanOrEqual(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> is less than or equal to another specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:25:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_GreaterThan(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> is greater than another specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:26:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.RationalInt32.op_GreaterThanOrEqual(NationalInstruments.DataInfrastructure.RationalInt32,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> is greater than or equal to another specified <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/>.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.RationalInt32"/> object.</param>
            <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:26:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.RationalInt32.Numerator">
            <summary>
            Gets the numerator of the rational number.
            </summary>
            <value>The numerator of the rational number.</value>
            <lastupdated>6/9/2012 10:17:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.RationalInt32.Denominator">
            <summary>
            Gets the denominator of the rational number.
            </summary>
            <value>The denominator of the rational number.</value>
            <lastupdated>6/9/2012 10:17:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.ScientificUnit">
            <summary>
            Represents units following the SI standard.
            </summary>
            <remarks>
            The <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> class contains members representing many of the common units in the SI standard.
            <para>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Unit.ToString"/> and <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.TryParse(System.String,NationalInstruments.DataInfrastructure.ScientificUnit@)"/> methods to convert
            between the string and object representation of SI units.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.ChangePrefix(NationalInstruments.DataInfrastructure.SIPrefix)"/>, <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.RaiseToPower(NationalInstruments.DataInfrastructure.RationalInt32)"/>, <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.Multiply(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)"/>, and <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.Divide(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)"/> methods
            to create new compound units from existing values.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetFormula"/> method to examine the structure of compound SI units.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/8/2012 10:57:23 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.Unit">
            <summary>
            Represents a unit of measure for a sample value.
            </summary>
            <remarks>
            A unit defines the measurement system used to interpret a measured value,
            and allows for conversion of values between different measurement systems.
            <para>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.Unit.TryConvert``1(NationalInstruments.DataInfrastructure.Unit,``0,``0@)"/> to convert a single value to another unit, or use the
            <see cref="M:NationalInstruments.DataInfrastructure.Unit.GetConverter``1(NationalInstruments.DataInfrastructure.Unit)"/> method to perform conversions on multiple values.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/8/2012 3:31:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> class.
            </summary>
            <lastupdated>6/9/2012 10:03:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.CanConvert``1(NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Determines whether a data value can be converted from one unit to another.
            </summary>
            <typeparam name="TData">The type of data to convert.</typeparam>
            <param name="to">The unit to convert to.</param>
            <returns>
                <see langword="true"/> if values of type <typeparamref name="TData"/> can be converted to unit <paramref name="to"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <seealso cref="P:NationalInstruments.DataInfrastructure.IUnitConverter`1.CanConvert"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Unit.GetConverter``1(NationalInstruments.DataInfrastructure.Unit)"/>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="to"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/9/2012 9:38:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.TryConvert``1(NationalInstruments.DataInfrastructure.Unit,``0,``0@)">
            <summary>
            Converts a value from this unit to a value of another unit.
            </summary>
            <typeparam name="TData">The type of data to convert.</typeparam>
            <param name="to">The unit to convert to.</param>
            <param name="value">A data value.</param>
            <param name="result"><paramref name="value"/> in the unit <paramref name="to"/>, if the conversion succeeded.</param>
            <returns>
                <see langword="true"/> if <paramref name="value"/> of type <typeparamref name="TData"/> was successfully converted to unit <paramref name="to"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <seealso cref="M:NationalInstruments.DataInfrastructure.IUnitConverter`1.TryConvert(`0,`0@)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.Unit.GetConverter``1(NationalInstruments.DataInfrastructure.Unit)"/>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="to"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/9/2012 10:03:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.GetConverter``1(NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Returns a converter object for converting values between this unit and another unit.
            </summary>
            <typeparam name="TData">The type of data to convert.</typeparam>
            <param name="to">The unit to convert to.</param>
            <returns>An <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> object for converting values between this unit and another unit.</returns>
            <remarks>
            Performs a best-fit search for a converter among those available on this unit and the given <paramref name="to"/> unit.
            </remarks>
            <seealso cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="to"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/9/2012 9:39:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.CreateConverter``1(NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Creates a converter object for converting values between this unit and another unit.
            </summary>
            <typeparam name="TData">The type of data to convert.</typeparam>
            <param name="to">The unit to convert to.</param>
            <returns>
            An <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> object, or <see langword="null"/> if conversion is not supported.
            </returns>
            <lastupdated>6/9/2012 9:38:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.ToString">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            <lastupdated>6/9/2012 9:41:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            <lastupdated>6/9/2012 9:41:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.IFormatProvider)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            <lastupdated>6/9/2012 9:41:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            <remarks>
            The following standard format arguments are supported by all units:
            <image src="Unit_ToString.png"/>
            </remarks>
            <exception cref="T:System.FormatException">
                <paramref name="format"/> is not a valid format argument.
            </exception>
            <lastupdated>6/9/2012 10:00:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.ToStringCore(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            <summary>
            Implements the <see cref="M:System.Object.ToString"/> method.
            </summary>
            <remarks>
            If <see langword="null"/> is returned, a <see cref="T:System.FormatException"/> is thrown for the unrecognized <paramref name="format"/>.
            </remarks>
            <lastupdated>6/9/2012 10:01:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.MatchStandardFormatArgument``1(System.String,``0,``0,``0)">
            <summary>
            Matches the format argument to <see cref="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String)"/> against the standard unit format arguments
            and returns the corresponding value.
            </summary>
            <typeparam name="T">The type of result to return from the match.</typeparam>
            <param name="format">The format argument to <see cref="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String)"/>.</param>
            <param name="symbol">The value to return for a <see cref="P:NationalInstruments.DataInfrastructure.Unit.Symbol"/> format argument.</param>
            <param name="name">The value to return for a singular <see cref="P:NationalInstruments.DataInfrastructure.Unit.Name"/> format argument.</param>
            <param name="pluralName">The value to return for a <see cref="P:NationalInstruments.DataInfrastructure.Unit.PluralName"/> format argument.</param>
            <returns>
                <para><paramref name="symbol"/>, if <paramref name="format"/> is a symbol argument.</para>
                <para><paramref name="name"/>, if <paramref name="format"/> is a singular name argument.</para>
                <para><paramref name="pluralName"/>, if <paramref name="format"/> is a plural name argument.</para>
                <para>Otherwise, the default value of <typeparamref name="T"/>, if format is not a recognized string format argument.</para>
            </returns>
            <lastupdated>6/9/2012 9:40:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.Equals(System.Object)">
            <inheritdoc/>
            <lastupdated>6/9/2012 9:38:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.GetHashCode">
            <inheritdoc/>
            <lastupdated>6/9/2012 9:39:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.Equals(NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Returns a value that indicates whether this object is equal to the specified <see cref="T:NationalInstruments.DataInfrastructure.Unit"/>.
            </summary>
            <param name="other">A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> to compare with this object.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same value as this object; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 9:38:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.EqualsCore(NationalInstruments.DataInfrastructure.Unit)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Unit.Equals(NationalInstruments.DataInfrastructure.Unit)"/>
            <summary>
            Implements the <see cref="M:NationalInstruments.DataInfrastructure.Unit.Equals(NationalInstruments.DataInfrastructure.Unit)"/> method.
            </summary>
            <lastupdated>6/9/2012 9:38:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.GetHashCodeCore">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.Unit.GetHashCode"/>
            <summary>
            Implements the <see cref="M:NationalInstruments.DataInfrastructure.Unit.GetHashCode"/> method.
            </summary>
            <lastupdated>6/9/2012 9:39:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.op_Equality(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> represent the same value; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 9:41:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.Unit.op_Inequality(NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Returns a value that indicates whether two specified <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/>.</param>
            <returns><see langword="true"/> if <paramref name="left"/> and <paramref name="right"/> represent different values; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 9:40:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Unit.None">
            <summary>
            Gets a <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> that represents a unitless value.
            </summary>
            <value>A <see cref="T:NationalInstruments.DataInfrastructure.Unit"/> that represents a unitless value.</value>
            <remarks>
            Any unit can be converted to or from <see cref="P:NationalInstruments.DataInfrastructure.Unit.None"/>.
            </remarks>
            <lastupdated>6/9/2012 9:37:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Unit.Symbol">
            <summary>
            Gets the symbolic string representation of the unit.
            </summary>
            <value>The symbolic string representation of the unit.</value>
            <remarks>
            Uses the result of <see cref="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String,System.IFormatProvider)"/> with the <c>"symbol"</c> format argument and default culture.
            </remarks>
            <lastupdated>6/9/2012 9:37:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Unit.Name">
            <summary>
            Gets the singular name representation of the unit.
            </summary>
            <value>The singular name representation of the unit.</value>
            <remarks>
            Uses the result of <see cref="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String,System.IFormatProvider)"/> with the <c>"singular"</c> format argument and default culture.
            </remarks>
            <lastupdated>6/9/2012 9:37:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.Unit.PluralName">
            <summary>
            Gets the plural name representation of the unit.
            </summary>
            <value>The plural name representation of the unit.</value>
            <remarks>
            Uses the result of <see cref="M:NationalInstruments.DataInfrastructure.Unit.ToString(System.String,System.IFormatProvider)"/> with the <c>"plural"</c> format argument and default culture.
            </remarks>
            <lastupdated>6/9/2012 9:37:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.ChangePrefix(NationalInstruments.DataInfrastructure.SIPrefix)">
            <summary>
            Returns a new named unit with the specified SI prefix.
            </summary>
            <param name="prefix">The prefix to apply to the unit.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> with a <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix"/> of <paramref name="prefix"/>.</returns>
            <remarks>Prefix can only be assigned to named units.</remarks>
            <seealso cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.IsNamedUnit"/>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <paramref name="prefix"/> is not a valid <see cref="T:NationalInstruments.DataInfrastructure.SIPrefix"/> enum value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.IsNamedUnit"/> returns <see langword="false"/>.
                <para>- or -</para>
                <para>Unit is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.</para>
            </exception>
            <seealso cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix"/>
            <lastupdated>6/8/2012 11:00:08 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.RaiseToPower(NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Returns a new unit with the specified power applied.
            </summary>
            <param name="power">The exponent to apply to the unit.</param>
            <returns>
            A named <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> with a <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power"/> of <paramref name="power"/>,
            or a compound <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> with <paramref name="power"/> distributed among its components.
            </returns>
            <remarks>An argument of zero results in a return value of <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.One"/>.</remarks>
            <exception cref="T:System.InvalidOperationException">
              Unit is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.
            </exception>
            <seealso cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power"/>
            <lastupdated>6/8/2012 11:04:06 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetComponents">
            <summary>
            Returns the units that comprise this derived unit, or returns an empty collection if it is an unmodified base unit.
            </summary>
            <returns>The components of the <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/>, without any properties on the unit applied to the components.</returns>
            <example>
            Joule returns a collection containing "N" and "m".
            Kilometer returns an collection containing "m".
            Meter returns an empty collection.
            </example>
            <remarks>
            The returned collection contains the "natural definition" of the unit, without any of the prefix or power properties on the unit applied.
            For example, a Joule is defined as a Newton Meter, and the components contains "N" and "m".
            Modified units (like "kJ" or "J^2")  have as components just the unmodified unit ("J").
            <para>For derived units that are composed of base units, <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetComponents"/> and <see cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetFormula"/> return the same result.</para>
            </remarks>
            <lastupdated>6/8/2012 11:02:13 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetFormula">
            <summary>
            Returns the base units that comprise this derived unit, or returns the unit itself if it is composed of a single base unit.
            </summary>
            <returns>The formula of the <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/>, in terms of base units.</returns>
            <example>
            Decomposing Newton returns a collection containing "m", "kg", and "s^-2".
            Decomposing Meter returns a collection containing "m" itself.
            </example>
            <remarks>
            Multiplying the units in the formula collection will return a unit equivalent to the original (e.g., "N == m * kg * s^-2").
            <para>For units that are not in normalized form, base units can appear multiple times (e.g., Radian decomposes to "m", "m^-1").</para>
            </remarks>
            <lastupdated>6/8/2012 11:02:57 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.Multiply(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)">
            <summary>
            Combines the specified units into an equivalent derived unit.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> that is the result of multiplying <paramref name="left"/> and <paramref name="right"/>.</returns>
            <example>Multiplying <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Newton"/> by <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Meter"/> will return a unit equivalent to <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Joule"/>.</example>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="left"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="right"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="left"/> is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.
                <para>- or -</para>
                <para><paramref name="right"/> is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.</para>
            </exception>
            <lastupdated>6/8/2012 11:03:26 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.Divide(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)">
            <summary>
            Combines the specified units into an equivalent derived unit.
            </summary>
            <param name="left">A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/>.</param>
            <param name="right">A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/>.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> that is the result of dividing <paramref name="left"/> by <paramref name="right"/>.</returns>
            <example>Dividing <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Watt"/> by <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Ampere"/> returns a unit equivalent to <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Volt"/>.</example>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="left"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="right"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="left"/> is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.
                <para>- or -</para>
                <para><paramref name="right"/> is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius"/>.</para>
            </exception>
            <lastupdated>6/9/2012 8:59:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.op_Multiply(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.Multiply(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.Multiply(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)"/>
            <lastupdated>6/8/2012 11:03:32 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.op_Division(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.Divide(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)"/>
            <seealso cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.Divide(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)"/>
            <lastupdated>6/8/2012 11:03:36 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.ToStringCore(System.String,System.IFormatProvider)">
            <inheritdoc/>
            <lastupdated>6/8/2012 11:04:12 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.TryParse(System.String,System.IFormatProvider,NationalInstruments.DataInfrastructure.ScientificUnit@)">
            <summary>
            Converts the string representation of a <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> in a culture-specific format to its SI unit equivalent.
            </summary>
            <param name="input">A string containing a unit to convert.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <param name="unit">
            When this method returns, contains the SI unit equivalent to the unit contained in <paramref name="input"/>,
            if the conversion succeeded, or <see langword="null"/> if the conversion failed.
            </param>
            <returns><see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/8/2012 11:04:42 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.TryParse(System.String,NationalInstruments.DataInfrastructure.ScientificUnit@)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.TryParse(System.String,System.IFormatProvider,NationalInstruments.DataInfrastructure.ScientificUnit@)"/>
            <lastupdated>6/8/2012 11:04:47 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.Parse(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.TryParse(System.String,System.IFormatProvider,NationalInstruments.DataInfrastructure.ScientificUnit@)"/>
            <returns>The <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> equivalent to the unit contained in <paramref name="input"/>.</returns>
            <lastupdated>6/8/2012 11:03:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.Parse(System.String)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.TryParse(System.String,System.IFormatProvider,NationalInstruments.DataInfrastructure.ScientificUnit@)"/>
            <returns>The <see cref="T:NationalInstruments.DataInfrastructure.ScientificUnit"/> equivalent to the unit contained in <paramref name="input"/>.</returns>
            <lastupdated>6/8/2012 11:03:40 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.CreateConverter``1(NationalInstruments.DataInfrastructure.Unit)">
            <inheritdoc/>
            <lastupdated>6/8/2012 11:00:21 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.Equals(NationalInstruments.DataInfrastructure.ScientificUnit)">
            <inheritdoc/>
            <lastupdated>6/8/2012 11:01:10 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.EqualsCore(NationalInstruments.DataInfrastructure.Unit)">
            <inheritdoc/>
            <lastupdated>6/8/2012 11:01:15 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetHashCodeCore">
            <inheritdoc/>
            <lastupdated>6/8/2012 11:03:03 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.IsBaseNamedUnit(NationalInstruments.DataInfrastructure.ScientificUnit.NamedUnit)">
            <summary>Determines whether the specified named unit is one of the seven named base units.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetNamedUnitPrefix(NationalInstruments.DataInfrastructure.ScientificUnit.NamedUnit)">
            <summary>Gets the default prefix for the specified named unit.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.IsUnmodifiedNamedUnit(NationalInstruments.DataInfrastructure.ScientificUnit.NamedUnit,NationalInstruments.DataInfrastructure.SIPrefix,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>Determines whether the given prefix and power match those of the specified unmodified named unit.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.CreateNamedUnit(NationalInstruments.DataInfrastructure.ScientificUnit.NamedUnit)">
            <summary>Creates the specified named unit (initializer method for NamedUnits cache).</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.CreatePrecomposedUnit(NationalInstruments.DataInfrastructure.ScientificUnit.PrecomposedUnit)">
            <summary>Creates the specified pre-composed compound unit (initializer method for PrecomposedUnits cache).</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetComponentsForModifiedUnit">
            <summary>Returns the components to use for a named unit with a modified prefix or suffix.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.CompareNamedUnits(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)">
            <summary>Performs a lexicographic unit comparison, based on name, power, and prefix.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.CreateFormula(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.ScientificUnit},NationalInstruments.DataInfrastructure.SIPrefix,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>Creates the formula for a compound derived unit.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.SimplifyComponents(System.Collections.Generic.List{NationalInstruments.DataInfrastructure.ScientificUnit},NationalInstruments.DataInfrastructure.SIPrefix,NationalInstruments.DataInfrastructure.RationalInt32)">
            <summary>
            Reduces groups of named units to their simplest terms ("m*m^2" => "m^3", "m^2/m" => "m"),
            retaining a single denormalized term if necessary ("m/m", "mm/m"),
            and applies prefix and power from outer unit as appropriate ("(N m)^2" => "N^2 m^2", "k(N m)" => "kN m").
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.SimplifyComponents(System.Collections.Generic.List{NationalInstruments.DataInfrastructure.ScientificUnit})">
            <summary>
            Reduces groups of named units to their simplest terms ("m*m^2" => "m^3", "m^2/m" => "m"),
            retaining a single denormalized term if necessary ("m/m", "mm/m").
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.CreateConverter``1(NationalInstruments.DataInfrastructure.ScientificUnit,NationalInstruments.DataInfrastructure.ScientificUnit)">
            <summary>
            Creates a PowerOffsetUnitConverter converter for converting values between the two units,
            or null if the units are not compatible.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetConversionPowers(System.Collections.ObjectModel.ReadOnlyCollection{NationalInstruments.DataInfrastructure.ScientificUnit},NationalInstruments.DataInfrastructure.RationalInt32@,NationalInstruments.DataInfrastructure.RationalInt32[]@)">
            <summary>
            Returns the power of ten needed to convert the given formula to one without unit prefixes,
            and the powers on the formula units.
            </summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.StripCapitalization(System.String@)">
            <summary>Removes the initial capital from a format string.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.AppendUnitString(System.Text.StringBuilder,NationalInstruments.DataInfrastructure.ScientificUnit.StandardFormat,NationalInstruments.DataInfrastructure.SIPrefix,NationalInstruments.DataInfrastructure.ScientificUnit.NamedUnit,NationalInstruments.DataInfrastructure.RationalInt32,System.Boolean)">
            <summary>Adds the string representation of a named unit.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.AttemptParse(System.String,System.Globalization.CultureInfo)">
            <summary>Parses a scientific unit from its string representation.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.UpdateWorkingSet(System.Collections.Generic.List{NationalInstruments.DataInfrastructure.ScientificUnit.MatchInfo},System.Collections.Generic.List{NationalInstruments.DataInfrastructure.ScientificUnit.MatchInfo},System.Char,System.Int32)">
            <summary>Updates the collection of potential unit matches while parsing.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetNextCharacter(System.String,System.Int32@)">
            <summary>Moves to the next character in the input string.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.GetCurrentCharacter(System.String,System.Int32)">
            <summary>Gets the current character in the input string, or null of the end of the string has been reached.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.EqualCharacter(System.String,System.Int32,System.String,System.Int32,System.Globalization.CultureInfo)">
            <summary>Determines whether a character in the first string is equal to a character in the second string at the given positions.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.EqualSubstring(System.String,System.Int32,System.String,System.Globalization.CultureInfo)">
            <summary>Determines whether part of the first string is equal to the specified substring at the given position.</summary>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.ScientificUnit.IsValidNextMatch(NationalInstruments.DataInfrastructure.ScientificUnit.ParseKind,NationalInstruments.DataInfrastructure.ScientificUnit.ParseKind)">
            <summary>Determines whether a given kind of unit part can follow the current part.</summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.IsBaseUnit">
            <summary>
            Gets a value indicating whether the unit is one of the seven SI base units.
            </summary>
            <value>A value indicating whether the unit is one of the seven SI base units.</value>
            <returns>
                <see langword="true"/> if this unit is <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Meter"/>, <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Kilogram"/>, <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Second"/>,
            <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Ampere"/>, <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Kelvin"/>, <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Mole"/>, or <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Candela"/>;
            otherwise, returns <see langword="false"/>.
            </returns>
            <remarks>
            Returns <see langword="false"/> for units with a custom <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix"/> or <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power"/>
            (e.g., "meters" is a base unit; "millimeters" and "meters squared" are not base units).
            </remarks>
            <lastupdated>6/8/2012 10:57:48 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.IsNamedUnit">
            <summary>
            Gets a value indicating whether the unit is based on one of the pre-defined SI derived units with a special name.
            </summary>
            <value>A value indicating whether the unit is based on one of the pre-defined SI derived units with a special name.</value>
            <remarks>
            Returns <see langword="true"/> for named units with a custom <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix"/> or <see cref="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power"/>, but not for custom unit combinations
            (e.g., "millinewton" and "newtons squared" are named units based on "newton", but "newton meter" is not).
            </remarks>
            <lastupdated>6/8/2012 10:58:42 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Prefix">
            <summary>
            Gets the SI prefix for the unit.
            </summary>
            <value>The SI prefix for the unit.</value>
            <seealso cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.ChangePrefix(NationalInstruments.DataInfrastructure.SIPrefix)"/>
            <lastupdated>6/8/2012 10:59:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Power">
            <summary>
            Gets the exponent of the unit.
            </summary>
            <value>The exponent of the unit.</value>
            <remarks>
            If the unit is not a named unit, any power applied to the unit will be distributed among its components.
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.ScientificUnit.RaiseToPower(NationalInstruments.DataInfrastructure.RationalInt32)"/>
            <lastupdated>6/8/2012 10:58:55 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.NoComponents">
            <summary>Gets an empty collection of units.</summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Meter">
            <summary>Gets the SI base unit of length.</summary>
            <value>The SI unit meter (m).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Kilogram">
            <summary>Gets the SI base unit of mass.</summary>
            <value>The SI unit gram (g).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Second">
            <summary>Gets the SI base unit of time.</summary>
            <value>The SI unit second (s).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Ampere">
            <summary>Gets the SI base unit of electric current.</summary>
            <value>The SI unit ampere (A).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Kelvin">
            <summary>Gets the SI base unit of thermodynamic temperature.</summary>
            <value>The SI unit kelvin (K).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Mole">
            <summary>Gets the SI base unit of amount of substance.</summary>
            <value>The SI unit mole (mol).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Candela">
            <summary>Gets the SI base unit of luminous intensity.</summary>
            <value>The SI unit candela (cd).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.One">
            <summary>Gets the SI derived unit one (1).</summary>
            <value>The SI unit one (1).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Radian">
            <summary>Gets the SI unit of plane angle.</summary>
            <value>The SI unit radian (rad).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Hertz">
            <summary>Gets the SI unit of frequency.</summary>
            <value>The SI unit hertz (Hz).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Joule">
            <summary>Gets the SI unit of energy.</summary>
            <value>The SI unit joule (J).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Newton">
            <summary>Gets the SI unit of force.</summary>
            <value>The SI unit newton (N).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Ohm">
            <summary>Gets the SI unit of electric resistance.</summary>
            <value>The SI unit ohm (Ω).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Pascal">
            <summary>Gets the SI unit of pressure.</summary>
            <value>The SI unit pascal (Pa).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Volt">
            <summary>Gets the SI unit of electromotive force.</summary>
            <value>The SI unit volt (V).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.Watt">
            <summary>Gets the SI unit of power.</summary>
            <value>The SI unit watt (W).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.DegreeCelsius">
            <summary>Gets the SI unit of Celsius temperature.</summary>
            <value>The SI unit degree Celsius (°C).</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.MeterPerSecond">
            <summary>Gets the pre-composed SI unit of velocity.</summary>
            <value>The SI unit meter per second.</value>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.ScientificUnit.MeterPerSecondSquared">
            <summary>Gets the pre-composed SI unit of acceleration.</summary>
            <value>The SI unit meter per second squared.</value>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.ScientificUnit.ParseInfo">
            <summary>Represents information used to parse part of a unit symbol or name expression.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.ScientificUnit.MatchInfo">
            <summary>Represents an in-progress match.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.ScopeComparison">
            <summary>
            Represents different strategies for comparing two <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> instances.
            </summary>
            <lastupdated>6/9/2012 10:38:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.ScopeComparison.Equals">
            <summary>Determines whether one scope is exactly equal to another scope.</summary>
            <lastupdated>6/9/2012 10:38:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.ScopeComparison.Overlaps">
            <summary>Determines whether the values covered by one scope overlap the values covered by another scope.</summary>
            <lastupdated>6/9/2012 10:39:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.ScopeComparison.Contains">
            <summary>Determines whether one scope includes all the values covered by another scope.</summary>
            <lastupdated>6/9/2012 10:38:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.ScopeComparison.ContainedBy">
            <summary>Determines whether all the values covered by one scope are included by another scope.</summary>
            <lastupdated>6/9/2012 10:38:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.SequenceBufferPool">
            <summary>
            Creates buffers based on constant or generated sequences of values.
            </summary>
            <remarks>
            Sequence buffers calculate their samples as needed based on a set of starting values.
            This means no memory needs to be allocated up front to contain the samples in the buffer.
            <para>
            Use <see cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateConstantBuffer``1(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0)"/> to create a buffer containing a single constant value.
            Use the <see cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)"/> methods to create a buffer representing
            an increasing or decreasing sequence of values.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 10:59:35 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateConstantBuffer``1(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0)">
            <summary>Creates a buffer containing a single element, repeated the specified number of times.</summary>
            <typeparam name="TData">The data type of the buffer.</typeparam>
            <param name="size">The size of the buffer to create.</param>
            <param name="unit">The unit of measure of the data samples.</param>
            <param name="value">The sample to store in the buffer.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Size"/> of <paramref name="size"/> containing <paramref name="value"/>.
            </returns>
            <lastupdated>6/7/2012 5:39:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)">
            <summary>
            Creates a calculated interval buffer starting at the specified <see cref="T:System.Int32"/> value,
            followed by fixed <see cref="T:System.Int32"/> increments.
            </summary>
            <param name="size">The size of the buffer to create.</param>
            <param name="unit">The unit of measure of the data samples.</param>
            <param name="value">The first sample to store in the buffer.</param>
            <param name="increment">The increment between each stride of samples in the buffer.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Size"/> of <paramref name="size"/>
            starting at <paramref name="value"/> and increasing by <paramref name="increment"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="size"/> is less than zero.</para>
                <para>- or -</para>
                <para>The specified <paramref name="size"/>, <paramref name="value"/>, and <paramref name="increment"/> values would result in overflow.</para>
            </exception>
            <lastupdated>6/7/2012 5:41:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a calculated interval buffer starting at the specified <see cref="T:System.Int32"/> value,
            followed by fixed <see cref="T:System.Int32"/> increments at every stride length.
            </summary>
            <param name="size">The size of the buffer to create.</param>
            <param name="unit">The unit of measure of the data samples.</param>
            <param name="value">The first sample to store in the buffer.</param>
            <param name="increment">The increment between each stride of samples in the buffer.</param>
            <param name="stride">The number of samples at a particular value before <paramref name="increment"/> is added again.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Size"/> of <paramref name="size"/>
            starting at <paramref name="value"/> and increasing by <paramref name="increment"/> at <paramref name="stride"/> lengths.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="size"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="stride"/> is less than or equal to zero.</para>
                <para>- or -</para>
                <para>The specified <paramref name="size"/>, <paramref name="value"/>, <paramref name="increment"/>, and <paramref name="stride"/> values would result in overflow.</para>
            </exception>
            <lastupdated>6/7/2012 5:41:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Double,System.Double)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)"/>
            <summary>Creates a calculated interval buffer starting at the specified <see cref="T:System.Double"/> value, followed by fixed <see cref="T:System.Double"/> increments.</summary>
            <lastupdated>6/7/2012 5:40:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Double,System.Double,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32,System.Int32)"/>
            <summary>Creates a calculated interval buffer starting at the specified <see cref="T:System.Double"/> value, followed by fixed <see cref="T:System.Double"/> increments at every stride length.</summary>
            <lastupdated>6/7/2012 5:40:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.DateTime,System.TimeSpan)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)"/>
            <summary>Creates a calculated interval buffer starting at the specified <see cref="T:System.DateTime"/> value, followed by fixed <see cref="T:System.TimeSpan"/> increments.</summary>
            <lastupdated>6/7/2012 5:39:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.DateTime,System.TimeSpan,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32,System.Int32)"/>
            <summary>Creates a calculated interval buffer starting at the specified <see cref="T:System.DateTime"/> value, followed by fixed <see cref="T:System.TimeSpan"/> increments at every stride length.</summary>
            <lastupdated>6/7/2012 5:40:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32)"/>
            <summary>Creates a calculated interval buffer starting at the specified <see cref="T:NationalInstruments.PrecisionDateTime"/> value, followed by fixed <see cref="T:NationalInstruments.PrecisionTimeSpan"/> increments.</summary>
            <lastupdated>6/7/2012 5:41:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer(System.Int32,NationalInstruments.DataInfrastructure.Unit,System.Int32,System.Int32,System.Int32)"/>
            <summary>Creates a calculated interval buffer starting at the specified <see cref="T:NationalInstruments.PrecisionDateTime"/> value, followed by fixed <see cref="T:NationalInstruments.PrecisionTimeSpan"/> increments at every stride length.</summary>
            <lastupdated>6/7/2012 5:42:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.TryCreateIntervalBuffer``2(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer``3(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1,System.Int32)"/>
            <summary>
            Tries to call <see cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer``3(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1,System.Int32)"/> with the specified arguments and a stride of one.
            </summary>
            <returns>A calculated interval buffer, or <see langword="null"/> if an appropriate operations type could not be found.</returns>
            <lastupdated>6/7/2012 5:43:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.TryCreateIntervalBuffer``2(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1,System.Int32)">
            <inheritdoc cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer``3(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1,System.Int32)"/>
            <summary>
            Tries to call <see cref="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer``3(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1,System.Int32)"/> with the specified arguments.
            </summary>
            <returns>A calculated interval buffer, or <see langword="null"/> if an appropriate operations descriptor type could not be found.</returns>
            <lastupdated>6/7/2012 5:43:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.SequenceBufferPool.CreateIntervalBuffer``3(System.Int32,NationalInstruments.DataInfrastructure.Unit,``0,``1,System.Int32)">
            <summary>
            Creates a calculated interval buffer based on the specified data values and operations.
            </summary>
            <typeparam name="TData">The data type of the buffer.</typeparam>
            <typeparam name="TIncrement">The data type of the increment value.</typeparam>
            <typeparam name="TOperations">The descriptor type used to perform operations on <typeparamref name="TData"/> values.</typeparam>
            <param name="size">The size of the buffer to create.</param>
            <param name="unit">The unit of measure of the data samples.</param>
            <param name="value">The first sample to store in the buffer.</param>
            <param name="increment">The increment between each stride of samples in the buffer.</param>
            <param name="stride">The number of samples at a particular value before <paramref name="increment"/> is added again.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> with a <see cref="P:NationalInstruments.DataInfrastructure.Buffer`1.Size"/> of <paramref name="size"/>
            starting at <paramref name="value"/> and increasing by <paramref name="increment"/> at <paramref name="stride"/> lengths.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="size"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="stride"/> is less than or equal to zero.</para>
                <para>- or -</para>
                <para>The specified <paramref name="size"/>, <paramref name="value"/>, <paramref name="increment"/>, and <paramref name="stride"/> values would result in overflow.</para>
            </exception>
            <lastupdated>6/7/2012 5:42:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.SIPrefix">
            <summary>
            Represents the standard SI prefixes for base-10 multiples of units.
            </summary>
            <remarks>
            The value of each field is the exponent of the base-10 factor of that SI prefix, defined in section 3.1 of the SI brochure.
            </remarks>
            <lastupdated>6/9/2012 10:39:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Yotta">
            <summary>The SI prefix for 10<sup>24</sup>.</summary>
            <lastupdated>6/9/2012 10:41:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Zetta">
            <summary>The SI prefix for 10<sup>21</sup>.</summary>
            <lastupdated>6/9/2012 10:41:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Exa">
            <summary>The SI prefix for 10<sup>18</sup>.</summary>
            <lastupdated>6/9/2012 10:39:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Peta">
            <summary>The SI prefix for 10<sup>15</sup>.</summary>
            <lastupdated>6/9/2012 10:40:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Tera">
            <summary>The SI prefix for 10<sup>12</sup>.</summary>
            <lastupdated>6/9/2012 10:41:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Giga">
            <summary>The SI prefix for 10<sup>9</sup>.</summary>
            <lastupdated>6/9/2012 10:40:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Mega">
            <summary>The SI prefix for 10<sup>6</sup>.</summary>
            <lastupdated>6/9/2012 10:40:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Kilo">
            <summary>The SI prefix for 10<sup>3</sup>.</summary>
            <lastupdated>6/9/2012 10:40:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Hecto">
            <summary>The SI prefix for 10<sup>2</sup>.</summary>
            <lastupdated>6/9/2012 10:40:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Deca">
            <summary>The SI prefix for 10<sup>1</sup>.</summary>
            <lastupdated>6/9/2012 10:39:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.None">
            <summary>Indicates no SI prefix is in use.</summary>
            <lastupdated>6/9/2012 10:40:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Deci">
            <summary>The SI prefix for 10<sup>-1</sup>.</summary>
            <lastupdated>6/9/2012 10:39:52 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Centi">
            <summary>The SI prefix for 10<sup>-2</sup>.</summary>
            <lastupdated>6/9/2012 10:39:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Milli">
            <summary>The SI prefix for 10<sup>-3</sup>.</summary>
            <lastupdated>6/9/2012 10:40:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Micro">
            <summary>The SI prefix for 10<sup>-6</sup>.</summary>
            <lastupdated>6/9/2012 10:40:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Nano">
            <summary>The SI prefix for 10<sup>-9</sup>.</summary>
            <lastupdated>6/9/2012 10:40:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Pico">
            <summary>The SI prefix for 10<sup>-12</sup>.</summary>
            <lastupdated>6/9/2012 10:41:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Femto">
            <summary>The SI prefix for 10<sup>-15</sup>.</summary>
            <lastupdated>6/9/2012 10:40:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Atto">
            <summary>The SI prefix for 10<sup>-18</sup>.</summary>
            <lastupdated>6/9/2012 10:39:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Zepto">
            <summary>The SI prefix for 10<sup>-21</sup>.</summary>
            <lastupdated>6/9/2012 10:41:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.SIPrefix.Yocto">
            <summary>The SI prefix for 10<sup>-24</sup>.</summary>
            <lastupdated>6/9/2012 10:41:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitQueryOptions">
            <summary>
            Represents options used to find <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> instances in a <see cref="T:NationalInstruments.DataInfrastructure.TraitSet"/>.
            </summary>
            <remarks>
            Use the <see cref="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.FindTrait``1(NationalInstruments.DataInfrastructure.TraitScope)"/>, <see cref="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.FindTraits``1(NationalInstruments.DataInfrastructure.TraitScope)"/>, and <see cref="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateTrait``1"/>
            helper methods to create queries to find one, find many, or create missing traits.
            <para>
            Use <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType"/> to limit a query to a specific type of trait.
            Use <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope"/> and <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.ScopeComparison"/> to limit a query to a specific range.
            Use <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/> to optionally create an instance of a trait using the corresponding <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/>,
            if the trait is not found.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitQueryOptions)"/>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/11/2012 11:00:09 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.FindTrait``1(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> instance for finding a specific trait at the specified scope.
            </summary>
            <typeparam name="TTrait">The type of trait to find.</typeparam>
            <param name="scope">The scope to search for the trait.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> with <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType"/> set to <typeparamref name="TTrait"/>,
            <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope"/> set to <paramref name="scope"/>, and <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.ScopeComparison"/> set to <see cref="F:NationalInstruments.DataInfrastructure.ScopeComparison.Equals"/>.
            </returns>
            <lastupdated>6/7/2012 5:54:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.FindTraits``1(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> instance for finding traits under the specified scope.
            </summary>
            <typeparam name="TTrait">The type of trait to find.</typeparam>
            <param name="scope">The scope to search for the trait.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> with <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType"/> set to <typeparamref name="TTrait"/>,
            <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope"/> set to <paramref name="scope"/>, and <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.ScopeComparison"/> set to <see cref="F:NationalInstruments.DataInfrastructure.ScopeComparison.Contains"/>.
            </returns>
            <lastupdated>6/7/2012 5:55:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateTrait``1">
            <summary>
            Creates a <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> instance for finding or creating a specific trait in a buffer.
            </summary>
            <typeparam name="TTrait">The type of trait to create.</typeparam>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> with <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType"/> set to <typeparamref name="TTrait"/>,
            <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope"/> set to <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.BufferScope"/>, <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.ScopeComparison"/> set to <see cref="F:NationalInstruments.DataInfrastructure.ScopeComparison.Equals"/>,
            and <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/> set to <see langword="true"/>.
            </returns>
            <lastupdated>6/7/2012 5:54:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.ToString">
            <inheritdoc/>
            <lastupdated>6/7/2012 5:55:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitQueryOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.TraitQueryOptions"/> class.
            </summary>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> is used to create traits not included in the collection.
            </summary>
            <value>
            A value indicating whether a <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactory"/> is used to create traits not included in the collection.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            Only used when <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType"/> has an associated <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute"/>,
            and <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> is not set to <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>.
            </remarks>
            <lastupdated>6/7/2012 5:54:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.TraitType">
            <summary>Gets or sets the type of trait to search for.</summary><value>The type of trait to search for. The default value is the <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> type.</value><exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception><exception cref="T:System.ArgumentException"><paramref name="value"/> does not derive from <see cref="T:NationalInstruments.DataInfrastructure.Trait"/>.</exception><lastupdated>6/7/2012 5:52:57 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope">
            <summary>Gets or sets the scope to search in.</summary><value>The scope to search in. The default value is <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>.</value><lastupdated>6/7/2012 5:50:31 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.ScopeComparison">
            <summary>Gets or sets a value used to determine how <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope"/> is compared with each trait scope.</summary><value>A value used to determine how <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.Scope"/> is compared with each trait scope. The default value is <see cref="F:NationalInstruments.DataInfrastructure.ScopeComparison.Contains"/>.</value><exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
      <paramref name="value"/> is not a valid <see cref="T:NationalInstruments.DataInfrastructure.ScopeComparison"/> value.
    </exception><lastupdated>6/7/2012 5:51:16 PM</lastupdated><updatedby>National Instruments</updatedby><approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitScope">
            <summary>
            Represents the scope over which a <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> applies.
            </summary>
            <remarks>
                <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> is used to identify which samples in a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> a <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> applies to,
            as described in the table below.
                <para><image src="TraitScope.png"/></para>
                <para>
            Rather than creating multiple single-sample traits, many traits will use a range scope to indicate which samples have been examined,
            and a collection of sample indices to indicate which samples the trait applies to.
            Such traits include the <see cref="T:NationalInstruments.DataInfrastructure.ExtremeSamplesTrait"/> and the <see cref="T:NationalInstruments.DataInfrastructure.NamedIndicesTrait"/>.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/11/2012 1:37:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope">
            <summary>A scope that indicates a trait applies to the entire stream of data.</summary>
            <lastupdated>6/9/2012 10:28:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DataInfrastructure.TraitScope.BufferScope">
            <summary>A scope that indicates a trait applies to a buffer.</summary>
            <lastupdated>6/9/2012 10:28:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.#ctor(System.Int32)">
            <summary>
            Returns a scope that indicates a trait applies to a single sample.
            </summary>
            <param name="sampleIndex">The index of the sample covered by the scope.</param>
            <returns>A scope with an <see cref="P:NationalInstruments.DataInfrastructure.TraitScope.StartIndex"/> of <paramref name="sampleIndex"/> and a <see cref="P:NationalInstruments.DataInfrastructure.TraitScope.Length"/> of one.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleIndex"/> is less than zero.
            </exception>
            <lastupdated>6/9/2012 10:30:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.#ctor(System.Int32,System.Int32)">
            <summary>
            Returns a scope that indicates a trait applies to a range of samples.
            </summary>
            <param name="startIndex">The index of the first sample covered by the scope.</param>
            <param name="length">The number of samples covered by the scope.</param>
            <returns>A scope with an <see cref="P:NationalInstruments.DataInfrastructure.TraitScope.StartIndex"/> of <paramref name="startIndex"/> and a <see cref="P:NationalInstruments.DataInfrastructure.TraitScope.Length"/> of <paramref name="length"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is less than zero.
                <para>- or -</para>
                <para><paramref name="length"/> is less than zero.</para>
            </exception>
            <lastupdated>6/9/2012 10:31:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.ToString">
            <inheritdoc/>
            <lastupdated>6/9/2012 10:30:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Intersect(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Gets the intersection of two scopes, or an empty scope if the scopes do not overlap.
            </summary>
            <param name="left">A scope to intersect.</param>
            <param name="right">A scope to intersect.</param>
            <returns>The intersection of <paramref name="left"/> and <paramref name="right"/>, or an empty scope if the scopes do not overlap.</returns>
            <lastupdated>6/9/2012 10:30:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Cover(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Gets a scope covering all of the indices of two scopes.
            </summary>
            <remarks>
            The resulting scope will cover the entire range from the smallest index in both <paramref name="left"/> and <paramref name="right"/>
            to the smallest index in both <paramref name="left"/> and <paramref name="right"/>. This means that any gap between the two scopes
            will also be covered by the result.
            <para>
            For example, given a sample scope covering index <c>[1]</c> and a sample scope covering index <c>[5]</c>,
            the covering scope will be the range <c>[1-5]</c>, which also includes index values <c>2</c>, <c>3</c>, and <c>4</c>
            that were not in either of the input scopes.
            </para>
            </remarks>
            <param name="left">A scope to union.</param>
            <param name="right">A scope to union.</param>
            <returns>A scope covering all indices in both <paramref name="left"/> and <paramref name="right"/>.</returns>
            <lastupdated>6/9/2012 10:30:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Contains(System.Int32)">
            <summary>
            Determines whether a given sample index is contained within the current scope.
            </summary>
            <param name="sampleIndex">A sample index.</param>
            <returns><see langword="true"/> if <paramref name="sampleIndex"/> is contained in the current scope; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:30:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Contains(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Determines whether a given scope is contained within the current scope.
            </summary>
            <param name="scope">A scope to compare.</param>
            <returns><see langword="true"/> if <paramref name="scope"/> is contained in the current scope; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:30:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Overlaps(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Determines whether a given scope overlaps the current scope.
            </summary>
            <param name="scope">A scope to compare.</param>
            <returns><see langword="true"/> if <paramref name="scope"/> overlaps the current scope; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:30:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Compare(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.ScopeComparison)">
            <summary>
            Compares two scopes using the specified comparison strategy.
            </summary>
            <param name="left">A scope to compare.</param>
            <param name="right">A scope to compare.</param>
            <param name="scopeComparison">The comparison strategy to use.</param>
            <returns>
                <see langword="true"/> if <paramref name="left"/> matches <paramref name="right"/> according to <paramref name="scopeComparison"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>6/9/2012 10:30:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Equals(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.op_Equality(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.op_Inequality(NationalInstruments.DataInfrastructure.TraitScope,NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.DataInfrastructure.TraitScope"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitScope.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitScope.IsStreamScope">
            <summary>Gets a value indicating whether the scope is <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>.</summary>
            <value><see langword="true"/> if the scope is <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>; otherwise, <see langword="false"/>.</value>
            <lastupdated>6/9/2012 10:29:08 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitScope.IsBufferScope">
            <summary>Gets a value indicating whether the scope is <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.BufferScope"/>.</summary>
            <value><see langword="true"/> if the scope is <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.BufferScope"/>; otherwise, <see langword="false"/>.</value>
            <lastupdated>6/9/2012 10:28:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitScope.IsEmptyScope">
            <summary>Gets a value indicating whether the scope is empty.</summary>
            <value><see langword="true"/> if the scope is empty; otherwise, <see langword="false"/>.</value>
            <lastupdated>6/9/2012 10:28:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitScope.StartIndex">
            <summary>Gets the first sample index the scope covers.</summary>
            <value>The first sample index the scope covers, or <see langword="null"/> for <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>.</value>
            <lastupdated>6/9/2012 10:29:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitScope.Length">
            <summary>Gets the number of samples the scope covers, starting from <see cref="P:NationalInstruments.DataInfrastructure.TraitScope.StartIndex"/>.</summary>
            <value>The number of samples the scope covers, or <see langword="null"/> for <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/> and <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.BufferScope"/>.</value>
            <lastupdated>6/9/2012 10:29:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitScope.EndIndex">
            <summary>Gets the last sample index the scope covers.</summary>
            <value>The last sample index the scope covers, or <see langword="null"/> for <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.StreamScope"/>, <see cref="F:NationalInstruments.DataInfrastructure.TraitScope.BufferScope"/>, and empty scopes.</value>
            <lastupdated>6/9/2012 10:28:24 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSet">
            <summary>
            Represents a set of buffer metadata traits.
            </summary>
            <threadsafety safety="safe"/>
            <remarks>
            A trait set can contain a trait of a given type and scope only once. New traits not already in the set
            can be added (allowing the information contained in the trait to be calculated only once), but existing
            traits cannot be removed or replaced (depending on the method, doing so  returns <see langword="false"/>
            to indicate nothing changed, or returns a new set with the change).
            </remarks>
            <lastupdated>6/8/2012 1:55:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.Add(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Adds the specified trait to the set, if a trait of the same type and scope is not already included.
            </summary>
            <param name="trait">The trait to add.</param>
            <returns><see langword="true"/> if <paramref name="trait"/> was added to the set; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="trait"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/8/2012 1:56:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.UnionWith(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Adds each of the specified traits to the set, if one of the same type and scope is not already included.
            </summary>
            <remarks>
            Equivalent to calling <see cref="M:NationalInstruments.DataInfrastructure.TraitSet.Add(NationalInstruments.DataInfrastructure.Trait)"/> on each trait in the collection.
            </remarks>
            <param name="traits">A collection of <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> objects.</param>
            <returns><see langword="true"/> if any trait in <paramref name="traits"/> was added; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="traits"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="traits"/> contains a <see langword="null"/> element.
            </exception>
            <lastupdated>6/11/2012 11:00:28 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.Contains(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether a trait is contained in the set.
            </summary>
            <param name="trait">The trait to check.</param>
            <returns><see langword="true"/> if the set contains <paramref name="trait"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="trait"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/8/2012 1:56:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitQueryOptions)">
            <summary>
            Returns all traits from the set that match the specified query arguments.
            </summary>
            <remarks>
            If a query is made for a trait type that has not been added to the set, and <see cref="P:NationalInstruments.DataInfrastructure.TraitQueryOptions.CreateMissingTraits"/> is <see langword="true"/>,
            then the <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute"/> on the trait type is used to automatically calculate and add the traits to the set.
            If no <see cref="T:NationalInstruments.DataInfrastructure.Primitives.TraitFactoryAttribute"/> has been applied, then an empty collection is returned.
            </remarks>
            <param name="query">The arguments to use for the trait query.</param>
            <returns>
            A collection containing all traits that match the values specified in <paramref name="query"/>,
            or an empty collection if no matching traits were found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="query"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/8/2012 1:59:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Returns all traits from the set at the specified scope.
            </summary>
            <param name="scope">The scope of all traits to find.</param>
            <returns>
            A collection containing all traits with a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <paramref name="scope"/>,
            or an empty collection if no matching traits were found.
            </returns>
            <lastupdated>6/8/2012 1:59:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits``1">
            <summary>
            Returns all traits from the set with the specified type.
            </summary>
            <typeparam name="TTrait">The type of trait to find.</typeparam>
            <returns>
            A collection containing all traits with a type of <typeparamref name="TTrait"/>,
            or an empty collection if no matching traits were found.
            </returns>
            <lastupdated>6/8/2012 1:59:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.GetTraits``1(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Returns all traits from the set with the specified type and scope.
            </summary>
            <typeparam name="TTrait">The type of trait to find.</typeparam>
            <param name="scope">The scope of all traits to find.</param>
            <returns>
            A collection containing all traits with a type of <typeparamref name="TTrait"/> and a <see cref="P:NationalInstruments.DataInfrastructure.Trait.Scope"/> of <paramref name="scope"/>,
            or an empty collection if no matching traits were found.
            </returns>
            <lastupdated>6/8/2012 2:00:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.Slice(NationalInstruments.DataInfrastructure.TraitScope)">
            <summary>
            Returns all traits from the current set that can be sliced at the specified scope.
            </summary>
            <param name="scope">The scope of the slice.</param>
            <returns>A collection containing all traits from the current set that could be sliced at <paramref name="scope"/>.</returns>
            <lastupdated>6/8/2012 2:00:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.Slice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean)">
            <summary>
            Returns all traits from the current set that can be sliced at the specified scope.
            </summary>
            <param name="scope">The scope of the slice.</param>
            <param name="offset">The amount to shift <paramref name="scope"/> by to create the final trait scope.</param>
            <param name="preserveGlobalTraits">Indicates if traits with stream or buffer scope should be preserved or sliced.</param>
            <returns>A collection containing all traits from the current set that could be sliced at <paramref name="scope"/>.</returns>
            <lastupdated>6/8/2012 2:00:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.Slice(NationalInstruments.DataInfrastructure.TraitScope,System.Int32,System.Boolean,System.Func{NationalInstruments.DataInfrastructure.Trait,NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns all filtered traits from the current set that can be sliced at the specified scope.
            </summary>
            <param name="scope">The scope of the slice.</param>
            <param name="offset">The amount to shift <paramref name="scope"/> by to create the final trait scope.</param>
            <param name="preserveGlobalTraits">Indicates if traits with stream or buffer scope should be preserved or sliced.</param>
            <param name="traitFilter">A function to apply to each trait to transform it or remove it from the result collection.</param>
            <returns>A collection containing all filtered traits from the current set that could be sliced at <paramref name="scope"/>.</returns>
            <lastupdated>6/8/2012 2:01:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#Add(NationalInstruments.DataInfrastructure.Trait)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#CopyTo(NationalInstruments.DataInfrastructure.Trait[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#Clear">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#Remove(NationalInstruments.DataInfrastructure.Trait)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSet.Create``1(NationalInstruments.DataInfrastructure.Buffer{``0},System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#Count">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitSet.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#IsReadOnly">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSet.TraitSegments">
            <summary>Holds the ranges of global and local traits in the sorted array of traits being added.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSet.SafeArrayCopy">
            <summary>Holds a safe copy of traits being added, which does not need to be re-validated if UpdateTraitSet needs to retry.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSet.ScopeSearchTrait">
            <summary>A dummy trait used as the search element when searching for the first trait in a sorted array with the specified scope.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSet.TraitCreator`1">
            <summary>Strongly-typed helper used to access the TraitFactory.Create method with the buffer associated with the trait set.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSet.ImmutableTraitSet">
            <summary>The immutable collection of traits in the <see cref="T:NationalInstruments.DataInfrastructure.TraitSet"/>.</summary>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TraitSetBuilder">
            <summary>
            Represents a mutable set of buffer metadata traits.
            </summary>
            <remarks>
            Use the <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits"/> collection on <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>
            to edit the metadata associated with its samples.
            </remarks>
            <seealso cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits"/>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/11/2012 11:00:41 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.TraitSetBuilder"/> class.</summary>
            <lastupdated>6/8/2012 2:02:58 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.#ctor(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DataInfrastructure.TraitSetBuilder"/> class with the specified set of traits.
            </summary>
            <param name="traits">A collection of <see cref="T:NationalInstruments.DataInfrastructure.Trait"/> objects.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="traits"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/11/2012 11:00:57 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.Contains(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Determines whether the set contains the specified trait.
            </summary>
            <param name="trait">The trait to locate in the set.</param>
            <returns><see langword="true"/> if <paramref name="trait"/> is found in the set; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/8/2012 2:02:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.Add(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Adds the specified trait to the set.
            </summary>
            <remarks>
            If a trait with the same structure (type and scope) is already contained in the set,
            the existing trait will be replaced by the new trait.
            </remarks>
            <param name="trait">The trait to add.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="trait"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/8/2012 2:01:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.AddRange(System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Adds all traits in the specified collection to the set.
            </summary>
            <remarks>
            This is equivalent to calling <see cref="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.Add(NationalInstruments.DataInfrastructure.Trait)"/> on each trait in <paramref name="traits"/>.
            </remarks>
            <param name="traits">The collection of traits to add.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="traits"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="traits"/> contains a <see langword="null"/> value.
            </exception>
            <lastupdated>6/8/2012 2:02:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.Remove(NationalInstruments.DataInfrastructure.Trait)">
            <summary>
            Removes the specified trait from the set.
            </summary>
            <param name="trait">The trait to remove.</param>
            <returns><see langword="true"/> if <paramref name="trait"/> was found in the set; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="trait"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/8/2012 2:02:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.Clear">
            <summary>
            Removes all traits from the set.
            </summary>
            <lastupdated>6/8/2012 2:02:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.CopyTo(NationalInstruments.DataInfrastructure.Trait[],System.Int32)">
            <inheritdoc/>
            <lastupdated>6/8/2012 2:02:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.GetEnumerator">
            <inheritdoc/>
            <lastupdated>6/8/2012 2:02:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>6/8/2012 2:02:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.TraitSetBuilder.FindWithSameStructure(NationalInstruments.DataInfrastructure.Trait,System.Int32@)">
            <exclude/>
            <summary>Searches for the specified trait in the sorted _traits collection.</summary>
            <param name="trait">The trait to find.</param>
            <param name="index">If <see langword="true"/>, the index of the trait; otherwise, the index where the trait should be inserted.</param>
            <returns><see langword="true"/> if <paramref name="trait"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitSetBuilder.Count">
            <summary>
            Gets the number of traits in the set.
            </summary>
            <value>The number of traits in the set.</value>
            <lastupdated>6/11/2012 11:00:50 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.TraitSetBuilder.System#Collections#Generic#ICollection{NationalInstruments#DataInfrastructure#Trait}#IsReadOnly">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.TryTransform`2">
            <summary>
            Represents a method that attempts to transform a data value.
            </summary>
            <typeparam name="TData">The type of data being converted.</typeparam>
            <typeparam name="TResult">The result of the transform.</typeparam>
            <param name="value">The type to convert the value to.</param>
            <param name="result">When this method returns <see langword="true"/>, contains the transformed <paramref name="value"/>.</param>
            <returns><see langword="true"/> if the transform succeeded; otherwise, <see langword="false"/>.</returns>
            <lastupdated>6/9/2012 10:50:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.WritableBuffer`1">
            <summary>
            Represents a mutable collection of samples.
            </summary>
            <typeparam name="TData">The type of data stored in the buffer.</typeparam>
            <remarks>
            Writable buffers allow low-level array-like access to a set of samples, and the ability to generate
            read-only <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> instances form those samples.
            <para>
            Sample values can be edited using the indexer, or the <see cref="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.TransformInline(System.Func{`0,`0})"/> methods.
            Buffer metadata can be updated through the <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Unit"/> and <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits"/> properties.
            </para>
            <para>
            When editing is finished, the writable buffer can be transformed into a thread-safe immutable <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
            with the <see cref="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.MakeReadable"/> method. To continue using the writable buffer, a <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> copy
            of the current data can be obtained with the <see cref="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.GetReadable"/> method, and call <see cref="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.Dispose"/> when finished.
            </para>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/9/2012 10:04:28 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.ToString">
            <inheritdoc/>
            <lastupdated>6/8/2012 10:51:20 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.GetReadable">
            <summary>
            Returns a new read-only buffer containing the same sample values.
            </summary>
            <remarks>
            Changes to the writable buffer made after this call are not reflected in the returned buffer.
            </remarks>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the sample values in the writable buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:12:00 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.MakeReadable">
            <summary>
            Returns a new read-only buffer referencing the same sample values, and disposes the current buffer.
            </summary>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the sample values in the writable buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:13:10 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.GetWritable">
            <summary>
            Returns a new writable buffer containing the same sample values.
            </summary>
            <remarks>
            Changes to the writable buffer made after this call are not reflected in the returned buffer.
            </remarks>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/> containing the sample values in the writable buffer.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:12:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.TransformInline(NationalInstruments.DataInfrastructure.Unit)">
            <summary>
            Modifies the samples in this buffer with the values returned by the <see cref="T:NationalInstruments.DataInfrastructure.IUnitConverter`1"/> from <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Unit"/> to the specified unit.
            </summary>
            <remarks>
            Updates <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Unit"/> after the transform has completed.
            <para>The caller is responsible for maintaining the integrity of <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits"/>.</para>
            </remarks>
            <param name="unit">The unit to convert to.</param>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="unit"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              Cannot convert between the buffer's <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Unit"/> and <paramref name="unit"/>.
            </exception>
            <lastupdated>6/9/2012 10:15:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.TransformInline(System.Func{`0,`0})">
            <summary>
            Modifies the samples in this buffer with the values returned by the specified transformer function.
            </summary>
            <remarks>The caller is responsible for maintaining the integrity of <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits"/>.</remarks>
            <param name="transformer">A transform function to apply to each value.</param>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/9/2012 10:14:59 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.TransformInline(System.Func{`0,System.Int32,`0})">
            <summary>
            Modifies the samples in this buffer with the values returned by the specified transformer function incorporating the value's index.
            </summary>
            <remarks>The caller is responsible for maintaining the integrity of <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits"/>.</remarks>
            <param name="transformer">A transform function to apply to each source value; the second parameter of the function represents the index of the source value.</param>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
            </exception>
            <lastupdated>6/9/2012 10:14:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.Transform``1(System.Func{`0,``0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer containing the values returned by the given transformer function, using the specified unit and traits.
            </summary>
            <typeparam name="TResult">The data type of the result values.</typeparam>
            <param name="transformer">A transform function to apply to each value.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traits">The updated traits for the result values.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the samples in the current buffer transformed by <paramref name="transformer"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="traits"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/9/2012 10:14:29 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.Transform``1(System.Func{`0,System.Int32,``0},NationalInstruments.DataInfrastructure.Unit,System.Collections.Generic.IEnumerable{NationalInstruments.DataInfrastructure.Trait})">
            <summary>
            Returns a new read-only buffer containing the values returned by the given transformer function incorporating the value's index, using the specified unit and traits.
            </summary>
            <typeparam name="TResult">The data type of the result values.</typeparam>
            <param name="transformer">A transform function to apply to each source value; the second parameter of the function represents the index of the source value.</param>
            <param name="unit">The unit of measure for the result values.</param>
            <param name="traits">The updated traits for the result values.</param>
            <returns>A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the samples in the current buffer transformed by <paramref name="transformer"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="transformer"/> is <see langword="null"/>.
                <para>- or -</para>
                <para><paramref name="unit"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="traits"/> is <see langword="null"/>.</para>
            </exception>
            <lastupdated>6/9/2012 10:13:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.GetEnumerator">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:11:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.Contains(`0)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:11:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.IndexOf(`0)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:13:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/9/2012 10:11:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.TryGetArrayIndexer">
            <summary>
            Gets an array indexer for the buffer.
            </summary>
            <returns>An <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1.ArrayDataStoreIndexer"/>, or <see langword="null"/> if the buffer is not backed by an array.</returns>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/11/2013 5:26:22 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.Dispose">
            <inheritdoc/>
            <lastupdated>6/9/2012 10:11:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>6/9/2012 10:12:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#ICollection{TData}#Add(`0)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#ICollection{TData}#Clear">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#ICollection{TData}#Remove(`0)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#IList{TData}#Insert(System.Int32,`0)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#IList{TData}#RemoveAt(System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.#ctor(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0},NationalInstruments.DataInfrastructure.Unit)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.#ctor(NationalInstruments.DataInfrastructure.Primitives.RawDataStore{`0},NationalInstruments.DataInfrastructure.Unit,NationalInstruments.DataInfrastructure.TraitSetBuilder)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.DataType">
            <summary>Gets the data type of the buffer.</summary>
            <value>The data type of the buffer.</value>
            <lastupdated>6/9/2012 10:10:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Size">
            <summary>Gets the number of samples in the buffer.</summary>
            <value>The number of samples in the buffer.</value>
            <lastupdated>6/9/2012 10:10:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Unit">
            <summary>Gets or sets the unit of measure of the samples in the buffer.</summary>
            <value>The unit of measure of the samples in the buffer.</value>
            <lastupdated>6/9/2012 10:11:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Traits">
            <summary>Gets the collection of metadata for the buffer.</summary>
            <value>The collection of metadata for the buffer.</value>
            <lastupdated>6/9/2012 10:10:54 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Item(System.Int32)">
            <summary>
            Gets or sets the sample value at the specified location in the buffer.
            </summary>
            <param name="index">The location of the value to retrieve.</param>
            <value>The sample value stored at <paramref name="index"/>.</value>
            <exception cref="T:System.ObjectDisposedException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="index"/> is less than zero, or greater than or equal to <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.Size"/>.
            </exception>
            <lastupdated>6/9/2012 10:10:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.IsDisposed">
            <inheritdoc/>
            <lastupdated>6/9/2012 10:10:15 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#ICollection{TData}#Count">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.System#Collections#Generic#ICollection{TData}#IsReadOnly">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.DataInfrastructure.WritableBuffer`1.ArrayDataStoreIndexer">
            <summary>
            Represents a data store-specific indexer that provides increased performance for access to buffers that are backed by arrays.
            </summary>
            <lastupdated>6/11/2013 5:25:34 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DataInfrastructure.WritableBuffer`1.ArrayDataStoreIndexer.#ctor(NationalInstruments.DataInfrastructure.WritableBuffer{`0})">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.ArrayDataStoreIndexer.Item(System.Int32)">
            <summary>
            Gets or sets the sample value at the specified location in the buffer.
            </summary>
            <param name="index">The location of the value to retrieve.</param>
            <value>The sample value stored at <paramref name="index"/>.</value>
            <exception cref="T:System.NullReferenceException">The buffer or its underlying data have been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than zero, or greater than or equal to <see cref="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.ArrayDataStoreIndexer.Size"/>.
            </exception>
            <lastupdated>6/11/2013 5:33:26 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.DataInfrastructure.WritableBuffer`1.ArrayDataStoreIndexer.Size">
            <summary>
            Gets the number of samples in the buffer.
            </summary>
            <value>The number of samples in the buffer.</value>
            <exception cref="T:System.NullReferenceException">The buffer or its underlying data have been disposed.</exception>
            <lastupdated>6/11/2013 5:33:55 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Internal.ConversionUtility">
            <exclude/>
            <summary>
            Provides members for converting objects to different types, including string conversions and numeric type changes.
            </summary>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.GetType(System.Object)">
            <exclude/>
            <summary>
            Returns the type of the specified value, or <c>typeof(object)</c> if the value is <see langword="null"/>.
            </summary>
            <param name="value">The value to examine.</param>
            <returns>The type of <paramref name="value"/>, or <c>typeof(object)</c> if <paramref name="value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.GetHashCode``1(``0)">
            <exclude/>
            <summary>
            Gets the hash code for the specified item.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="item">An item, or <see langword="null"/>.</param>
            <returns>The value of <see cref="M:System.Object.GetHashCode"/> for <paramref name="item"/>, or zero if <paramref name="item"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.CombineHashCodes(System.Int32,System.Int32)">
            <exclude/>
            <summary>
            Combines the specified hash code values.
            </summary>
            <param name="left">The first hash code.</param>
            <param name="right">The second hash code.</param>
            <returns>A combined hash value, mixing the position and bits of the two values.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.CombineItemHashCodes``1(``0,``0)">
            <exclude/>
            <summary>
            Combines the hash codes for the specified items.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="left">An item, or <see langword="null"/>.</param>
            <param name="right">An item, or <see langword="null"/>.</param>
            <returns>A combined hash value, mixing the position and bits of the hash codes of the two items.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.GetListSeparator(System.IFormatProvider)">
            <exclude/>
            <summary>
            Returns a string to use for separating lists of formatted items.
            </summary>
            <param name="formatProvider">The format provider to examine.</param>
            <returns>
            The <see cref="P:System.Globalization.TextInfo.ListSeparator"/> value for <paramref name="formatProvider"/>,
            or the value from the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> if <paramref name="formatProvider"/> cannot be used.
            </returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.RemoveWhitespace(System.String)">
            <exclude/>
            <summary>
            Removes all whitespace from the specified string.
            </summary>
            <param name="input">The string to process.</param>
            <returns>The value of <paramref name="input"/>, excluding all whitespace characters.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.Separate(System.String,System.String,System.String@,System.String@)">
            <exclude/>
            <summary>
            Separates an input string into two parts, before and after a single instance of a separator.
            </summary>
            <remarks>
            The input string is separated into two parts:
            the substring that occurs before the first instance of the <paramref name="separator"/> in the input, and
            the substring that occurs after the first instance of the <paramref name="separator"/> in the input.
            <para>
            If <paramref name="separator"/> occurs more than once in <paramref name="input"/>, then <paramref name="afterSeparator"/> will still contain instances of <paramref name="separator"/>.
            If <paramref name="separator"/> is not found in <paramref name="input"/>, then <paramref name="afterSeparator"/> will be the empty string.
            </para>
            </remarks>
            <param name="input">The string to separate.</param>
            <param name="separator">The string that separates the two parts of the input.</param>
            <param name="beforeSeparator">The part of <paramref name="input"/> that occurs before the first instance of <paramref name="separator"/> is encountered.</param>
            <param name="afterSeparator">The part of <paramref name="input"/> that occurs after the first instance of <paramref name="separator"/> is encountered, or the empty string if <paramref name="separator"/> is not found.</param>
            <returns><see langword="true"/> if <paramref name="separator"/> was found in <paramref name="input"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.Separate(System.String,System.Int32,System.Int32,System.String@,System.String@)">
            <exclude/>
            <summary>
            Separates an input string into two parts, before and after a specified separator location and size.
            </summary>
            <remarks>
            The input string is separated into two parts:
            the substring that occurs before <paramref name="separatorIndex"/> in the input, and
            the substring that occurs after <paramref name="separatorLength"/> in the input.
            </remarks>
            <param name="input">The string to separate.</param>
            <param name="separatorIndex">The start of the string that separates the two parts of the input.</param>
            <param name="separatorLength">The length of the string that separates the two parts of the input.</param>
            <param name="beforeSeparator">The part of <paramref name="input"/> that occurs before <paramref name="separatorIndex"/>.</param>
            <param name="afterSeparator">The part of <paramref name="input"/> that occurs after <paramref name="separatorLength"/>, or the empty string if <paramref name="separatorIndex"/> is negative.</param>
            <returns><see langword="true"/> if <paramref name="separatorIndex"/> was greater than or equal to zero; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.ToArray``1(System.Collections.Generic.IList{``0})">
            <exclude/>
            <summary>
            Converts a list to an array.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to convert.</param>
            <returns>An array of values in <paramref name="list"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.ConvertToType``1(System.Object)">
            <exclude/>
            <summary>
            Converts the source object to the specified type.
            </summary>
            <typeparam name="T">The target conversion type.</typeparam>
            <param name="source">The object to convert.</param>
            <returns>The value of <paramref name="source"/> converted to <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.ConversionUtility.ConvertToType(System.Object,System.Type)">
            <exclude/>
            <summary>
            Converts the source object to the specified type.
            </summary>
            <param name="source">The object to convert.</param>
            <param name="targetType">The target conversion type.</param>
            <returns>The value of <paramref name="source"/> converted to <paramref name="targetType"/>.</returns>
        </member>
        <member name="T:NationalInstruments.Internal.ExceptionBuilder">
            <exclude/>
            <summary>Defines a type for centralized exception generation.</summary>
        </member>
        <member name="T:NationalInstruments.Restricted.ExceptionBuilderBase">
            <exclude/>
            <summary>Defines base class for centralized exception builder class.</summary>
            <lastupdated>7/23/2002 12:44:56 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.ExceptionBuilderBase.StackFramesToSkip">
            <exclude/>
            <lastupdated>7/23/2002 12:44:56 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Trace(System.Exception)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:53 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.LicenseException(System.Type,System.Object,System.String)">
            <exclude/>
            <lastupdated>4/11/2005 10:53:07 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentNull(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:00 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentNull(System.String,System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:00 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRange(System.String,System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:08 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRange(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:02 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRangeNaNOrInfinity(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:08 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRangeInfinity(System.String)">
            <exclude/>
            <lastupdated>1/23/2004 12:41:08 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ArgumentOutOfRangeNaN(System.String)">
            <exclude/>
            <lastupdated>5/10/2004 12:41:08 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.EmptyString(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:02 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:21 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidArgument(System.String,System.String,System.Exception)">
            <exclude/>
            <lastupdated>10/7/2002 10:50:56 AM</lastupdated>
            <updatedby>Matthew Jennings</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidArgument(System.String,System.String)">
            <exclude/>
            <lastupdated>9/24/2002 10:58:18 AM</lastupdated>
            <updatedby>Christopher Wood</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidArgument(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:21 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.IndexOutOfRange">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.IndexOutOfRange(System.String)">
            <exclude/>
            <lastupdated>4/11/2005 10:53:33 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotFiniteNumber(System.String,System.Double)">
            <exclude/>
            <lastupdated>5/20/2004 3:50:21 AM</lastupdated>
            <updatedby>Nauman Husain</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ObjectDisposed(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:40 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.ObjectDisposed(System.Object)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:37 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotSupported(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:34 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotSupported">
            <exclude/>
            <lastupdated>7/23/2002 12:41:31 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidOperation(System.String,System.Exception)">
            <exclude/>
            <lastupdated>10/7/2002 10:51:07 AM</lastupdated>
            <updatedby>Matthew Jennings</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidOperation(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:28 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidOperation">
            <exclude/>
            <lastupdated>7/23/2002 12:41:24 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.TypedCollectionDoesNotSupportType(System.Type,System.Object)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:57 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Format">
            <exclude/>
            <lastupdated>7/23/2002 12:41:11 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Format(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:15 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Format(System.String,System.Exception)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:18 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Serialization">
            <exclude/>
            <lastupdated>7/23/2002 12:41:43 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.Serialization(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:47 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotImplemented">
            <exclude/>
            <lastupdated>7/23/2002 12:41:47 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.NotImplemented(System.String)">
            <exclude/>
            <lastupdated>7/23/2002 12:41:47 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.DllNotFound(System.String)">
            <exclude/>
            <lastupdated>9/24/2002 10:50:13 AM</lastupdated>
            <updatedby>Christopher Wood</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.EntryPointNotFound(System.String)">
            <exclude/>
            <lastupdated>9/24/2002 10:50:18 AM</lastupdated>
            <updatedby>Christopher Wood</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ExceptionBuilderBase.InvalidCast(System.String,System.Type,System.Type)">
            <exclude/>
            <lastupdated>9/24/2002 10:50:18 AM</lastupdated>
            <updatedby>Christopher Wood</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Internal.Log">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Plural(System.Int32,System.String)">
            <summary>Returns the plural suffix if the specified count requires a plural description.</summary>
            <param name="count">The number of elements.</param>
            <param name="pluralSuffix">The string to use for a plural element count.</param>
            <returns>An empty string if <paramref name="count"/> is one; otherwise, <paramref name="pluralSuffix"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Format(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Formats each type in the specified collection, if the log message is shown.</summary>
            <param name="types">The collection of types to format.</param>
            <returns>An object to format the collection.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Format(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Sorts and formats each value in the specified collection, if the log message is shown.</summary>
            <param name="collection">The collection to integers to sort and format.</param>
            <returns>An object to format the collection.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Format``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>Formats each element in the specified collection, if the log message is shown.</summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The collection to format.</param>
            <param name="elementFormatter">The function to use to format each element in the collection, or <see langword="null"/>.</param>
            <returns>An object to format the collection.</returns>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Error(System.Exception)">
            <summary>Logs an Error-level message.</summary>
            <param name="exception">The exception error.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Error(System.String,System.Exception)">
            <summary>Logs an Error-level message.</summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="exception">The exception error.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Verbose(System.String,System.String)">
            <summary>
            Logs a Verbose-level message.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="message">
            The  message.
            </param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Verbose``1(System.String,System.String,``0)">
            <summary>
            Logs a Verbose-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Verbose``2(System.String,System.String,``0,``1)">
            <summary>
            Logs a Verbose-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Verbose``3(System.String,System.String,``0,``1,``2)">
            <summary>
            Logs a Verbose-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>, 
            <param name="arg2">Format argument 2 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Verbose(System.String,System.String,System.Object[])">
            <summary>Logs a Verbose-level message with string formatting.</summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">The format string to used to create the message.</param>
            <param name="args">Format arguments to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Info(System.String,System.String)">
            <summary>
            Logs an Info-level message.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="message">
            The  message.
            </param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Info``1(System.String,System.String,``0)">
            <summary>
            Logs an Info-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Info``2(System.String,System.String,``0,``1)">
            <summary>
            Logs an Info-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Info``3(System.String,System.String,``0,``1,``2)">
            <summary>
            Logs an Info-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>, 
            <param name="arg2">Format argument 2 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Info(System.String,System.String,System.Object[])">
            <summary>Logs an Info-level message with string formatting.</summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">The format string to used to create the message.</param>
            <param name="args">Format arguments to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Warning(System.String,System.String)">
            <summary>
            Logs a Warning-level message.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="message">
            The  message.
            </param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Warning``1(System.String,System.String,``0)">
            <summary>
            Logs a Warning-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Warning``2(System.String,System.String,``0,``1)">
            <summary>
            Logs a Warning-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Warning``3(System.String,System.String,``0,``1,``2)">
            <summary>
            Logs a Warning-level message with string formatting.
            </summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>, 
            <param name="arg2">Format argument 2 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Warning(System.String,System.String,System.Object[])">
            <summary>Logs a Warning-level message with string formatting.</summary>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">The format string to used to create the message.</param>
            <param name="args">Format arguments to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String)">
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="message">
            The  message.
            </param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Message``1(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,``0)">
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Message``2(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,``0,``1)">
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Message``3(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,``0,``1,``2)">
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">
            The format string used to create the message.
            </param>
            <param name="arg0">Format argument 0 to <paramref name="format"/>.</param>, 
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>, 
            <param name="arg2">Format argument 2 to <paramref name="format"/>.</param>
        </member>
        <member name="M:NationalInstruments.Internal.Log.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object[])">
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category.</param>
            <param name="format">The format string to use to create the message.</param>
            <param name="args">Format arguments to <paramref name="format"/>.</param>
        </member>
        <member name="P:NationalInstruments.Internal.Log.IsVerboseEnabled">
            <summary>Gets a value indicating whether Verbose-level messages are being logged.</summary>
        </member>
        <member name="P:NationalInstruments.Internal.Log.IsInfoEnabled">
            <summary>Gets a value indicating whether Info-level messages are being logged.</summary>
        </member>
        <member name="P:NationalInstruments.Internal.Log.IsWarningEnabled">
            <summary>Gets a value indicating whether Warning-level messages are being logged.</summary>
        </member>
        <member name="P:NationalInstruments.Internal.Log.IsErrorEnabled">
            <summary>Gets a value indicating whether Error-level messages are being logged.</summary>
        </member>
        <member name="T:NationalInstruments.Internal.Log.EnumerableFormatter`1">
            <summary>Delays formatting of an enumerable collection of values until a log message needs to be generated.</summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="T:NationalInstruments.Internal.PrecisionTimeValue">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Internal.PrecisionTimingFormatter">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.ParseDateTime(System.String,System.IFormatProvider)">
            <summary>
            Parses a PrecisionDateTime string.  DateTime.Parse is used unless the string is in round trip format
            (yyyy-MM-dd'T'HH:mm:ss.f+), where 'f+' contains as many digits as needed to display the full precision.
            </summary>
            <param name="dateTimeString"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.ParseDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Parses a PrecisionDateTime string.  DateTime.Parse is used unless the string is in round trip format
            (yyyy-MM-dd'T'HH:mm:ss.f+), where 'f+' contains as many digits as needed to display the full precision.
            </summary>
            <param name="dateTimeString"></param>
            <param name="formatProvider"></param>
            <param name="dateTimeStyles"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.TryParseDateTime(System.String,NationalInstruments.PrecisionDateTime@)">
            <summary>
            Tries to parse a PrecisionDateTime string.  DateTime.TryParse is used unless the string is in round trip format
            (yyyy-MM-dd'T'HH:mm:ss.f+), where 'f+' contains as many digits as needed to display the full precision.
            </summary>
            <param name="dateTimeString"></param>
            <param name="precisionDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.TryParseDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
            <summary>
            Tries to parse a PrecisionDateTime string.  DateTime.TryParse is used unless the string is in round trip format
            (yyyy-MM-dd'T'HH:mm:ss.f+), where 'f+' contains as many digits as needed to display the full precision.
            </summary>
            <param name="dateTimeString"></param>
            <param name="formatProvider"></param>
            <param name="dateTimeStyles"></param>
            <param name="precisionDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.ParseDateTime(System.String,System.String@,System.UInt64@)">
            <summary>
            Parses a round trip formatted PrecisionDateTime string and returns the following:
            1. The date time string through the whole seconds, but with fractional seconds omitted.
            2. A ulong representing the fractional seconds ticks of the formatted string (converted from a floating point value).
            If the string is not round trip formatted, the original dateTimeString is returned.
            </summary>
            <param name="dateTimeString"></param>
            <param name="dateTimeParseableString"></param>
            <param name="fractionalSecondTicks"></param>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.FormatDateTimeRoundTrip(NationalInstruments.PrecisionDateTime)">
            <summary>
            Formats a PrecisionDateTime to the round trip format (yyyy-MM-dd'T'HH:mm:ss.f+), where 'f+' contains as many
            digits as needed to display the full precision.
            </summary>
            <param name="precisionDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.ConvertFractionalSecondTicksToString(System.UInt64,System.IFormatProvider,System.Int32)">
            <summary>
            Converts the fractional second ticks into an equivalent floating point string with the specified maximum
            number of decimal places.
            </summary>
            <param name="fractionalSecondTicks"></param>
            <param name="formatProvider"></param>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.GetNumberDecimalSeparator(System.IFormatProvider)">
            <summary>
            Gets the number decimal separator for the specified format provider.  If the format provider is not a CultureInfo
            or does not contain NumberFormat info, the current culture is used instead.
            </summary>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Load(System.String)">
            <summary>
            Loads a string value into the PreciseFloat.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Clone">
            <summary>
            Creates a deep copy of the PreciseFloat value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.AdjustExponent(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Adjusts the exponent to the given PreciseFloat value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Negate">
            <summary>
            Negates the PreciseFloat value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Absolute">
            <summary>
            Returns the absolute value of the PreciseFloat value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Multiply(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Multiples the PreciseFloat value by the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Multiply(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat,NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Multiplies two PreciseFloat values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Add(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Adds the specified PreciseFloat value to the existing PreciseFloat value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Add(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat,NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Adds two PreciseFloat values together.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Subtract(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat,NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Subtracts one PreciseFloat value from another.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.CompareTo(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Compares a PreciseFloat value to the existing PreciseFloat value.
            </summary>
            <param name="preciseFloat"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.op_LessThan(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat,NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Determines if the value in a is less than the value in b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.op_GreaterThan(NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat,NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat)">
            <summary>
            Determines if the value in a is greater than the value in b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.ToString">
            <summary>
            Converts the PreciseFloat to a string with full precision.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.ToString(System.Int32)">
            <summary>
            Converts the PreciseFloat to a string with the given maximum number of decimal places.
            </summary>
            <param name="maxDecimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="P:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Length">
            <summary>
            Returns the number of SBytes in the value.
            </summary>
        </member>
        <member name="P:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Item(System.Int32)">
            <summary>
            Returns the SByte representation of the digit at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NationalInstruments.Internal.PrecisionTimingFormatter.PreciseFloat.Sign">
            <summary>
            Gets a value indicating if the sign of the PreciseFloat value is positive.
            </summary>
        </member>
        <member name="T:NationalInstruments.Internal.TimeUnit">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Internal.WaveformUtility.HasTimeStamps(NationalInstruments.WaveformTiming)">
            <summary>Gets a value indicating whether the specified waveform timing has time stamp data.</summary>
        </member>
        <member name="M:NationalInstruments.Internal.WaveformUtility.HasTimeStamps(NationalInstruments.PrecisionWaveformTiming)">
            <summary>Gets a value indicating whether the specified waveform timing has time stamp data.</summary>
        </member>
        <member name="T:NationalInstruments.Logging.ILoggerRegistration">
            <summary>
            Represents the registration for a logger to receive log messages.
            </summary>
            <remarks>
            A logger registration is by <see cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/> when a logger is registered to receive log messages.
            To unregister the logger, call <see cref="M:System.IDisposable.Dispose"/> on the logger registration.
            </remarks>
            <seealso cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>
            <lastupdated>6/10/2012 2:56:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.ILoggerRegistration.IsRegistered">
            <summary>
            Gets a value indicating whether the registration is still active.
            </summary>
            <value>
            <see langword="true"/> if <see cref="P:NationalInstruments.Logging.ILoggerRegistration.Logger"/> is still registered;
            otherwise, <see langword="false"/> if the registration has been disposed.
            </value>
            <lastupdated>6/10/2012 2:56:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.ILoggerRegistration.Logger">
            <summary>
            Gets the logger held by this registration.
            </summary>
            <value>The logger held by this registration.</value>
            <lastupdated>6/10/2012 2:56:57 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.ILoggerRegistration.MinimumLevel">
            <summary>
            Gets the level <see cref="P:NationalInstruments.Logging.ILoggerRegistration.Logger"/> is registered for.
            </summary>
            <value>The level <see cref="P:NationalInstruments.Logging.ILoggerRegistration.Logger"/> is registered for.</value>
            <lastupdated>6/10/2012 2:57:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Logging.NILoggerBase">
            <summary>
            Abstract base class for all classes that record NI log messages.
            </summary>
            <remarks>
            To record log messages, derive from the <see cref="T:NationalInstruments.Logging.NILoggerBase"/> class, implement the abstract <see cref="M:NationalInstruments.Logging.NILoggerBase.LogCore(NationalInstruments.Logging.NILogMessage)"/> method,
            and call <see cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>. All log messages that meet the minimum <see cref="T:NationalInstruments.Logging.NILogMessageLevel"/> and
            <see cref="P:NationalInstruments.Logging.NILoggerBase.CategoryFilter"/> requirements are passed on to the logger's <see cref="M:NationalInstruments.Logging.NILoggerBase.LogCore(NationalInstruments.Logging.NILogMessage)"/> method,
            where they can be displayed or recorded according to the logger's implementation.
            <note type="note">
            All log messages are sent from a worker thread that is different from the thread where the message was created.
            </note>
            </remarks>
            <seealso cref="T:NationalInstruments.Logging.NILogMessage"/>
            <threadsafety safety="unsafe"/>
            <lastupdated>6/10/2012 2:53:33 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILoggerBase.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Logging.NILoggerBase"/> class with the specified category filter.
            </summary>
            <param name="categoryFilter">A predicate used to filter messages by category, or <see langword="null"/> to receive all messages.</param>
            <lastupdated>6/10/2012 2:54:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILoggerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Logging.NILoggerBase"/> class.
            </summary>
            <lastupdated>6/10/2012 2:54:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)">
            <summary>
            Register the logger to receive messages at the given level or above.
            </summary>
            <remarks>
            Log messages are sent from a worker thread different from the creation thread.
            </remarks>
            <param name="logger">The logger to register.</param>
            <param name="minimumLevel">The minimum level to log.</param>
            <returns>An object that can be used to unregister the logger.</returns>
            <lastupdated>6/10/2012 2:55:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILoggerBase.LogCore(NationalInstruments.Logging.NILogMessage)">
            <summary>
            Handles the logging of a message.
            </summary>
            <param name="message">The log message.</param>
            <remarks>
            This is called in a thread safe manner,
            though not from the thread in which this logger was created.
            </remarks>
            <lastupdated>6/10/2012 2:54:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILoggerBase.OnRegister(NationalInstruments.Logging.NILogMessageLevel)">
            <summary>
            Called after the logger is registered.
            </summary>
            <param name="minimumLevel">The minimum message level from the call to <see cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>.</param>
            <seealso cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>
            <lastupdated>6/10/2012 2:54:43 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILoggerBase.OnUnregister(NationalInstruments.Logging.NILogMessageLevel)">
            <summary>
            Called after the logger is unregistered by the object returned from <see cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>.
            </summary>
            <param name="minimumLevel">The minimum message level from the call to <see cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>.</param>
            <seealso cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/>
            <lastupdated>6/10/2012 2:54:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.NILoggerBase.CategoryFilter">
            <summary>
            Gets a predicate used to filter messages by category, or <see langword="null"/> to receive all messages.
            </summary>
            <value>A predicate used to filter messages by category. The default value is <see langword="null"/>.</value>
            <lastupdated>6/10/2012 2:53:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Logging.NILogMessage">
            <summary>
            Represents a log message.
            </summary>
            <remarks>
            When a logger is registered with the <see cref="M:NationalInstruments.Logging.NILoggerBase.Register(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)"/> method, all log messages that meet the
            minimum <see cref="T:NationalInstruments.Logging.NILogMessageLevel"/> and <see cref="P:NationalInstruments.Logging.NILoggerBase.CategoryFilter"/> requirements are
            passed on to the logger's <see cref="M:NationalInstruments.Logging.NILoggerBase.LogCore(NationalInstruments.Logging.NILogMessage)"/> method, where they can be displayed or recorded
            according to the logger's implementation.
            <note type="note">
            All log messages are sent from a worker thread that is different from the thread where the message was created.
            </note>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/10/2012 2:55:42 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Logging.NILogMessage.ToString">
            <inheritdoc/>
            <lastupdated>6/10/2012 2:56:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.NILogMessage.TimeStamp">
            <summary>Gets the time the message was created.</summary>
            <value>The time the message was created.</value>
            <lastupdated>6/10/2012 2:56:25 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.NILogMessage.ThreadId">
            <summary>Gets the ID of the thread where the message was created.</summary>
            <value>The ID of the thread where the message was created.</value>
            <lastupdated>6/10/2012 2:56:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.NILogMessage.Level">
            <summary>Gets the severity of the message.</summary>
            <value>The severity of the message.</value>
            <lastupdated>6/10/2012 2:55:53 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.NILogMessage.Category">
            <summary>Gets the category of the message.</summary>
            <value>The category of the message.</value>
            <lastupdated>6/10/2012 2:55:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Logging.NILogMessage.Message">
            <summary>Gets the log message.</summary>
            <value>The log message itself.</value>
            <lastupdated>6/10/2012 2:56:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Logging.NILogMessageLevel">
            <summary>
            The NI log message level.
            </summary>
            <remarks>
            Log message levels are defined in order of increasing severity.
            </remarks>
            <lastupdated>6/10/2012 2:57:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Logging.NILogMessageLevel.Verbose">
            <summary>
            The most verbose level.
            </summary>
            <lastupdated>6/10/2012 2:57:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Logging.NILogMessageLevel.Info">
            <summary>
            The information level.
            </summary>
            <lastupdated>6/10/2012 2:57:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Logging.NILogMessageLevel.Warning">
            <summary>
            The warning level.
            </summary>
            <lastupdated>6/10/2012 2:57:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Logging.NILogMessageLevel.Error">
            <summary>
            The error level.
            </summary>
            <lastupdated>6/10/2012 2:57:20 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.BetaLicense">
            <exclude/>
            <summary>To encapsulate the behavior of a beta license</summary>
            <lastupdated>2/11/2003 2:44:30 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenseBase">
            <exclude/>
            <summary>Base class for different license types.
            Notes:
             1. Mixed-mode C++\CLI types are in the global namespace, which causes
                several of the reflection properties (such as DeclaringType) to be null, When processing a
                mixed-mode type, the Module should be retrieved and used to get reflection information.</summary>
            <lastupdated>2/11/2003 2:45:36 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.#ctor(System.String,System.String)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:50 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <exclude/>
            <lastupdated>2/01/2010 2:45:50 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.Dispose">
            <exclude/>
            <lastupdated>2/11/2003 2:45:46 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.Dispose(System.Boolean)">
            <exclude/>
            <lastupdated>3/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.LoadRunTimeLicense">
            <exclude/>
            <lastupdated>2/11/2003 2:45:52 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLicenseFile">
            <exclude/>
            <lastupdated>2/11/2003 2:45:52 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLicenseFile(System.Boolean)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:52 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLicense">
            <exclude/>
            <lastupdated>2/06/2010 2:45:52 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLicense(System.Boolean)">
            <exclude/>
            <lastupdated>2/06/2010 2:45:52 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLMLicense">
            <exclude/>
            <lastupdated>2/05/2010 2:45:52 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsValidLMLicense(System.Boolean)">
            <exclude/>
            <lastupdated>2/06/2010 2:45:52 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.GetUnencryptedLicenseContents">
            <exclude/>
            <lastupdated>2/11/2003 2:45:52 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.DesignTimeCheck(System.Type)">
            <exclude/>
            <lastupdated>2/02/2010 2:45:44 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.DesignTimeRegLicense">
            <exclude/>
            <lastupdated>2/02/2010 2:45:44 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.RunTimeCheck(System.ComponentModel.LicenseContext,System.Type,System.Object)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:55 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.CheckForCorrectFileLicense(NationalInstruments.Internal.FileLicense)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:38 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.CheckForCorrectLMLicense(NationalInstruments.Internal.LMLicense)">
            <exclude/>
            <lastupdated>2/05/2010 2:45:38 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.ComponentRunTimeCheck(System.Type,System.Object,System.String)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:41 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.ShowUnLicensedBehavior(System.Type,System.Object)">
            <exclude/>
            <lastupdated>2/11/2003 2:46:01 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsCallingAssembly(System.Type,System.Type,System.Type)">
            <exclude/>
            <lastupdated>2/11/2003 2:46:01 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsCallingAssemblyUsingTypeCompare(System.Type,System.Type,System.Type)">
            <exclude/>
            <lastupdated>2/11/2003 2:46:01 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.IsCallingAssemblyUsingAssemblyCompare(System.Type,System.Type,System.Type)">
            <exclude/>
            <lastupdated>2/11/2003 2:46:01 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.ParseCallStack(System.Type)">
            <exclude/>
            <lastupdated>2/28/2012 3:16:27 PM</lastupdated>
            <updatedby>Owen Pellegrin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.ParseCallStackViaAttributeSearch(System.Type)">
            <exclude/>
            <lastupdated>2/28/2012 3:16:35 PM</lastupdated>
            <updatedby>Owen Pellegrin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.RemoveVersion(System.String)">
            <exclude/>
            <lastupdated>3/24/2004 12:56:28 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseBase.GetLicenseFromHashTable(System.Type,System.Collections.Hashtable)">
            <exclude/>
            <lastupdated>3/24/2004 12:56:28 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.Disposed">
            <exclude/>
            <lastupdated>3/22/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.LicenseKey">
            <exclude/>
            <lastupdated>2/11/2003 2:45:46 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.MajorMinorAssemblyVersion">
            <exclude/>
            <lastupdated>3/24/2004 12:56:28 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.FileName">
            <exclude/>
            <lastupdated>3/24/2004 12:56:28 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.FeatureName">
            <exclude/>
            <lastupdated>2/05/2010 12:56:28 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.DebugAllowed">
            <exclude/>
            <lastupdated>2/26/2010 1:28:10 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.FileExists">
            <exclude/>
            <lastupdated>4/11/2005 10:53:33 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.DecryptedFileLicenseString">
            <exclude/>
            <lastupdated>3/24/2004 12:56:28 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseBase.LicenseType">
            <exclude/>
            <lastupdated>5/10/2004 1:28:10 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.BetaLicense.#ctor(System.String[],System.String,System.String,System.DateTime,System.DateTime)">
            <exclude/>
            <lastupdated>7/8/2005 3:28:26 PM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.BetaLicense.#ctor(System.String[],System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <exclude/>
            <lastupdated>2/1/2010 3:28:26 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.BetaLicense.CheckForCorrectFileLicense(NationalInstruments.Internal.FileLicense)">
            <exclude/>
            <lastupdated>2/11/2003 2:44:39 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.BetaLicense.CheckForCorrectLMLicense(NationalInstruments.Internal.LMLicense)">
            <exclude/>
            <lastupdated>2/05/2010 2:44:39 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.BetaLicense.ComponentRunTimeCheck(System.Type,System.Object,System.String)">
            <exclude/>
            <lastupdated>2/11/2003 2:44:42 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.BetaLicense.LicenseType">
            <exclude/>
            <lastupdated>2/20/2003 2:40:51 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.CallbackManager">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.ISupportSynchronizationContext">
            <summary>
            Specifies that an object can use <see cref="T:System.Threading.SynchronizationContext"/> to
            customize how events and callback delegates are invoked.
            </summary>
            <remarks>
                <para>
            Objects that implement <see cref="T:NationalInstruments.ISupportSynchronizationContext"/>
            use <see cref="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks"/>
            to determine how events and callback delegates are invoked.  If
            <see cref="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks"/> is
            <see langword="false"/>, events and callbacks are directly invoked.  If
            <see cref="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks"/> is
            <see langword="true"/>, events and callbacks are invoked through the
            <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> methods.  For
            example, if an object that implements <see cref="T:NationalInstruments.ISupportSynchronizationContext"/>
            raises events in a separate thread and you want to handle the events in your user interface thread,
            you set <see cref="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks"/>
            to <see langword="true"/> and begin the operation in the user interface thread.
            </para>
                <note type="note">
            For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </note>
            </remarks>
            <lastupdated>3/16/2006 4:25:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ISupportSynchronizationContext.SynchronizeCallbacks">
            <summary>
            Specifies how events and callback delegates are invoked.
            </summary>
            <value>
            <see langword="true"/> if events and callbacks are invoked through the
            <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> methods; otherwise, events
            and callbacks are invoked directly.
            </value>
            <remarks>
            In some cases, callbacks and event handlers are executed in a different thread than the rest of the program.
            Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls,
            from these callbacks and event handlers. For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </remarks>
            <lastupdated>3/20/2006 5:32:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> class.
            </summary>
            <lastupdated>9/3/2009 2:47:30 PM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.#ctor(System.ComponentModel.EventHandlerList)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> class with the specified list of event handlers.
            </summary>
            <param name="events">
            The list of event handlers.
            </param>
            <lastupdated>9/3/2009 2:48:13 PM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> object.
            </summary>
            <lastupdated>8/27/2009 11:33:59 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.Dispose(System.Boolean)">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.AddEventHandler(System.Object,System.Delegate)">
            <summary>
            Adds an event handler for the specified event key.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="value">
            The delegate to the method that handles the event.
            </param>
            <lastupdated>8/26/2009 9:47:40 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RemoveEventHandler(System.Object,System.Delegate)">
            <summary>
            Removes an event handler for the specified event key.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="value">
            The delegate to the method that handles the event.
            </param>
            <lastupdated>8/26/2009 9:49:14 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.GetHandlerCount(System.Object)">
            <summary>
            Gets the number of event handlers installed for the specified event key.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <returns>
            The number of event handlers installed for the specified event key.
            </returns>
            <lastupdated>8/26/2009 9:59:21 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.InvokeAsyncCallback(System.ComponentModel.AsyncOperation,System.AsyncCallback,System.IAsyncResult)">
            <summary>
            Raises the asynchronous event through a synchronization context.
            </summary>
            <param name="operation">
            An <see cref="T:System.ComponentModel.AsyncOperation" crefType="Unqualified"/> that provides the
            <see cref="T:System.Threading.SynchronizationContext" crefType="Unqualified"/> that is used to invoke the event.
            </param>
            <param name="callback">
            A delegate to the method that raises the asynchronous event.
            </param>
            <param name="result">
            The result of the asynchronous operation.
            </param>
            <lastupdated>8/27/2009 1:20:38 PM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.InvokeAsyncCallbackAsync(System.ComponentModel.AsyncOperation,System.AsyncCallback,System.IAsyncResult)">
            <summary>
            Asynchronously raises the asynchronous event through a synchronization context.
            </summary>
            <param name="operation">
            An <see cref="T:System.ComponentModel.AsyncOperation" crefType="Unqualified"/> that provides the
            <see cref="T:System.Threading.SynchronizationContext" crefType="Unqualified"/> that is used to invoke the event.
            </param>
            <param name="callback">
            A delegate to the method that raises the asynchronous event.
            </param>
            <param name="result">
            The result of the asynchronous operation.
            </param>
            <lastupdated>8/27/2009 1:52:46 PM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEvent``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
            <summary>
            Raises the event through a synchronization context with the specified event arguments.
            </summary>
            <param name="operation">
            An <see cref="T:System.ComponentModel.AsyncOperation" crefType="Unqualified"/> that provides the
            <see cref="T:System.Threading.SynchronizationContext" crefType="Unqualified"/> that is used to invoke the event.
            </param>
            <param name="callback">
            A delegate to the method that raises the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs" crefType="Unqualified"/>-derived type that specifies the type of the arguments of the event.
            </typeparam>
            <lastupdated>8/27/2009 11:14:52 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventAsync``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
            <summary>
            Asynchronously raises the event through a synchronization context with the specified event arguments.
            </summary>
            <param name="operation">
            An <see cref="T:System.ComponentModel.AsyncOperation" crefType="Unqualified"/> that provides the
            <see cref="T:System.Threading.SynchronizationContext" crefType="Unqualified"/> that is used to invoke the event.
            </param>
            <param name="callback">
            A delegate to the method that raises the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs" crefType="Unqualified"/>-derived type that specifies the type of the arguments of the event.
            </typeparam>
            <lastupdated>8/27/2009 11:25:59 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEventDirect(System.Object,System.Object,System.EventArgs)">
            <summary>
            Raises the event specified by an event key with the specified event arguments without cross-thread synchronization.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="sender">
            The object that generated the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <lastupdated>8/27/2009 11:10:21 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventDirect``1(System.Object,System.Object,``0)">
            <summary>
            Raises the event specified by an event key with the specified event arguments without cross-thread synchronization.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="sender">
            The object that generated the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs" crefType="Unqualified"/>-derived type that specifies the type of the arguments of the event.
            </typeparam>
            <lastupdated>8/27/2009 11:10:44 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEvent(System.Object,System.Object,System.EventArgs)">
            <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="sender">
            The object that generated the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <lastupdated>8/27/2009 11:09:48 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseEventAsync(System.Object,System.Object,System.EventArgs)">
            <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="sender">
            The object that generated the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <lastupdated>8/27/2009 11:10:00 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEvent``1(System.Object,System.Object,``0)">
            <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="sender">
            The object that generated the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs" crefType="Unqualified"/>-derived type that specifies the type of the arguments of the event.
            </typeparam>
            <lastupdated>8/27/2009 11:10:28 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.CallbackManager.RaiseGenericEventAsync``1(System.Object,System.Object,``0)">
            <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="sender">
            The object that generated the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs" crefType="Unqualified"/>-derived type that specifies the type of the arguments of the event.
            </typeparam>
            <lastupdated>8/27/2009 11:10:37 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.CallbackManager.IsDisposed">
            <summary>
            Gets a value indicating if the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> object has been disposed.
            </summary>
            <value>
                <see langword="true"/> if the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> object has been disposed.
            </value>
            <lastupdated>8/27/2009 11:33:26 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.CallbackManager.IsDiposed">
            <summary>
            Gets a value indicating if the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> object has been disposed.
            </summary>
            <value>
                <see langword="true"/> if the <see cref="T:NationalInstruments.Restricted.CallbackManager" crefType="Unqualified"/> object has been disposed.
            </value>
            <lastupdated>8/27/2009 11:33:26 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.CallbackManager.SynchronizeCallbacks">
            <summary>
            Gets or sets how events and callback delegates are invoked.
            </summary>
            <value>
            <see langword="true"/> if events and callbacks are invoked through the <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" crefType="Unqualified"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" crefType="Unqualified"/> methods; otherwise, events and callbacks are invoked directly. The default value is
            <see langword="true"/>.
            </value>
            <lastupdated>8/26/2009 9:45:59 AM</lastupdated>
            <updatedby>Jessica Pekarek</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.Categories">
            <exclude/>
            <summary>Defines constants for CategoryAttribute values.</summary>
            <lastupdated>2/11/2003 2:41:08 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Action">
            <exclude/>
            <lastupdated>2/11/2003 2:38:13 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Accessibility">
            <exclude/>
            <lastupdated>2/11/2003 2:38:07 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Appearance">
            <exclude/>
            <lastupdated>2/11/2003 2:38:29 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Behavior">
            <exclude/>
            <lastupdated>2/11/2003 2:38:34 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Configurations">
            <exclude/>
            <lastupdated>2/11/2003 2:38:38 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Data">
            <exclude/>
            <lastupdated>2/11/2003 2:38:44 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Design">
            <exclude/>
            <lastupdated>2/11/2003 2:38:53 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.DragDrop">
            <exclude/>
            <lastupdated>2/11/2003 2:38:58 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Focus">
            <exclude/>
            <lastupdated>2/11/2003 2:39:03 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Format">
            <exclude/>
            <lastupdated>2/11/2003 2:39:07 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Key">
            <exclude/>
            <lastupdated>2/11/2003 2:39:18 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Layout">
            <exclude/>
            <lastupdated>2/11/2003 2:39:22 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Mouse">
            <exclude/>
            <lastupdated>2/11/2003 2:39:30 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Misc">
            <exclude/>
            <lastupdated>2/11/2003 2:39:26 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.PropertyChanged">
            <exclude/>
            <lastupdated>2/11/2003 2:39:33 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.WindowStyle">
            <exclude/>
            <lastupdated>2/11/2003 2:39:37 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Arrow">
            <exclude/>
            <lastupdated>2/11/2003 2:39:37 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Caption">
            <exclude/>
            <lastupdated>2/11/2003 2:39:37 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Shape">
            <exclude/>
            <lastupdated>2/11/2003 2:39:37 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.Categories.Range">
            <exclude/>
            <lastupdated>2/11/2003 2:39:37 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.CollectionDebugView">
             <exclude/>
            
             <summary>
             Debugger proxy for custom collections.
             </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.CollectionDebugView.#ctor(System.Collections.IEnumerable)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.CollectionDebugView.GetItems(System.Collections.IEnumerable,System.Type)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.CollectionDebugView.Items">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Restricted.CommonExtensions">
             <exclude/>
            
             <summary>
             Contains commonly used helper extension methods.
             </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.Is``1(System.Object)">
            <exclude/>
            <summary>
            Determines whether an object can be cast to the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The desired type of the object.</typeparam>
            <param name="item">The object to test.</param>
            <returns><see langword="true"/> if the object can be cast to the specified type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IsAssignableTo``1(System.Type)">
            <exclude/>
            <summary>
            Determines whether an object of the given <paramref name="type"/> can be cast to the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The desired type of the object.</typeparam>
            <param name="type">The type to test.</param>
            <returns><see langword="true"/> if an object of the given type can be cast to the specified type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IsAssignableTo(System.Type,System.Type)">
            <exclude/>
            <summary>
            Determines whether an object of the given <paramref name="type"/> be cast to the <paramref name="desired"/> type.
            </summary>
            <param name="type">The type to test.</param>
            <param name="desired">The desired type of the object.</param>
            <returns><see langword="true"/> if an object of the given type can be cast to the desired type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <exclude/>
            <summary>
            Returns an array of custom attributes of the specified <typeparamref name="TAttribute"/> type applied to the member.
            </summary>
            <typeparam name="TAttribute">The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to search for applied custom attributes.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
            <exclude/>
            <summary>
            Returns an array of custom attributes of the specified <typeparamref name="TAttribute"/> type applied to the assembly.
            </summary>
            <typeparam name="TAttribute">The type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search for applied custom attributes.</param>
            <returns>An array of custom attributes applied to this assembly, or an array with zero (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.GetService``1(System.IServiceProvider)">
            <exclude/>
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="TService">The type of service object to get.</typeparam>
            <param name="serviceProvider">The provider to retrieve the service object from.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IfNotNull``1(``0,System.Action{``0})">
            <exclude/>
            <summary>
            Performs the specified <paramref name="action"/> only if <paramref name="item"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="item">The object to check.</param>
            <param name="action">The action to perform if <paramref name="item"/> is not <see langword="null"/>.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.GetValueOrDefault``2(``0,System.Func{``0,``1})">
            <exclude/>
            <summary>
            Performs the specified value <paramref name="operation"/> only if <paramref name="item"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="TItem">The type of the object.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="item">The object to check.</param>
            <param name="operation">The operation to perform if <paramref name="item"/> is not <see langword="null"/>.</param>
            <returns>The value returned by the <paramref name="operation"/>; otherwise, <c>default(R)</c>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.GetValueOrDefault``2(``0,System.Func{``0,``1},``1)">
            <exclude/>
            <summary>
            Performs the specified value <paramref name="operation"/> only if <paramref name="item"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="TItem">The type of the object.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="item">The object to check.</param>
            <param name="operation">The operation to perform if <paramref name="item"/> is not <see langword="null"/>.</param>
            <param name="defaultValue">The default value to return if <paramref name="item"/> is <see langword="null"/>.</param>
            <returns>The value returned by the <paramref name="operation"/>; otherwise, <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IsSpecialValue(System.Double)">
            <exclude/>
            <summary>
            Determines whether the given <paramref name="value"/> is one of the special <see cref="T:System.Double"/> values.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>,
            or <see cref="F:System.Double.PositiveInfinity"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IsSpecialValue(System.Single)">
            <exclude/>
            <summary>
            Determines whether the given <paramref name="value"/> is one of the special <see cref="T:System.Single"/> values.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>,
            or <see cref="F:System.Single.PositiveInfinity"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IsNegativeZero(System.Double)">
            <exclude/>
            <summary>
            Determines whether the given <paramref name="value"/> is a floating-point negative zero <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The value to test.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is <c>-0.0</c>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.IsNegativeZero(System.Single)">
            <exclude/>
            <summary>
            Determines whether the given <paramref name="value"/> is a floating-point negative zero <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The value to test.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is <c>-0.0</c>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.OrdinalEqual(System.String,System.String)">
            <exclude/>
            <summary>
            Determines whether the ordinal values of a string are equivalent to the values of another string.
            </summary>
            <param name="value">The string to test.</param>
            <param name="comparand">The string to test <paramref name="value"/> against.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is ordinally equal to <paramref name="comparand"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.OrdinalEqual(System.String,System.String,System.Boolean)">
            <exclude/>
            <summary>
            Determines whether the ordinal values of a string are equivalent to the values of another string.
            </summary>
            <param name="value">The string to test.</param>
            <param name="comparand">The string to test <paramref name="value"/> against.</param>
            <param name="ignoreCase">
            Indicates whether <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> or <see cref="F:System.StringComparison.Ordinal"/> comparison is used.
            The default is <see langword="true"/> to use <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </param>
            <returns><see langword="true"/> if <paramref name="value"/> is ordinally equal to <paramref name="comparand"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.OrdinalStartsWith(System.String,System.String,System.Boolean)">
            <exclude/>
            <summary>
            Determines whether the ordinal values of a string are equivalent to the start values of another string.
            </summary>
            <param name="value">The string to test.</param>
            <param name="start">The string to test the start of <paramref name="value"/> against.</param>
            <param name="ignoreCase">
            Indicates whether <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> or <see cref="F:System.StringComparison.Ordinal"/> comparison is used.
            The default is <see langword="true"/> to use <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </param>
            <returns><see langword="true"/> if <paramref name="value"/> ordinally starts with <paramref name="start"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.OrdinalEndsWith(System.String,System.String,System.Boolean)">
            <exclude/>
            <summary>
            Determines whether the ordinal values of a string are equivalent to the end values of another string.
            </summary>
            <param name="value">The string to test.</param>
            <param name="end">The string to test the end of <paramref name="value"/> against.</param>
            <param name="ignoreCase">
            Indicates whether <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> or <see cref="F:System.StringComparison.Ordinal"/> comparison is used.
            The default is <see langword="true"/> to use <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </param>
            <returns><see langword="true"/> if <paramref name="value"/> ordinally ends with <paramref name="end"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.FormatWithCurrentCulture(System.String,System.Object[])">
            <exclude/>
            <summary>
            Formats a string with the specified arguments.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An array containing zero or more objects to format.</param>
            <returns>A copy of <paramref name="format"/> in which the format items have been replaced by the <see cref="T:System.String"/> equivalent of the corresponding instances in <paramref name="args"/>.</returns>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.GetDisplayName(System.Type)">
            <exclude/>
            <summary>
            Gets the displayable name of a type, including the names of generic type arguments.
            </summary>
            <param name="type">The type to format.</param>
            <returns>A display name for <paramref name="type"/>, or <see langword="null"/> if <paramref name="type"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.CommonExtensions.AtomicUpdate``2(``0@,``1,System.Func{``0,``1,``0})">
            <summary>
            Performs a lockless atomic update of an immutable value from a field using the specified update function.
            </summary>
            <remarks>
            <typeparamref name="T"/> must be immutable. <paramref name="update"/> should return a new instance to assign <paramref name="target"/>,
            <strong>not</strong> mutate <paramref name="target"/> directly. If no change is needed, <paramref name="update"/> should return <see langword="null"/>.
            </remarks>
            <typeparam name="T">The type of the field being updated.</typeparam>
            <typeparam name="S">The type of the state used by the update function.</typeparam>
            <param name="target">The field to update.</param>
            <param name="state">A state value used by the update function.</param>
            <param name="update">A function used to update <paramref name="target"/>.</param>
            <returns><see langword="true"/> if the update succeed, or <see langword="false"/> if <paramref name="update"/> returned <see langword="null"/>.</returns>
        </member>
        <member name="T:NationalInstruments.Restricted.ComplexParser">
            <exclude/>
            <summary>
            Parses complex number strings in "(R,I)" and "R ± I" formats.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ComplexParser.FloatNumberStyle">
            <summary>The <see cref="T:System.Globalization.NumberStyles"/> value for floating-point numbers.</summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ComplexParser.IntegerNumberStyle">
            <summary>The <see cref="T:System.Globalization.NumberStyles"/> value for integer numbers.</summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ComplexParser.TryParseDouble">
            <summary>The parse method for <see cref="T:System.Double"/> values.</summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ComplexParser.TryParseSingle">
            <summary>The parse method for <see cref="T:System.Single"/> values.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.ComplexParser.GetNumberFormat(System.IFormatProvider)">
            <summary>
            Gets the <see cref="T:System.Globalization.NumberFormatInfo"/> for the specified format provider.
            </summary>
            <param name="provider">A culture-specific format provider, or <see langword="null"/>.</param>
            <returns>The <see cref="T:System.Globalization.NumberFormatInfo"/> for <paramref name="provider"/>, or for the current culture if <paramref name="provider"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.ComplexParser.AttemptParse``1(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Restricted.ComplexParser.TryParse{``0},``0@,``0@)">
            <summary>
            Tries to parse the real and imaginary parts of a complex number.
            </summary>
            <typeparam name="T">The type of value to parse.</typeparam>
            <param name="input">The complex string to parse.</param>
            <param name="numberStyle">The style of number to parse.</param>
            <param name="provider">A culture-specific format provider, or <see langword="null"/>.</param>
            <param name="tryParse">A method used to parse <typeparamref name="T"/> values.</param>
            <param name="real">Contains the parsed real value, if successful.</param>
            <param name="imaginary">Contains the parsed imaginary value, if successful.</param>
            <returns><see langword="true"/> if <paramref name="input"/> contained a valid pair of <typeparamref name="T"/> values; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:NationalInstruments.Restricted.ComplexParser.TryParse`1">
            <summary>Represents the TryParse method on a numeric type.</summary>
            <typeparam name="T">The type of value to parse.</typeparam>
            <param name="input">The value string to parse.</param>
            <param name="numberStyle">The style of number to parse.</param>
            <param name="provider">A culture-specific format provider, or <see langword="null"/>.</param>
            <param name="result">Contains the parsed value, if successful.</param>
            <returns><see langword="true"/> if <paramref name="input"/> was a valid <typeparamref name="T"/> value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:NationalInstruments.Restricted.DigitalChangeType">
            <exclude/>
            <lastupdated>4/11/2005 10:54:51 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.DigitalChangeType.Data">
            <exclude/>
            <lastupdated>4/11/2005 10:54:55 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.DigitalChangeType.Timing">
            <exclude/>
            <lastupdated>4/11/2005 10:55:05 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.DigitalChangeType.Label">
            <exclude/>
            <lastupdated>4/11/2005 10:54:58 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.DigitalChangeType.All">
            <exclude/>
            <lastupdated>4/11/2005 10:54:58 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs">
            <exclude/>
            <lastupdated>4/11/2005 11:21:02 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.#ctor(NationalInstruments.DigitalWaveform,NationalInstruments.Restricted.DigitalChangeType)">
            <exclude/>
            <lastupdated>4/11/2005 11:21:17 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.#ctor(NationalInstruments.DigitalWaveform,System.Int32,System.Int32,NationalInstruments.Restricted.DigitalChangeType)">
            <exclude/>
            <lastupdated>4/11/2005 11:21:20 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.Waveform">
            <exclude/>
            <lastupdated>4/11/2005 11:21:14 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.SampleIndex">
            <exclude/>
            <lastupdated>4/11/2005 11:21:08 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.SignalIndex">
            <exclude/>
            <lastupdated>4/11/2005 11:21:10 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.DigitalWaveformChangedEventArgs.ChangeType">
            <exclude/>
            <lastupdated>4/11/2005 11:21:05 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.DigitalWaveformChangedEventHandler">
            <exclude/>
            <lastupdated>4/11/2005 11:22:22 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.EnumerableDebugView">
             <exclude/>
            
             <summary>
             Debugger proxy for custom enumeration-only.
             </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableDebugView.#ctor(System.Collections.IEnumerable)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableDebugView.GetItems(System.Collections.IEnumerable,System.Type)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.EnumerableDebugView.Items">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Restricted.EnumerableExtensions">
             <exclude/>
            
             <summary>
             Contains commonly used helper extension methods for collections.
             </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.EmptyArray``1">
            <summary>
            Returns an empty array of the specified type.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <returns>A <typeparamref name="T"/> array of length zero.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <exclude/>
            <summary>
            Determines whether the collection contains any elements.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The enumerable collection to check for emptiness.</param>
            <returns><see langword="true"/> if <paramref name="collection"/> contains no elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <exclude/>
            <summary>
            Determines whether the collection contains any elements.
            </summary>
            <param name="collection">The enumerable collection to check for emptiness.</param>
            <returns><see langword="true"/> if <paramref name="collection"/> contains no elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <exclude/>
            <summary>
            Filters <see langword="null"/> elements from the collection.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The enumerable collection to filter.</param>
            <returns>An enumerable collection containing no <see langword="null"/> elements.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <exclude/>
            <summary>
            Performs a specified action on each element in the collection.
            </summary>
            <remarks>
            The collection is enumerated immediately.
            <para>
            <see langword="null"/> may be passed for <paramref name="collection"/>, in which case <paramref name="action"/> will not be called.
            </para>
            </remarks>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The enumerable collection to perform the operation on.</param>
            <param name="action">The operation to perform on each element of <paramref name="collection"/>.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <exclude/>
            <summary>
            Performs a specified action on each element in the collection.
            </summary>
            <remarks>
            The collection is enumerated immediately.
            <para>
            <see langword="null"/> may be passed for <paramref name="collection"/>, in which case <paramref name="action"/> will not be called.
            </para>
            </remarks>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The enumerable collection to perform the operation on.</param>
            <param name="action">The operation to perform on each element of <paramref name="collection"/>.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <exclude/>
            <summary>
            Performs a specified action on each element in the collection.
            </summary>
            <remarks>
            The collection is enumerated immediately.
            <para>
            <see langword="null"/> may be passed for <paramref name="collection"/>, in which case <paramref name="action"/> will not be called.
            </para>
            </remarks>
            <param name="collection">The enumerable collection to perform the operation on.</param>
            <param name="action">The operation to perform on each element of <paramref name="collection"/>.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <exclude/>
            <summary>
            Determines the index of the first item in the collection matching the specified condition.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="condition">The condition the matching item must satisfy.</param>
            <returns>The index of the first item matching <paramref name="condition"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <exclude/>
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="value">The object to locate in the collection.</param>
            <returns>The index of <paramref name="value"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <exclude/>
            <summary>
            Determines the index of the first item in the collection matching the specified condition.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="condition">The condition the matching item must satisfy.</param>
            <returns>The index of the first item matching <paramref name="condition"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <exclude/>
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="value">The object to locate in the collection.</param>
            <returns>The index of <paramref name="value"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.TryGetItem``1(System.Collections.Generic.IList{``0},System.Int32,``0@)">
            <exclude/>
            <summary>
            Gets the item at the specified index in the collection, or returns <see langword="false"/> if the index is out of range.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="list">The list to index.</param>
            <param name="index">The prospective index of an element in the list.</param>
            <param name="value">On return, contains the element at <paramref name="index"/>, or the default value of <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if <paramref name="index"/> falls within the count of <paramref name="list"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.UpdateItem``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <exclude/>
            <summary>
            Performs the minimum number of changes to update a list item at a specified index:
            <para>
            - If <paramref name="newItem"/> is <see langword="null"/>, then the item at <paramref name="index"/> is removed.
            </para>
            <para>
            - If <paramref name="newItem"/> is not <see langword="null"/>, then either
               the item at <paramref name="index"/> is replaced with <paramref name="newItem"/>,
               or <paramref name="newItem"/> is added if <paramref name="list"/> does not contain <paramref name="index"/>.
            </para>
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="list">The list to update.</param>
            <param name="index">The item index to update.</param>
            <param name="newItem">The item to update the list with.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.GetNextIndexValue(System.Collections.Generic.IList{System.Int32},System.Int32@,System.Int32)">
            <exclude/>
            <summary>
            Updates <paramref name="index"/> and retrieves the value in <paramref name="indices"/> at that location,
            or returns <c>-1</c> if there are no more index values available in <paramref name="indices"/>.
            <para>
            Initial value of <paramref name="index"/> should be <c>-1</c> to retrieve the first value from <paramref name="indices"/>.
            </para>
            </summary>
            <param name="indices">The list of indices to read from.</param>
            <param name="index">The current index into <paramref name="indices"/>.</param>
            <param name="minimumIndex">The smallest acceptable index value.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.DisposeAll``1(System.Collections.Generic.IEnumerable{``0})">
            <exclude/>
            <summary>
            Disposes all elements in the collection.
            </summary>
            <remarks>
            The collection is enumerated immediately.
            <para>
            <see langword="null"/> may be passed for <paramref name="collection"/>.
            </para>
            </remarks>
            <param name="collection">The collection of items to dispose.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <exclude/>
            <summary>
            Adds the items to the end of the specified collection.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection to append to.</param>
            <param name="items">The items to add to <paramref name="collection"/>.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.RemoveRange(System.Collections.IList,System.Int32,System.Int32)">
            <exclude/>
            <summary>
            Removes the specified number of items from the collection, starting at the specified index.
            </summary>
            <param name="list">The collection to remove from.</param>
            <param name="index">The index of the first item to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.Generate``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <exclude/>
            <summary>
            Generates a collection of items while <paramref name="condition"/> returns <see langword="true"/>.
            </summary>
            <typeparam name="T">The type of item to enumerate.</typeparam>
            <param name="initial">The first item in the collection.</param>
            <param name="condition">The condition to determine when to stop enumerating items.</param>
            <param name="iterate">The operation to retrieve the next item in the collection.</param>
            <returns>The collection of generated items.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.GenerateUntilNull``1(``0,System.Func{``0,``0})">
            <exclude/>
            <summary>
            Generates a collection of items until <paramref name="iterate"/> returns a <see langword="null"/> item.
            </summary>
            <typeparam name="T">The type of item to enumerate.</typeparam>
            <param name="initial">The first item in the collection.</param>
            <param name="iterate">The operation to retrieve the next item in the collection.</param>
            <returns>The collection of generated items.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.MakeEnumerable``1(``0)">
            <exclude/>
            <summary>
            Creates a single-element collection out of the specified object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="item">The object to return in the collection.</param>
            <returns>An enumerable collection containing <paramref name="item"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.WrapEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <exclude/>
            <summary>
            Wraps a read-only collection in an enumeration to avoid leaking the internal collection to outside users.
            </summary>
            <remarks>
            The collection is enumerated lazily.
            <para>
            The underlying collection should not be modified while a user still holds a reference to the returned wrapping collection.
            </para>
            <para>
            <see langword="null"/> may be passed for <paramref name="collection"/>, in which case an empty collection will be returned.
            </para>
            </remarks>
            <typeparam name="T">The type of the elements of <paramref name="collection"/>.</typeparam>
            <param name="collection">The enumerable collection to wrap.</param>
            <returns>A new enumerable collection containing all of the elements in <paramref name="collection"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IList{``0})">
            <exclude/>
            <summary>
            Returns a new <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapping the specified list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A new <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapping the specified list.</returns>
        </member>
        <member name="T:NationalInstruments.Restricted.EnumUtility">
             <exclude/>
            
             <summary>
             Contains common utility methods for working with enum types.
             </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumUtility.IsExplicitlyDefined(System.Enum)">
            <exclude/>
            <summary>
            Determines whether the given <paramref name="value"/> is explicitly defined by the derived <see cref="T:System.Enum"/> enumType.
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> value to test.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is defined by the derived <see cref="T:System.Enum"/> enumType of <paramref name="value"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumUtility.IsDefined(System.Enum)">
            <exclude/>
            <summary>
            Determines whether the given <paramref name="value"/> is defined by the derived <see cref="T:System.Enum"/> enumType, or a combination of its flag values.
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> value to test.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is defined by the derived <see cref="T:System.Enum"/> enumType of <paramref name="value"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumUtility.GetValues``1">
            <exclude/>
            <summary>
            Gets an array of all values defined by the specified enum.
            </summary>
            <typeparam name="TEnum">The enumType of an enum.</typeparam>
            <returns>An array of all values defined by <typeparamref name="TEnum"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.EnumUtility.Parse``1(System.String,System.Boolean)">
            <exclude/>
            <summary>
            Converts the string representation of the name or numeric value of one or
            more enumerated constants to an equivalent enumerated object. A parameter
            specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="TEnum">An enumeration enumType.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
            <returns>An object of enumType <typeparamref name="TEnum"/> whose value is represented by <paramref name="value"/>.</returns>
        </member>
        <member name="T:NationalInstruments.Restricted.EvalReleaseLicense">
            <exclude/>
            <summary>To encapsulate the behavior of an eval-release license.</summary>
            <lastupdated>2/11/2003 2:44:54 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.#ctor(System.String[],System.String[],System.String,System.String)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:03 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.#ctor(System.String[],System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <exclude/>
            <lastupdated>2/01/2010 2:45:03 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.CheckForCorrectFileLicense(NationalInstruments.Internal.FileLicense)">
            <exclude/>
            <lastupdated>2/11/2003 2:44:58 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.CheckForCorrectLMLicense(NationalInstruments.Internal.LMLicense)">
            <exclude/>
            <lastupdated>2/05/2010 2:44:58 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.ComponentRunTimeCheck(System.Type,System.Object,System.String)">
            <exclude/>
            <lastupdated>2/11/2003 2:45:00 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.EvalReleaseLicense.ShowEvalBehavior(System.Type,System.Object,System.String)">
            <exclude/>
            <lastupdated>2/20/2003 2:40:56 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.EvalReleaseLicense.LicenseType">
            <exclude/>
            <lastupdated>2/20/2003 2:40:51 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.ExtendedPropertyKeys">
            <exclude/>
            
            <summary>
            Contains the keys for standard NI entries in the <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/> for waveforms.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ExtendedPropertyKeys.ChannelName">
            <summary>Gets the property key for the channel name.</summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ExtendedPropertyKeys.SignalNames">
            <summary>Gets the property key for the signal names.</summary>
        </member>
        <member name="F:NationalInstruments.Restricted.ExtendedPropertyKeys.UnitDescription">
            <summary>Gets the property key for the unit description.</summary>
        </member>
        <member name="T:NationalInstruments.Restricted.Guard`1">
             <exclude/>
            
             <summary>
             Centralizes the testing and exception throwing logic for common argument and value guards. See Example section for usage information.
             </summary>
            
             <remarks>
             The <see cref="T:NationalInstruments.Restricted.Guard`1"/> reduces copy-and-paste parameter validation by creating a single object to store common validation logic.
            
             <para>
             For example, whenever you want to guard an index argument for an array, you would need to perform the equivalent of the following:
             <code>
             if(index &lt; 0 || index &gt; array.Length)
             {
                 throw ExceptionBuilder.ArgumentOutOfRange("index", index, 0, array.Length);
             }
             </code>
             </para>
            
             <para>
             Instead of repeating this same code over and over again in each method, you could centralize the check into a helper method:
             <code>
             public static void ArrayIndexInRange(string name, int index, Array array)
             {
                 if(index &lt; 0 || index &gt; array.Length)
                 {
                     throw ExceptionBuilder.ArgumentOutOfRange(name, index, 0, array.Length);
                 }
             }
             </code>
             This reduces the code in each method to <c>ArrayIndexInRange( "index", index, array );</c>, and also simplifies defect fixes in validation logic
             (in case you didn't already notice, the code should actually read <c>index &gt;= array.Length</c>).
             </para>
            
             <para>
             <see cref="T:NationalInstruments.Restricted.Guard`1"/> standardizes this pattern by collecting common information about each argument or value,
             and providing a common object on which to hang helper methods.
             <see cref="T:NationalInstruments.Restricted.Guard`1"/> is declared as a <see langword="struct"/> to prevent the creation of transient objects that would need to be garbage collected.
             </para>
             </remarks>
            
             <example>
             Using the <see cref="M:NationalInstruments.Restricted.NIValidation.GuardParam``1(``0,System.String)"/> extension method, we can create a guard object for our <c>index</c> parameter and use it to validate its value:
             <code>
             index.GuardParam("index")
                 .ArrayIndexInRange(array);
             </code>
            
             <para>
             Since each guard method returns the same <see cref="T:NationalInstruments.Restricted.Guard`1"/> object passed in to it, multiple guards on the same value can be easily chained together.
             You can also use the ad-hoc <see cref="M:NationalInstruments.Restricted.Guard`1.Satisfies(System.Boolean,System.String,System.Object[])"/> guard method to validate any Boolean condition.
             <code>
             index.GuardParam("index")
                 .ArrayIndexInRange(array)
                 .Satisfies(index % 2 == 0, "The value of index is not even");
             </code>
             </para>
            
             <para>
             If you find yourself using the same ad-hoc test repeatedly, you can create your own guard extension method to encapsulate that logic:
             <code>
             public static Guard&lt;int&gt; IsEven(this Guard&lt;int&gt; guard)
             {
                 return guard.Satisfies(guard.Value % 2 == 0, "The value of {0} is not even.", guard.Name);
             }
            
             ...
             index.GuardParam("index")
                 .ArrayIndexInRange(array)
                 .IsEven();
             </code>
             </para>
             </example>
        </member>
        <member name="F:NationalInstruments.Restricted.Guard`1.IsParam">
            <exclude/>
            <summary>
            <see langword="true"/> if the guarded variable is a method parameter; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.Guard`1.Value">
            <exclude/>
            <summary>
            Holds the value of the guarded variable.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.Guard`1.Name">
            <exclude/>
            <summary>
            A user-friendly name of the guarded variable.
            </summary>
            <remarks>
            For method arguments, <see cref="F:NationalInstruments.Restricted.Guard`1.Name"/> should be the name of the argument.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Restricted.Guard`1.#ctor(System.Boolean,`0,System.String)">
            <exclude/>
            <summary>
            Creates a new instance of <see cref="T:NationalInstruments.Restricted.Guard`1"/>.
            </summary>
            <param name="isParam"><see langword="true"/> for method parameters; otherwise, <see langword="false"/>.</param>
            <param name="value">The value of the guarded variable.</param>
            <param name="name">A user-friendly name of the guarded variable.</param>
            <parameter name="value"><attribute ctor="M:NationalInstruments.Restricted.NoEnumerationAttribute.#ctor"/></parameter>
        </member>
        <member name="M:NationalInstruments.Restricted.Guard`1.Satisfies(System.Boolean,System.Func{System.Object,System.String,System.String,System.Exception},System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the guarded variable satisfies the specified <paramref name="condition"/>.
            </summary>
            <param name="condition">The condition the guarded variable must satisfy.</param>
            <param name="exceptionCreator">An <see cref="T:System.Func`4"/> to create an appropriate exception for the <paramref name="condition"/>.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <returns>The current <see cref="T:NationalInstruments.Restricted.Guard`1"/> object.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>condition:false =&gt; void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.Guard`1.Satisfies(System.Boolean,System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the guarded variable satisfies the specified <paramref name="condition"/>.
            </summary>
            <remarks>
            Uses <see cref="F:NationalInstruments.Restricted.GuardExceptions.DefaultParamExceptionCreator"/> if <see cref="F:NationalInstruments.Restricted.Guard`1.IsParam"/> is <see langword="true"/>;
            otherwise, uses <see cref="F:NationalInstruments.Restricted.GuardExceptions.DefaultValueExceptionCreator"/>.
            </remarks>
            <param name="condition">The condition the guarded variable must satisfy.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <returns>The current <see cref="T:NationalInstruments.Restricted.Guard`1"/> object.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
            <attribute ctor="M:NationalInstruments.Restricted.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>condition:false =&gt; void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.Guard`1.Is``1">
            <exclude/>
            <summary>
            Ensures the variable derives from the specified type.
            </summary>
            <typeparam name="TTarget">The expected type.</typeparam>
            <returns>A new <see cref="T:NationalInstruments.Restricted.Guard`1"/> object containing the <typeparamref name="TTarget"/> value.</returns>
            <remarks>
            This method is implemented on <see cref="T:NationalInstruments.Restricted.Guard`1"/> so that the type <typeparamref name="TTarget"/>
            can be specified as part of the method call, without repeating the type of the guard
            (as would be required on an equivalent <c>Is&lt;T,U&gt;</c> extension method).
            </remarks>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="T:NationalInstruments.Restricted.GuardExceptions">
             <exclude/>
            
             <summary>
             Holds methods used to create exceptions thrown by <see cref="T:NationalInstruments.Restricted.Guard`1"/>.
             </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.BlankMessage">
            <exclude/>
            <summary>
            An empty value for use with exceptions that do not use a custom message.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateInvalidOperationException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/> with the specified message.
            </summary>
            <remarks>
            This is the default exception build used by <see cref="T:NationalInstruments.Restricted.Guard`1"/> for non-parameter variables
            (<see cref="F:NationalInstruments.Restricted.Guard`1.IsParam"/> is <see langword="false"/>).
            </remarks>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateArgumentException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the specified parameter name and message.
            </summary>
            <remarks>
            This is the default exception build used by <see cref="T:NationalInstruments.Restricted.Guard`1"/> for parameter variables
            (<see cref="F:NationalInstruments.Restricted.Guard`1.IsParam"/> is <see langword="true"/>).
            </remarks>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateArgumentNullException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the specified parameter name.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateArgumentOutOfRangeException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the specified parameter name, value, and message.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateInvalidEnumArgumentException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> with the specified parameter name, value, and message.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateFormatException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.FormatException"/> with the specified message.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.CreateObjectDisposedException">
            <exclude/>
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> with the specified parameter name.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.DefaultParamExceptionCreator">
            <exclude/>
            <summary>
            The default exception creator to use for method parameters.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.GuardExceptions.DefaultValueExceptionCreator">
            <exclude/>
            <summary>
            The default exception creator to use for derived variables.
            </summary>
        </member>
        <member name="T:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1">
            <exclude/>
            <lastupdated>11/20/2007 11:26:00 AM</lastupdated>
            <updatedby>Hexar Anderson</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.LoadData(`0[],System.Int32,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:29:06 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.LoadData(`0[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <exclude/>
            <lastupdated>4/25/2012 9:29:09 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:29:11 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <exclude/>
            <lastupdated>4/25/2012 9:29:13 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.SetTimingNoChangedEvent(NationalInstruments.WaveformTiming[])">
            <exclude/>
            <lastupdated>4/25/2012 9:29:21 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.SetTimingNoChangedEvent(NationalInstruments.PrecisionWaveformTiming[])">
            <exclude/>
            <lastupdated>4/25/2012 9:29:19 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.OnChanged(NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>4/25/2012 9:29:16 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformCollectionService`1.GetData">
            <exclude/>
            <lastupdated>4/25/2012 9:29:04 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IAnalogWaveformService">
            <exclude/>
            <lastupdated>11/21/2005 11:11:17 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService.LoadData(System.Array,System.Type)">
            <exclude/>
            <lastupdated>11/21/2005 11:11:28 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService.LoadData(System.Array,System.Type,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>11/28/2005 4:32:46 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IAnalogWaveformService`1">
            <exclude/>
            <lastupdated>11/21/2005 11:11:17 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService`1.LoadData(`0)">
            <exclude/>
            <lastupdated>11/21/2005 11:11:28 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService`1.LoadData(`0,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>11/28/2005 4:32:46 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IAnalogWaveformService2`1">
            <exclude/>
            <lastupdated>10/25/2007 04:35:00 PM</lastupdated>
            <updatedby>Hexar Anderson</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.LoadData(`0[])">
            <exclude/>
            <lastupdated>4/25/2012 9:10:13 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.LoadData(`0[],System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:16 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.LoadDataNoChangedEvent(`0[])">
            <exclude/>
            <lastupdated>4/25/2012 9:10:19 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:22 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.SetTimingNoChangedEvent(NationalInstruments.WaveformTiming)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:34 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.SetTimingNoChangedEvent(NationalInstruments.PrecisionWaveformTiming)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:32 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.RequestBuffer(System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:29 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.GetBuffer">
            <exclude/>
            <lastupdated>4/25/2012 9:10:06 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.OnChanged(System.Int32,System.Int32,NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:24 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.OnChanged(NationalInstruments.Restricted.WaveformChangedEventArgs{`0})">
            <exclude/>
            <lastupdated>4/25/2012 9:10:27 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IAnalogWaveformService2`1.InvalidateData">
            <exclude/>
            <lastupdated>4/25/2012 9:10:10 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.IAnalogWaveformService2`1.Capacity">
            <exclude/>
            <lastupdated>4/25/2012 9:10:03 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.Restricted.IAnalogWaveformService2`1.Changed">
            <exclude/>
            <lastupdated>4/25/2012 9:10:36 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IComplexWaveformCollectionService`1">
            <exclude/>
            <lastupdated>12/5/2007 11:26:00 AM</lastupdated>
            <updatedby>Prajeesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.LoadData(`0[],System.Int32,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:31:11 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.LoadData(`0[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <exclude/>
            <lastupdated>4/25/2012 9:31:14 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:31:16 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <exclude/>
            <lastupdated>4/25/2012 9:31:18 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.SetTimingNoChangedEvent(NationalInstruments.PrecisionWaveformTiming[])">
            <exclude/>
            <lastupdated>4/25/2012 9:31:22 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.OnChanged(NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>4/25/2012 9:31:20 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformCollectionService`1.GetData">
            <exclude/>
            <lastupdated>4/25/2012 9:31:09 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IComplexWaveformService`1">
            <exclude/>
            <lastupdated>25/10/2007 7:52:53 PM</lastupdated>
            <updatedby>Mahesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService`1.LoadData(`0)">
            <exclude/>
            <lastupdated>25/10/2007 7:52:58 PM</lastupdated>
            <updatedby>Mahesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService`1.LoadData(`0,System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>25/10/2007 7:53:03 PM</lastupdated>
            <updatedby>Mahesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IComplexWaveformService2`1">
            <exclude/>
            <lastupdated>12/5/2007 04:35:00 PM</lastupdated>
            <updatedby>Prajeesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.LoadData(`0[])">
            <exclude/>
            <lastupdated>4/25/2012 9:12:30 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.LoadData(`0[],System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:12:35 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.LoadDataNoChangedEvent(`0[])">
            <exclude/>
            <lastupdated>4/25/2012 9:12:37 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:12:39 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.SetTimingNoChangedEvent(NationalInstruments.PrecisionWaveformTiming)">
            <exclude/>
            <lastupdated>4/25/2012 9:12:47 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.RequestBuffer(System.Int32)">
            <exclude/>
            <lastupdated>4/25/2012 9:12:45 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.GetBuffer">
            <exclude/>
            <lastupdated>4/25/2012 9:12:24 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.OnChanged(System.Int32,System.Int32,NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>4/25/2012 9:12:40 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.OnChanged(NationalInstruments.Restricted.WaveformChangedEventArgs{`0})">
            <exclude/>
            <lastupdated>4/25/2012 9:12:43 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IComplexWaveformService2`1.InvalidateData">
            <exclude/>
            <lastupdated>4/25/2012 9:12:28 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.IComplexWaveformService2`1.Capacity">
            <exclude/>
            <lastupdated>4/25/2012 9:12:23 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.Restricted.IComplexWaveformService2`1.Changed">
            <exclude/>
            <lastupdated>4/25/2012 9:12:49 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IConvertibleType">
            <exclude/>
            <summary>Defines an interface that types can implement to customize data conversion behavior when used with the DataConverter class.</summary>
            <lastupdated>7/23/2002 12:42:06 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IConvertibleType.CanConvertTo(System.Type)">
            <exclude/>
            <lastupdated>7/23/2002 12:42:08 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IConvertibleType.ConvertTo(System.Type)">
            <exclude/>
            <lastupdated>7/23/2002 12:42:17 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IDigitalWaveformService">
            <exclude/>
            <lastupdated>4/11/2005 11:22:26 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.LoadData(NationalInstruments.DigitalState[0:,0:])">
            <exclude/>
            <lastupdated>4/11/2005 11:22:29 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.LoadDataNoChangedEvent(NationalInstruments.DigitalState[0:,0:])">
            <exclude/>
            <lastupdated>4/25/2012 9:10:19 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.GetData">
            <exclude/>
            <lastupdated>4/11/2005 11:22:29 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.SetTimingNoChangedEvent(NationalInstruments.WaveformTiming)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:34 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.SetTimingNoChangedEvent(NationalInstruments.PrecisionWaveformTiming)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:32 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.OnChanged(NationalInstruments.Restricted.DigitalWaveformChangedEventArgs)">
            <exclude/>
            <lastupdated>4/25/2012 9:10:27 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IDigitalWaveformService.InvalidateData">
            <exclude/>
            <lastupdated>4/25/2012 9:10:10 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.Restricted.IDigitalWaveformService.Changed">
            <exclude/>
            <lastupdated>4/11/2005 11:22:32 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.ImplicitRefreshItem">
            <exclude/>
            <lastupdated>7/7/2005 9:26:25 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ImplicitRefreshItem.#ctor">
            <exclude/>
            <lastupdated>7/7/2005 9:26:31 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.ImplicitRefreshItem.Refresh">
            <exclude/>
            <lastupdated>7/7/2005 9:26:34 AM</lastupdated>
            <updatedby>Brock</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IPrecisionDateTimeService">
            <exclude/>
            <lastupdated>7/25/2006 5:13:35 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IPrecisionDateTimeService.GetWholeSecondsByEpoch(NationalInstruments.Restricted.PrecisionDateTimeEpoch)">
            <exclude/>
            <lastupdated>7/25/2006 5:13:40 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.IPrecisionDateTimeService.GetFractionalSecondTicksByEpoch(NationalInstruments.Restricted.PrecisionDateTimeEpoch)">
            <exclude/>
            <lastupdated>7/25/2006 5:13:37 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.IProxyLicenser">
            <exclude/>
            <lastupdated>2/28/2012 2:44:59 PM</lastupdated>
            <updatedby>Owen Pellegrin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.IProxyLicenser.LicenseType">
            <exclude/>
            <lastupdated>2/28/2012 2:44:59 PM</lastupdated>
            <updatedby>Owen Pellegrin</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.ISpectrumCollectionService`1">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.LoadData(`0[],System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.LoadData(`0[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.SetStartFrequencyNoChangedEvent(System.Double[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.SetFrequencyIncrementNoChangedEvent(System.Double[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.OnChanged(NationalInstruments.Restricted.SpectrumChangeType)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumCollectionService`1.GetData">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Restricted.ISpectrumService`1">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.LoadData(`0[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.LoadData(`0[],System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.LoadDataNoChangedEvent(`0[])">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.LoadDataNoChangedEvent(`0[],System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.SetStartFrequencyNoChangedEvent(System.Double)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.SetFrequencyIncrementNoChangedEvent(System.Double)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.RequestBuffer(System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.GetBuffer">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.OnChanged(System.Int32,System.Int32,NationalInstruments.Restricted.SpectrumChangeType)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.OnChanged(NationalInstruments.Restricted.SpectrumChangedEventArgs{`0})">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.ISpectrumService`1.InvalidateData">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.ISpectrumService`1.Capacity">
            <exclude/>
        </member>
        <member name="E:NationalInstruments.Restricted.ISpectrumService`1.Changed">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Restricted.PureAttribute">
            <exclude/>
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:NationalInstruments.Restricted.StringFormatMethodAttribute">
            <exclude/>
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:NationalInstruments.Restricted.StringFormatMethodAttribute.#ctor(System.String)">
            <exclude/>
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:NationalInstruments.Restricted.StringFormatMethodAttribute.FormatParameterName">
            <exclude/>
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:NationalInstruments.Restricted.ContractAnnotationAttribute">
            <exclude/>
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
            <exclude/>
            <summary>
            Initializes new instance of ContractAnnotationAttribute
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
            <exclude/>
            <summary>
            Initializes new instance of ContractAnnotationAttribute
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.ContractAnnotationAttribute.Contract">
            <exclude/>
            <summary>
            Gets method contract
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.ContractAnnotationAttribute.ForceFullStates">
            <exclude/>
            <summary>
            Gets a value indicating whether inputs with unknown values should be treated pessimistically (i.e. if unknown, assume null)
            </summary>
        </member>
        <member name="T:NationalInstruments.Restricted.CanBeNullAttribute">
            <exclude/>
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:NationalInstruments.Restricted.NotNullAttribute">
            <exclude/>
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:NationalInstruments.Restricted.NoEnumerationAttribute">
            <exclude/>
            <summary>
            Indicates that IEnumarable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:NationalInstruments.Restricted.LazyLocalMap`2">
            <exclude/>
            <summary>
            Represents a lazily-initialized dictionary that will return return an existing element,
            or will automatically create a new element with the specified initialize method when one does not already exist.
            </summary>
            <remarks>
            Using the indexer is always guaranteed to return an initialized value. Useful when the value is dependent on the key,
            or when a useful default value exists. Can also function without caching the results, in cases where keys are only accessed once.
            <note type="note">
            <see cref="T:NationalInstruments.Restricted.LazyLocalMap`2"/> is NOT thread-safe, and should only be used for LOCAL values.
            <see cref="T:NationalInstruments.Restricted.LazyMap`2"/> IS thread-safe and can be used statically from multiple threads.
            </note>
            </remarks>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyLocalMap`2"/> instance using the specified initialize method and key comparer.
            </summary>
            <param name="initialize">The method to use to initialize new elements.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="initialize"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyLocalMap`2"/> instance using the specified initialize method.
            </summary>
            <param name="initialize">The method to use to initialize new elements.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="initialize"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.#ctor">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyLocalMap`2"/> instance using a default initialize method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.CurrentlyContainsKey(`0)">
            <summary>
            Determines whether the specified key is currently in the dictionary.
            </summary>
            <param name="key">The key to test.</param>
            <returns><see langword="true"/> if <paramref name="key"/> is in the dictionary; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.TryGetCurrent(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the object from the dictionary with the specified key,
            or the default value of <typeparamref name="TValue"/> if the operation failed.
            </param>
            <remarks><see langword="true"/> if the key was found in the dictionary; otherwise, <see langword="false"/>.</remarks>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.TryRemoveCurrent(`0,`1@)">
            <summary>
            Attempts to remove and return the value associated with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the value to remove and return.</param>
            <param name="value">
            When this method returns, contains the object from the dictionary with the specified key,
            or the default value of <typeparamref name="TValue"/> if the operation failed.
            </param>
            <remarks><see langword="true"/> if the key was removed successfully; otherwise, <see langword="false"/>.</remarks>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the dictionary, if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>
            The value for the key.
            This will be either the existing value for the key if the key is already in the dictionary,
            or the new value for the key as returned by <paramref name="valueFactory"/> if the key was not in the dictionary or caching is disabled.
            </returns>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.Clear">
            <summary>
            Removes all cached keys and values from the collection.
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyLocalMap`2.ToString">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyLocalMap`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not found,
            a new element will be initialized for that key and returned (using the initialize method specified in the constructor).
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Caching is disabled.
                <para>-or-</para>
                <para><see cref="P:NationalInstruments.Restricted.LazyLocalMap`2.KeyFilter"/> returns <see langword="false"/> for <paramref name="key"/>.</para>
            </exception>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyLocalMap`2.KeyFilter">
            <summary>
            Gets or sets a predicate used to filter which keys are stored in the cache when caching is enabled.
            </summary>
            <remarks>
            When <see cref="P:NationalInstruments.Restricted.LazyLocalMap`2.KeyFilter"/> returns <see langword="false"/> for a key,
            the initialize function is always used to calculate the return value.
            Can be used to avoid filling the cache with default values for uninteresting keys.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyLocalMap`2.CurrentCount">
            <summary>
            Gets the number of items currently in the dictionary.
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyLocalMap`2.CurrentKeys">
            <summary>
            Gets the collection of keys currently in the dictionary.
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyLocalMap`2.CurrentValues">
            <summary>
            Gets the collection of values currently in the dictionary.
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyLocalMap`2.CurrentItems">
            <summary>
            Gets the collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> entries currently in the dictionary.
            </summary>
        </member>
        <member name="T:NationalInstruments.Restricted.LazyMap`2">
            <exclude/>
            <summary>
            Represents a thread-safe lazily-initialized dictionary that will return return an existing element,
            or will automatically create a new element with the specified initialize method when one does not already exist.
            </summary>
            <remarks>
            Using the indexer is always guaranteed to return an initialized value. Useful when the value is dependent on the key,
            or when a useful default value exists. Can also function without caching the results, in cases where keys are only accessed once.
            </remarks>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1},System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyMap`2"/> instance using the specified initialize method and key comparer.
            </summary>
            <param name="initialize">The method to use to initialize new elements.</param>
            <param name="enableCaching">Determines whether values will be cached.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="initialize"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1},System.Boolean)">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyMap`2"/> instance using the specified initialize method and key comparer.
            </summary>
            <param name="initialize">The method to use to initialize new elements.</param>
            <param name="enableCaching">Determines whether values will be cached.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="initialize"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyMap`2"/> instance using the specified initialize method and key comparer.
            </summary>
            <param name="initialize">The method to use to initialize new elements.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="initialize"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyMap`2"/> instance using the specified initialize method.
            </summary>
            <param name="initialize">The method to use to initialize new elements.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="initialize"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.#ctor">
            <summary>
            Creates a new <see cref="T:NationalInstruments.Restricted.LazyMap`2"/> instance using a default initialize method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.CurrentlyContainsKey(`0)">
            <summary>
            Determines whether the specified key is currently in the dictionary.
            </summary>
            <param name="key">The key to test.</param>
            <returns><see langword="true"/> if <paramref name="key"/> is in the dictionary; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.TryGetCurrent(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the object from the dictionary with the specified key,
            or the default value of <typeparamref name="TValue"/> if the operation failed.
            </param>
            <remarks><see langword="true"/> if the key was found in the dictionary; otherwise, <see langword="false"/>.</remarks>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.TryRemoveCurrent(`0,`1@)">
            <summary>
            Attempts to remove and return the value associated with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the value to remove and return.</param>
            <param name="value">
            When this method returns, contains the object from the dictionary with the specified key,
            or the default value of <typeparamref name="TValue"/> if the operation failed.
            </param>
            <remarks><see langword="true"/> if the key was removed successfully; otherwise, <see langword="false"/>.</remarks>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the dictionary, if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>
            The value for the key.
            This will be either the existing value for the key if the key is already in the dictionary,
            or the new value for the key as returned by <paramref name="valueFactory"/> if the key was not in the dictionary or caching is disabled.
            </returns>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.Clear">
            <summary>
            Removes all cached keys and values from the collection.
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.DisableCaching">
            <summary>
            Disables caching of values in the lazy map.
            </summary>
            <remarks>
            When caching is disabled, the initialize function is always used to calculate the return value.
            This can be useful for cases where keys are accessed only once, making the cached value unnecessary,
            while still keeping the dictionary-like interface.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Restricted.LazyMap`2.ToString">
            <inheritdoc/>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not found,
            a new element will be initialized for that key and returned (using the initialize method specified in the constructor).
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Caching is disabled.
                <para>-or-</para>
                <para><see cref="P:NationalInstruments.Restricted.LazyMap`2.KeyFilter"/> returns <see langword="false"/> for <paramref name="key"/>.</para>
            </exception>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.IsCaching">
            <summary>
            Gets a value indicating whether caching is enabled on the map.
            </summary>
            <remarks>
            When caching is disabled, the initialize function is always used to calculate the return value.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.KeyFilter">
            <summary>
            Gets or sets a predicate used to filter which keys are stored in the cache when caching is enabled.
            </summary>
            <remarks>
            When <see cref="P:NationalInstruments.Restricted.LazyMap`2.KeyFilter"/> returns <see langword="false"/> for a key,
            the initialize function is always used to calculate the return value.
            Can be used to avoid filling the cache with default values for uninteresting keys.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentCount">
            <summary>
            Gets the number of items currently in the dictionary.
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentKeys">
            <summary>
            Gets the collection of keys currently in the dictionary.
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentValues">
            <summary>
            Gets the collection of values currently in the dictionary.
            </summary>
        </member>
        <member name="P:NationalInstruments.Restricted.LazyMap`2.CurrentItems">
            <summary>
            Gets the collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> entries currently in the dictionary.
            </summary>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenseManagerFeature">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseManagerFeature.Enterprise">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseManagerFeature.Professional">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseManagerFeature.Standard">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseManagerFeature.Debug">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseManagerFeature.Compile">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenseManagerFeatureInfo">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseManagerFeatureInfo.#ctor">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.LicenseStatus">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.Expiration">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.Package">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.FeatureName">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.LicenseType">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.MajorVersion">
            <exclude/>
            <lastupdated>5/14/2012 1:01:00 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.MinorVersion">
            <exclude/>
            <lastupdated>5/14/2012 1:01:00 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfo.MaintVersion">
            <exclude/>
            <lastupdated>5/14/2012 1:01:00 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.#ctor">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.FeatureInfo">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.CreateDate">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.SuppressEvaluationDialog">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.UnlicensedDialogLastDisplayTime">
            <exclude/>
            <lastupdated>9/3/2010 3:39 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.SuppressUnlicensedDialog">
            <exclude/>
            <lastupdated>9/3/2010 3:39 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.GuestAccountDialogLastDisplayTime">
            <exclude/>
            <lastupdated>4/8/2011 10:19 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.SuppressGuestAccountDialog">
            <exclude/>
            <lastupdated>4/8/2011 10:19 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.IsActivated">
            <exclude/>
            <lastupdated>8/30/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.IsAllowedAccount">
            <exclude/>
            <lastupdated>4/12/2011 10:18:04 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.IsCheckoutFromServer">
            <exclude/>
            <lastupdated>10/28/2011 10:18:04 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.ActivatedLicense">
            <exclude/>
            <lastupdated>8/30/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseManagerFeatureInfoDictionary.MachineName">
            <exclude/>
            <lastupdated>3/29/2010 1:01:00 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenseProviderBase">
            <exclude/>
            <summary>Base class for individual license providers.</summary>
            <lastupdated>8/3/2002 9:28:20 PM</lastupdated>
            <updatedby>Matthew Jennings</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseProviderBase.#ctor">
            <exclude/>
            <lastupdated>2/11/2003 2:46:09 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseProviderBase.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <exclude/>
            <lastupdated>2/11/2003 2:46:07 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenseProviderBase.RegisterNIAssembly(System.String)">
            <exclude/>
            <lastupdated>4/27/2015 2:46:07 PM</lastupdated>
            <updatedby>Bhavesh Shura</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.LicenseProviderBase.License">
            <exclude/>
            <lastupdated>2/11/2003 2:46:12 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenserHelper">
            <exclude/>
            <summary>Contains Decryption-Encryption implementations as well as registry functions.</summary>
            <lastupdated>6/5/2003 5:52:51 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.GetPathFromRegistry(System.String)">
            <exclude/>
            <lastupdated>6/5/2003 5:53:01 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.FileExists(System.String)">
            <exclude/>
            <lastupdated>6/5/2003 5:52:55 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.DecryptBase64(System.String)">
            <exclude/>
            <lastupdated>6/5/2003 5:52:55 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.DecryptRegLicense(System.String)">
            <exclude/>
            <lastupdated>8/24/2011 2:47:42 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.Encrypt(System.String)">
            <exclude/>
            <lastupdated>6/5/2003 5:52:58 PM</lastupdated>
            <updatedby>Brock Reeve</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.EncryptRegLicense(System.String)">
            <exclude/>
            <lastupdated>8/24/2011 2:47:42 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.LicenserHelper.GetHighestLicenseVersionString">
            <exclude/>
            <lastupdated>9/24/2014 4:15:35 PM</lastupdated>
            <updatedby>Bhavesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.LicenseType">
            <exclude/>
            <lastupdated>2/28/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseType.Release">
            <exclude/>
            <lastupdated>2/28/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseType.Eval">
            <exclude/>
            <lastupdated>2/28/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseType.Beta">
            <exclude/>
            <lastupdated>2/28/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseType.Invalid">
            <exclude/>
            <lastupdated>3/03/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.LicenseType.BetaRelease">
            <exclude/>
            <lastupdated>2/28/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.MSLicenseManager">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.Finalize">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.Dispose">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.Dispose(System.Boolean)">
            <exclude/>
            <lastupdated>3/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.ValidateLicenseManagerFeature(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/18/2011 5:08 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.GetLicenseType(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/26/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.GetLicenseTypeInternal(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean)">
            <exclude/>
            <lastupdated>9/3/2010 3:52 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.GetExpiration(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.HasFeature(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.GetStatus(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.GetFeatureInfo(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean)">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.CheckinFeature(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/15/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.CheckinAll">
            <exclude/>
            <lastupdated>2/15/2010 5:00:10 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.CheckInVLMLicenses">
            <exclude/>
            <lastupdated>1/26/2012 4:12:31 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.IsLicenseFromVLM">
            <exclude/>
            <lastupdated>2/1/2012 4:53:31 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.ActivateFamily(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>3/29/2010 4:16:19 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.ShowUnlicensedFeatureDialog(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean)">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.ShowStartupDialog(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean)">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.CheckoutNoDialog(NationalInstruments.Restricted.LicenseManagerFeature)">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.IntegrationLicenseCheck(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
            <lastupdated>9/2/2010 10:49 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.CheckoutStartupFeature(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
            <lastupdated>2/15/2010 5:00:10 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.CheckoutStartupFeature(NationalInstruments.Restricted.LicenseManagerFeature,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
            <lastupdated>2/15/2010 5:00:10 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.IsCheckoutFromServer">
            <exclude/>
            <lastupdated>11/09/2009 06:05:10 PM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MSLicenseManager.DeleteSerializedFiles">
            <exclude/>
            <lastupdated>2/24/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.MSLicenseManager.Disposed">
            <exclude/>
            <lastupdated>3/22/2010 11:00:10 AM</lastupdated>
            <updatedby>Jessie Mihalik</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.MultiKeyDictionary`3">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.#ctor">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.Add(`0,`1,`2)">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.Clear">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.ContainsKey(`0,`1)">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.Remove(`0,`1)">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.MultiKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.MultiKeyDictionary`3.Item(`0,`1)">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.NILog">
            <exclude/>
            <summary>
            Supports high-performance message logging for NI components. This class is thread safe.
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.IsLevelEnabled(NationalInstruments.Logging.NILogMessageLevel)">
            <exclude/>
            <summary>Returns true if the given level is enabled by at least one of the loggers.</summary>
            <param name="level">The level to check.</param>
            <returns><see langword="true"/> if the given level is enabled by at least one of the loggers; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.RegisterLogger(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)">
            <summary>A thread-safe method to add a logger.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.QueueMessage(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String)">
            <summary>Adds a message to the dispatcher to send to registered loggers.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String)">
            <exclude/>
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object)">
            <exclude/>
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">The format string used to create the message.</param>
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object,System.Object)">
            <exclude/>
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">The format string used to create the message.</param>
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
            <param name="arg2">Format argument 2 to <paramref name="format"/>.</param>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object,System.Object,System.Object)">
            <exclude/>
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category (for non-public classes this should not be the class name).</param>
            <param name="format">The format string used to create the message.</param>
            <param name="arg1">Format argument 1 to <paramref name="format"/>.</param>
            <param name="arg2">Format argument 2 to <paramref name="format"/>.</param>
            <param name="arg3">Format argument 3 to <paramref name="format"/>.</param>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.Message(NationalInstruments.Logging.NILogMessageLevel,System.String,System.String,System.Object[])">
            <exclude/>
            <summary>A thread-safe method to log a message asynchronously.</summary>
            <param name="level">The level at which to log a message.</param>
            <param name="category">The message category.</param>
            <param name="format">The format string to use to create the message.</param>
            <param name="args">Format arguments to <paramref name="format"/>.</param>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="T:NationalInstruments.Restricted.NILog.LoggerRegistration">
            <summary>Represents the registration for a logger at a specified minimum message level.</summary>
        </member>
        <member name="T:NationalInstruments.Restricted.NILog.LogDispatcher">
            <summary>Maintains logger registrations and the queue of outstanding messages.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.LogDispatcher.RegisterLogger(NationalInstruments.Logging.NILoggerBase,NationalInstruments.Logging.NILogMessageLevel)">
            <summary>Registers a logger to receive messages.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.LogDispatcher.UnregisterLogger(NationalInstruments.Restricted.NILog.LoggerRegistration)">
            <summary>Removes a logger from receiving messages.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.LogDispatcher.QueueMessage(NationalInstruments.Logging.NILogMessage)">
            <summary>Queues a message to be sent to registered loggers.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.LogDispatcher.DispatchMessages">
            <summary>Sends messages to registered loggers.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.LogDispatcher.GetUnusedRegistrationKey">
            <summary>Finds the next available unused registration key.</summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NILog.LogDispatcher.GetMinimumLoggingLevel">
            <summary>Retrieves the smallest level among all registered loggers.</summary>
        </member>
        <member name="P:NationalInstruments.Restricted.NILog.LogDispatcher.Instance">
            <summary>Provides atomic access to the current dispatcher instance.</summary>
        </member>
        <member name="P:NationalInstruments.Restricted.NILog.LogDispatcher.MinimumLevel">
            <summary>Gets the minimum message level of all registered loggers.</summary>
        </member>
        <member name="T:NationalInstruments.Restricted.NIValidation">
            <exclude/>
            
            <summary>
            Contains extension methods to validate variables.
            </summary>
            
            <remarks>
            <list type="table">
              <item>
                <term><c>Validation.Guards.cs</c></term>
                <description>
                  Contains extension methods for <see cref="T:NationalInstruments.Restricted.Guard`1"/>, including 
                  <see cref="M:NationalInstruments.Restricted.NIValidation.GuardParam``1(``0,System.String)"/> to create a <see cref="T:NationalInstruments.Restricted.Guard`1"/> for a method parameter, and
                  <see cref="M:NationalInstruments.Restricted.NIValidation.GuardValue``1(``0,System.String)"/> to create a <see cref="T:NationalInstruments.Restricted.Guard`1"/> for a derived variable.
                </description>
              </item>
              <item>
                <term><c>Validation.Checks.cs</c></term>
                <description>
                  Contains light-weight <c>DEBUG</c>-only extension methods to ensure 
                  internal parameters and local variables have valid values.
                </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:NationalInstruments.Restricted.NIValidation.DebugBuildSymbol">
            <exclude/>
            <summary>
            The conditional compilation symbol defined only for Debug builds.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.NIValidation.NullObjectName">
            <exclude/>
            <summary>
            The name to use when an object is null.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.NIValidation.EmptyObjects">
            <exclude/>
            <summary>
            An empty <see cref="T:System.Object"/> array to use for the <c>args</c> parameter on <see cref="M:NationalInstruments.Restricted.NIValidation.DebugConditionCore(System.Boolean,System.String,System.Object[],System.String[])"/>, when format arguments are not used.
            </summary>
        </member>
        <member name="F:NationalInstruments.Restricted.NIValidation.EmptyStrings">
            <exclude/>
            <summary>
            An empty <see cref="T:System.String"/> array to use for the <c>info</c> parameter on <see cref="M:NationalInstruments.Restricted.NIValidation.DebugConditionCore(System.Boolean,System.String,System.Object[],System.String[])"/>, when additional info is not used.
            </summary>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugCondition(System.Boolean,System.String,System.Object[])">
            <exclude/>
            <summary>
            In Debug, asserts that the specified <paramref name="condition"/> is satisfied.
            </summary>
            <param name="condition">The condition that must be satisfied.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>condition:false => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugFail``1(``0,System.String[])">
            <exclude/>
            <summary>
            Raises a Debug failure on the specified unrecognized <paramref name="value"/>.
            </summary>
            <param name="value">The failing value.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>=> void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNotNull``1(``0,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugIsNull``1(``0,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:notnull => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the collection variable is neither <see langword="null"/> nor empty.
            </summary>
            <typeparam name="T">The type of the elements in the collection variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugIsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the collection variable is either <see langword="null"/> or empty.
            </summary>
            <typeparam name="T">The type of the elements in the collection variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNotNullOrEmpty(System.String,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the string variable is neither <see langword="null"/> nor empty.
            </summary>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugIsNullOrEmpty(System.String,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the string variable is either <see langword="null"/> or empty.
            </summary>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNoNullElements``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the collection variable contains no <see langword="null"/> elements.
            </summary>
            <typeparam name="T">The type of the elements in the collection variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugEqualTo``1(``0,``0,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable is equal the expected value.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="expected">The expected value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNotEqualTo``1(``0,``0,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable is not equal the expected value.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="expected">The expected value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNonNegative(System.Int32,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable is non-negative.
            </summary>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugIndexInRange(System.Int32,System.Int32,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the index variable is between zero and the specified collection count.
            </summary>
            <param name="index">The value of the index variable.</param>
            <param name="count">The size of the collection.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugAssignableTo(System.Type,System.Type,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the type of the variable has the specified type.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="expected">The expected type of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>type:null => void;  expected:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.AssertValue``1(System.Nullable{``0},System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the nullable variable has a value.
            In Release, performs a direct cast with no runtime checks.
            </summary>
            <typeparam name="T">The type of the nullable variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <returns>The non-<see langword="null"/> value of the variable.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.AssertType``1(System.Object,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable has the specified type.
            In Release, performs a direct cast with no runtime checks.
            </summary>
            <remarks>
            Since conditionally compiled methods cannot return a value, a helper method is used to perform the debug assert.
            </remarks>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <returns>The non-<see langword="null"/> value of the variable cast to the specified type.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.AssertTypeOrNull``1(System.Object,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable has the specified type, or is <see langword="null"/>.
            In Release, performs a direct cast with no runtime checks.
            </summary>
            <remarks>
            Since conditionally compiled methods cannot return a value, a helper method is used to perform the debug check.
            </remarks>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <returns>The value of the variable cast to the specified type.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null => null</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.AssertTypeCore``1(System.Object,System.Boolean,System.String[])">
            <exclude/>
            <summary>
            In Debug, asserts that the variable has the specified type.
            In Release, performs a direct cast with no runtime checks.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="allowNull"><see langword="true"/> to allow <paramref name="value"/> to be <see langword="null"/>; otherwise, <see langword="false"/>.</param>
            <param name="info">Additional information to include in the debug message.</param>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>value:null,allowNull:false => void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugConditionCore(System.Boolean,System.String,System.Object[],System.String[])">
            <exclude/>
            <summary>
            Implements the check for the specified <paramref name="condition"/> is satisfied.
            </summary>
            <param name="condition">The condition that must be satisfied.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.DebugNotNullCore``1(``0,System.String[])">
            <exclude/>
            <summary>
            Implements the check for the variable not being <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="value">The value of the variable.</param>
            <param name="info">Additional information to include in the debug message.</param>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.GuardCondition(System.Boolean,System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the specified <paramref name="condition"/> is satisfied.
            </summary>
            <param name="condition">The condition that must be satisfied.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>condition:false =&gt; void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.GuardParam``1(``0,System.String)">
            <exclude/>
            <summary>
            Creates a <see cref="T:NationalInstruments.Restricted.Guard`1"/> object for a method parameter.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="parameterValue">The value of the parameter.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns>A <see cref="T:NationalInstruments.Restricted.Guard`1"/> for the parameter.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <parameter name="parameterValue"><attribute ctor="M:NationalInstruments.Restricted.NoEnumerationAttribute.#ctor"/></parameter>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.GuardValue``1(``0,System.String)">
            <exclude/>
            <summary>
            Creates a <see cref="T:NationalInstruments.Restricted.Guard`1"/> object for a derived variable.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="variableValue">The value of the variable.</param>
            <param name="variableDescription">A user-friendly description of the variable.</param>
            <returns>A <see cref="T:NationalInstruments.Restricted.Guard`1"/> for the variable.</returns>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <parameter name="variableValue"><attribute ctor="M:NationalInstruments.Restricted.NoEnumerationAttribute.#ctor"/></parameter>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NonNegative(NationalInstruments.Restricted.Guard{System.Int32})">
            <exclude/>
            <summary>
            Ensures the value is greater than or equal to zero.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <remarks>Only int and double are supported.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NonNegative(NationalInstruments.Restricted.Guard{System.Double})">
            <exclude/>
            <summary>
            Ensures the value is greater than or equal to zero.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <remarks>Only int and double are supported.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.IndexInRange(NationalInstruments.Restricted.Guard{System.Int32},NationalInstruments.DataInfrastructure.TraitScope)">
            <exclude/>
            <summary>
            Ensures the index value is valid for a collection with the specified count.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <param name="scope">The scope covered by the trait.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.IndexInRange(NationalInstruments.Restricted.Guard{System.Int32},System.Int32)">
            <exclude/>
            <summary>
            Ensures the index value is valid for a collection with the specified count.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <param name="count">The size of the collection.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.CopyToSufficientSize(NationalInstruments.Restricted.Guard{System.Int32},System.Int32,System.Int32,System.String)">
            <exclude/>
            <summary>
            Ensures the index value and specified destination array length are valid to hold the contents of a collection with the specified count.
            </summary>
            <param name="guard">The guard for the collection index variable.</param>
            <param name="collectionCount">The size of the collection.</param>
            <param name="copyCount">The number of elements to copy from the source collection.</param>
            <param name="message">An optional custom exception message to use if the guard fails.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NotNull``1(NationalInstruments.Restricted.Guard{``0})">
            <exclude/>
            <summary>
            Ensures the variable is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentNullException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>guard:null =&gt; void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NotDisposed``1(NationalInstruments.Restricted.Guard{``0})">
            <exclude/>
            <summary>
            Ensures the variable is not disposed.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.ObjectDisposedException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NotEmpty``1(NationalInstruments.Restricted.Guard{``0})">
            <exclude/>
            <summary>
            Ensures the collection or string variable is not empty.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.ElementSatisfies``1(NationalInstruments.Restricted.Guard{``0},System.Int32,System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the collection variable does not contain any invalid elements by testing that the <paramref name="firstInvalidElement"/> index is less than zero.
            </summary>
            <remarks>
            The text " Description[firstInvalidElement]" will be appended to the given format message.
            </remarks>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <param name="firstInvalidElement">The index of the first invalid element, or a value less than zero to indicate all elements are valid.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NoNullElements``1(NationalInstruments.Restricted.Guard{``0})">
            <exclude/>
            <summary>
            Ensures the collection variable does not contain any <see langword="null"/> elements.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.NotSpecialValue(NationalInstruments.Restricted.Guard{System.Double})">
            <exclude/>
            <summary>
            Ensures the variable is not one of the special double values
            <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.IsEqualTo``1(NationalInstruments.Restricted.Guard{``0},``0,System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the variable is equal to the specified value.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <param name="expected">The expected value of the variable.</param>
            <param name="format">A format string to use as the basis for the exception message, which includes a description of the user-defined range.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.IsInRange``1(NationalInstruments.Restricted.Guard{``0},System.Boolean,System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the variable is within the user-defined range.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <param name="isInRange"><see langword="true"/> if the variable is within the user-defined range; otherwise, <see langword="false"/>.</param>
            <param name="format">A format string to use as the basis for the exception message, which includes a description of the user-defined range.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.EnumIsDefined``1(NationalInstruments.Restricted.Guard{``0})">
            <exclude/>
            <summary>
            Ensures the enumeration variable is defined.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">GuardParam condition fails.</exception>
            <exception cref="T:System.InvalidOperationException">GuardValue condition fails.</exception>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.EnumIsDefined(NationalInstruments.Restricted.Guard{NationalInstruments.DataInfrastructure.ScopeComparison})">
            <exclude/>
            <summary>
            Ensures the <see cref="T:NationalInstruments.DataInfrastructure.ScopeComparison"/> enumeration variable is defined.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.FormatSuccessful(NationalInstruments.Restricted.Guard{System.String})">
            <exclude/>
            <summary>
            Ensures the <see cref="M:System.Object.ToString"/> format operation was successful in producing a non-<see langword="null"/> formatted value.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.FormatException">GuardParam condition fails.</exception>
            <exception cref="T:System.FormatException">GuardValue condition fails.</exception>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>guard:null =&gt; void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.FormatSatisfies(NationalInstruments.Restricted.Guard{System.String},System.Boolean,System.String,System.Object[])">
            <exclude/>
            <summary>
            Ensures the input or output value has the correct format.
            </summary>
            <param name="guard">The guard for the variable.</param>
            <param name="condition">The condition that must be satisfied.</param>
            <param name="format">A format string to use as the basis for the exception message.</param>
            <param name="args">The arguments for the <paramref name="format"/> message string.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.FormatException">GuardParam condition fails.</exception>
            <exception cref="T:System.FormatException">GuardValue condition fails.</exception>
            <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>condition:false =&gt; void</argument></attribute>
        </member>
        <member name="M:NationalInstruments.Restricted.NIValidation.ParseSuccessful``1(NationalInstruments.Restricted.Guard{``0},System.String,System.Type)">
            <exclude/>
            <summary>
            Ensures the value was converted from a string with the correct format.
            </summary>
            <typeparam name="T">The type of the converted variable, which must be nullable.</typeparam>
            <param name="guard">The guard for the variable.</param>
            <param name="sourceValue">The string the object was parsed from.</param>
            <param name="targetType">The intended type of the converted variable.</param>
            <returns>The given <paramref name="guard"/>.</returns>
            <exception cref="T:System.FormatException">GuardParam condition fails.</exception>
            <exception cref="T:System.FormatException">GuardValue condition fails.</exception>
            <attribute ctor="M:NationalInstruments.Restricted.ContractAnnotationAttribute.#ctor(System.String)">
                   <argument>guard:null =&gt; void</argument></attribute>
        </member>
        <member name="T:NationalInstruments.Restricted.ObsoleteMessage">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.ObsoleteMessage.SynchronizingObject">
            <exclude/>
            <lastupdated>1/18/2006 11:36:08 AM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.PerformsLicenseCheckAttribute">
            <exclude/>
            <lastupdated>2/28/2012 3:01:45 PM</lastupdated>
            <updatedby>Owen Pellegrin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.PerformsLicenseCheckAttribute.#ctor">
            <exclude/>
            <lastupdated>2/28/2012 3:01:52 PM</lastupdated>
            <updatedby>Owen Pellegrin</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.PrecisionDateTimeEpoch">
            <exclude/>
            <lastupdated>7/25/2006 5:13:51 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.PrecisionDateTimeEpoch.DotNetEpoch">
            <exclude/>
            <lastupdated>7/25/2006 5:13:58 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.PrecisionDateTimeEpoch.CTimeEpoch">
            <exclude/>
            <lastupdated>7/25/2006 5:13:56 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.PrecisionDateTimeEpoch.LabViewEpoch">
            <exclude/>
            <lastupdated>7/25/2006 5:14:04 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.PrecisionDateTimeEpoch.FileTimeEpoch">
            <exclude/>
            <lastupdated>7/25/2006 5:14:01 PM</lastupdated>
            <updatedby>Lisa Shipley</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.SpectrumChangedEventArgs`1">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.#ctor(NationalInstruments.Spectrum{`0},NationalInstruments.Restricted.SpectrumChangeType)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.#ctor(NationalInstruments.Spectrum{`0},System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.#ctor(NationalInstruments.Spectrum{`0},System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.#ctor(NationalInstruments.Spectrum{`0},System.Int32,System.Int32,NationalInstruments.Restricted.SpectrumChangeType)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.Spectrum">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.SampleIndex">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.SampleCount">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Restricted.SpectrumChangedEventArgs`1.ChangeType">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Restricted.SpectrumChangeType">
            <exclude/>
        </member>
        <member name="F:NationalInstruments.Restricted.SpectrumChangeType.Data">
            <exclude/>
        </member>
        <member name="F:NationalInstruments.Restricted.SpectrumChangeType.Frequency">
            <exclude/>
        </member>
        <member name="F:NationalInstruments.Restricted.SpectrumChangeType.Label">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Restricted.TypeConversionMap">
            <exclude/>
            <summary>Defines a data structure that tracks what and how types can be converted between each other.</summary>
            <lastupdated>7/23/2002 12:42:51 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.TypeConversionMap.#ctor">
            <exclude/>
            <lastupdated>7/23/2002 12:43:20 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.TypeConversionMap.AddEntry(System.Type,System.Type,NationalInstruments.Restricted.TypeConversionMap.ConversionHandler)">
            <exclude/>
            <lastupdated>7/23/2002 12:42:54 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.TypeConversionMap.RemoveEntry(System.Type,System.Type)">
            <exclude/>
            <lastupdated>7/23/2002 12:43:07 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.TypeConversionMap.HasEntry(System.Type,System.Type)">
            <exclude/>
            <lastupdated>7/23/2002 12:43:04 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.TypeConversionMap.DefaultHandler">
            <exclude/>
            <lastupdated>7/23/2002 12:43:01 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.TypeConversionMap.Item(System.Type,System.Type)">
            <exclude/>
            <lastupdated>7/23/2002 12:43:15 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.TypeConversionMap.ConversionHandler">
            <exclude/>
            <lastupdated>7/23/2002 12:42:57 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.UnmanagedHandle">
            <exclude/>
            <summary>Provides a base class implementation of an unmanaged handle wrapper class.  You must derive from this class and override CloseHandle to use it.</summary>
            <lastupdated>7/23/2002 12:43:50 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.UnmanagedHandle.#ctor(System.IntPtr)">
            <exclude/>
            <lastupdated>7/23/2002 12:44:13 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.UnmanagedHandle.Finalize">
            <exclude/>
            <lastupdated>7/23/2002 12:43:53 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.UnmanagedHandle.Dispose">
            <exclude/>
            <lastupdated>7/23/2002 12:44:00 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.UnmanagedHandle.ToHandle">
            <exclude/>
            <lastupdated>7/23/2002 12:44:09 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.UnmanagedHandle.CloseHandle">
            <exclude/>
            <lastupdated>7/23/2002 12:43:56 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.UnmanagedHandle.op_Implicit(NationalInstruments.Restricted.UnmanagedHandle)~System.IntPtr">
            <exclude/>
            <lastupdated>7/23/2002 12:44:03 AM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.WaveformChangedEventArgs`1">
            <exclude/>
            <lastupdated>8/18/2011 1:10:10 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.AnalogWaveform{`0},NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>8/18/2011 1:10:41 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.ComplexWaveform{`0},NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>8/18/2011 1:10:50 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.AnalogWaveform{`0},System.Int32)">
            <exclude/>
            <lastupdated>8/18/2011 1:10:37 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.AnalogWaveform{`0},System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>8/28/2011 3:45:00 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.AnalogWaveform{`0},System.Int32,System.Int32,NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>8/28/2011 3:45:00 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.ComplexWaveform{`0},System.Int32)">
            <exclude/>
            <lastupdated>8/18/2011 1:10:47 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.ComplexWaveform{`0},System.Int32,System.Int32)">
            <exclude/>
            <lastupdated>8/28/2011 3:45:07 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.WaveformChangedEventArgs`1.#ctor(NationalInstruments.ComplexWaveform{`0},System.Int32,System.Int32,NationalInstruments.Restricted.WaveformChangeType)">
            <exclude/>
            <lastupdated>8/28/2011 3:45:07 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.WaveformChangedEventArgs`1.AnalogWaveform">
            <exclude/>
            <lastupdated>8/18/2011 1:10:15 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.WaveformChangedEventArgs`1.ComplexWaveform">
            <exclude/>
            <lastupdated>8/18/2011 1:10:24 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.WaveformChangedEventArgs`1.SampleIndex">
            <exclude/>
            <lastupdated>8/18/2011 1:10:30 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.WaveformChangedEventArgs`1.SampleCount">
            <exclude/>
            <lastupdated>8/28/2011 3:44:52 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.WaveformChangedEventArgs`1.ChangeType">
            <exclude/>
            <lastupdated>8/18/2011 1:10:19 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Restricted.WaveformChangedEventArgs`1.WaveformType">
            <exclude/>
            <lastupdated>8/18/2011 1:10:33 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.WaveformChangeType">
            <exclude/>
            <lastupdated>8/18/2011 1:09:24 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.WaveformChangeType.Data">
            <exclude/>
            <lastupdated>8/18/2011 1:11:15 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.WaveformChangeType.Timing">
            <exclude/>
            <lastupdated>8/18/2011 1:11:23 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.WaveformChangeType.Label">
            <exclude/>
            <lastupdated>8/18/2011 1:11:19 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.WaveformType">
            <exclude/>
            <lastupdated>8/18/2011 1:09:29 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.WaveformType.Analog">
            <exclude/>
            <lastupdated>8/18/2011 1:11:01 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Restricted.WaveformType.Complex">
            <exclude/>
            <lastupdated>8/18/2011 1:11:04 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.AccessibleAfterDisposeAttribute">
            <summary>
            Indicates that a method can be called after an object has been disposed.
            </summary>
            <remarks>
            You can use any member marked with <see cref="T:NationalInstruments.AccessibleAfterDisposeAttribute"/> even 
            after <see cref="M:System.IDisposable.Dispose"/> has been called.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>6/8/2012 10:27:19 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.AnalogWaveform`1">
            <summary>
            Provides a data type that encapsulates analog data and timing information.
            </summary>
            <threadsafety safety="unsafe"/>
            <typeparam name="TData">
            The underlying type of the waveform. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Byte"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.Decimal"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.Int16"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int64"/>, and
            <see cref="T:System.UInt64"/>.
            </typeparam>
            <remarks>
                <para>
                    <see cref="T:NationalInstruments.AnalogWaveform`1"/> encapsulates a group of sampled analog values and timing information.
            Each sample represents an analog value. Use <see cref="P:NationalInstruments.AnalogWaveform`1.Samples"/> to access the samples
            in an analog waveform. Use <see cref="M:NationalInstruments.AnalogWaveform`1.GetRawData"/> to get the raw analog data and
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetScaledData"/> to get the scaled analog data.
            <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> determines the scaling of the scaled data.</para>
                <para><see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> and <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>
            specify the timing information of the <see cref="T:NationalInstruments.AnalogWaveform`1"/>.  Use
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/> when you need a higher timing precision
            than is provided by <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>.  When you create an analog
            waveform using the constructor or a factory method, such as <see cref="M:NationalInstruments.AnalogWaveform`1.FromArray1D(`0[])"/>,
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>
            and <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/> is set to
            <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.</para>
                <filter name="VS2008|VS2010">
                    <para>
            Because <see cref="T:NationalInstruments.AnalogWaveform`1"/> requires a different amount of memory depending on the platform,
            an analog waveform of the same number of samples will consume more memory when running in 64-bit mode compared to the same waveform running in 32-bit mode.
            </para>
                </filter>
                <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>
            The following example demonstrates a method that displays all the analog values in an <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            Each line displays a new analog value.
            <code lang="VB.NET">
            Private Sub DisplayWaveform(Of TData)(ByVal waveform As AnalogWaveform(Of TData))
                 For Each sample As AnalogWaveformSample(Of TData) In waveform.Samples
                      Debug.WriteLine(String.Format("{0}", sample.Value))
                 Next
            End Sub
            </code>
            </example>
            <example>
            <code lang="C#">
            private void DisplayWaveform&lt;TData&gt;(AnalogWaveform&lt;TData&gt; waveform)
            {
                 foreach (AnalogWaveformSample&lt;TData&gt; sample in waveform.Samples)
                 {
                      Debug.WriteLine(String.Format("{0}", sample.Value));
                 }
            }
            </code>
            </example>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>10/15/2009 12:14:00 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.AnalogWaveform`1"/> with the specified sample
            count.
            </summary>
            <param name="sampleCount">
            The number of samples in the <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleCount"/> is less than zero.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> to set the timing information.
            </remarks>
            <lastupdated>3/1/2006 5:03:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.AnalogWaveform`1"/> with the specified sample
            count and capacity.
            </summary>
            <param name="sampleCount">
            The number of samples in the <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <param name="capacity">
            The total capacity of the <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="capacity"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="capacity"/> is less than <paramref name="sampleCount"/>.
            </exception>
            <remarks>
                <para>
            Setting the capacity of the <see cref="T:NationalInstruments.AnalogWaveform`1"/> initializes the memory
            required for that capacity without increasing the number of samples in the waveform.  Setting the capacity
            large enough to fit any data that may be added to the <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            after creation makes adding data later more efficient.  Initializing an <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            with a capacity greater than the number of samples allocates extra memory for the capacity specified, so that
            appending <see cref="T:NationalInstruments.AnalogWaveform`1"/> using <see cref="M:NationalInstruments.AnalogWaveform`1.Append(`0[])"/>
            does not require new allocation of memory or copying of existing samples.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> to set the timing information.
            </para>
            </remarks>
            <lastupdated>6/7/2012 11:21:57 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:01:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.FromArray1D(`0[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.AnalogWaveform`1"/> from an array of values.
            </summary>
            <param name="array">
            The array of values.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> to set the timing information.
            </remarks>
            <lastupdated>3/1/2006 5:40:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.FromArray2D(`0[0:,0:])">
            <summary>
            Creates an <see cref="T:NationalInstruments.AnalogWaveform`1"/> array from a two-dimensional array of values.
            </summary>
            <param name="array">
            The two-dimensional array of values.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.AnalogWaveform`1"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each <see cref="T:NationalInstruments.AnalogWaveform`1"/> instance in the returned array represents a row of data
            in the two-dimensional <paramref name="array"/>. Upon construction, <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> to set the timing information.
            </remarks>
            <lastupdated>3/1/2006 5:41:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.CopySamples(NationalInstruments.AnalogWaveform{`0},NationalInstruments.AnalogWaveform{`0},System.Int32)">
            <summary>
            Copies the data of a source analog waveform to a destination analog waveform.
            </summary>
            <param name="sourceWaveform">
            The source <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <param name="destinationWaveform">
            The destination <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="sourceWaveform"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="destinationWaveform"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than the <paramref name="sourceWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than the <paramref name="destinationWaveform"/> sample count.</para>
            </exception>
            <lastupdated>3/1/2006 5:36:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.CopySamples(NationalInstruments.AnalogWaveform{`0},System.Int32,NationalInstruments.AnalogWaveform{`0},System.Int32,System.Int32)">
            <summary>
            Copies the data of a source analog waveform to a destination analog waveform with the specified indexes.
            </summary>
            <param name="sourceWaveform">
            The source <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <param name="sourceSampleIndex">
            The source sample index.
            </param>
            <param name="destinationWaveform">
            The destination <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </param>
            <param name="destinationSampleIndex">
            The destination sample index.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="sourceWaveform"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="destinationWaveform"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sourceSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sourceSampleIndex"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="sourceWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="destinationWaveform"/> sample count.</para>
            </exception>
            <lastupdated>3/1/2006 5:39:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData">
            <summary>
            Returns the raw analog waveform data.
            </summary>
            <returns>
            The raw analog waveform data.
            </returns>
            <remarks>
            The raw data returned is a copy of the data in the analog waveform.
            </remarks>
            <lastupdated>3/1/2006 5:42:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData(System.Int32,System.Int32)">
            <summary>
            Returns the raw analog waveform data using the specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to return.
            </param>
            <returns>
            The raw analog waveform data.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            The raw data returned is a copy of the data in the analog waveform.
            </remarks>
            <lastupdated>3/16/2006 11:25:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetRawData(System.Int32,System.Int32,`0[],System.Int32)">
            <summary>
            Returns the raw analog waveform data using the specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the raw data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the raw data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            The raw data returned is a copy of the data in the analog waveform.
            </remarks>
            <lastupdated>3/16/2006 11:26:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData">
            <summary>
            Returns the scaled analog waveform data.
            </summary>
            <returns>
            The scaled analog waveform data.
            </returns>
            <remarks>
            The scaled data returned is a copy of the data in the analog waveform. Use <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> to set the scale mode of the data.
            </remarks>
            <seealso cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/>
            <lastupdated>4/21/2010 10:57:59 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData(System.Int32,System.Int32)">
            <summary>
            Returns the scaled analog waveform data using the sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to return.
            </param>
            <returns>
            The scaled analog waveform data.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            The scaled data returned is a copy of the data in the analog waveform. Use <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> to set the scale mode of the data.
            </remarks>
            <lastupdated>4/21/2010 10:57:55 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetScaledData(System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Returns the scaled analog waveform data using the sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the scaled data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            The scaled data returned is a copy of the data in the analog waveform. Use <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> to set the scale mode of the data.
            </remarks>
            <lastupdated>4/21/2010 10:57:52 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
                <see cref="M:NationalInstruments.AnalogWaveform`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the non-static fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>3/1/2006 5:23:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.System#ICloneable#Clone">
            <exclude/>
            <lastupdated>1/23/2009 4:01:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <lastupdated>3/1/2006 5:45:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
            </para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <remarks>
            Use <see cref="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps"/> instead of
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.AnalogWaveform`1"/> was set using
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>, then this method
            will return time stamps with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>,
            the time stamps returned will only be as precise as <see cref="T:System.DateTime"/>.
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>10/12/2006 12:58:31 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> using
            the specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <lastupdated>3/16/2006 11:27:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/> using
            the specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
            </para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            Use <see cref="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps"/> instead of
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.AnalogWaveform`1"/> was set using
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>, then this method
            will return time stamps with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>,
            the time stamps returned will only be as precise as <see cref="T:System.DateTime"/>.
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>10/12/2006 12:59:03 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> using
            the specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <lastupdated>3/16/2006 11:27:22 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/> using
            the specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the analog waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
            </para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            Use <see cref="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStamps"/> instead of
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetTimeStamps"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.AnalogWaveform`1"/> was set using
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>, then this method
            will return time stamps with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>,
            the time stamps returned will only be as precise as <see cref="T:System.DateTime"/>.</remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>10/12/2006 12:59:27 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetBuffer(System.Boolean)">
            <summary>
            Gets a buffer representing the data of the analog waveform.
            </summary>
            <param name="copy">Indicates whether a copy of the waveform data is returned.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing the
            data of the analog waveform.
            </returns>
            <remarks>
                <para>
            The number of samples in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
            is equal to <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/>.
            </para>
                <para>
            The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
            by <see cref="M:NationalInstruments.AnalogWaveform`1.GetBuffer(System.Boolean)" crefType="Unqualified"/>
            is a read-only view of the waveform data.  Calling <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
            on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
            makes a copy of the waveform data.  To modify the actual data in the waveform, call
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetWritableBuffer" crefType="Unqualified"/>.
            </para>
                <para>
            When <paramref name="copy"/> is <see langword="true"/>, the returned buffer is populated with a copy of
            the waveform data. It is safe to access the samples of the returned buffer until it is explicitly disposed.
            </para>
                <para>
            When <paramref name="copy"/> is <see langword="false"/>, the returned buffer contains a direct reference
            to the waveform data. It is only safe to access the samples of the returned buffer when the data in the
            waveform is not changed. Calling <see cref="M:NationalInstruments.AnalogWaveform`1.Append(NationalInstruments.AnalogWaveform{`0})" crefType="Unqualified"/>,
            changing the data through the buffer returned by <see cref="M:NationalInstruments.AnalogWaveform`1.GetWritableBuffer" crefType="Unqualified"/>, or
             using a memory-optimized read method invalidate the returned buffer and makes it unsafe to use.
            </para>
            </remarks>
            <example>
            The following code demonstrates how to use <see cref="M:NationalInstruments.AnalogWaveform`1.GetBuffer(System.Boolean)" crefType="Unqualified"/>.
            <code lang="VB.NET">
            Dim buffer As NationalInstruments.DataInfrastructure.Buffer(Of Double) = analogWaveform.GetBuffer(True)
            For i As Integer = 0 To (buffer.Size - 1)
                 'Access data samples using an indexer property to write sample values to an output window.
                 Debug.WriteLine(buffer(i))
            Next
            </code>
            <code lang="C#">
            NationalInstruments.DataInfrastructure.Buffer&lt;double&gt; buffer = analogWaveform.GetBuffer(true);
            for (int i = 0; i &lt; buffer.Size; i++)
            {
                 // Access data samples using an indexer property to write sample values to an output window.
                 Debug.WriteLine(buffer[i]);
            }
            </code>
            </example>
            <lastupdated>6/7/2012 11:36:34 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetWritableBuffer">
             <summary>
             Gets a writable buffer representing the data of the analog waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/> representing the
             data of the analog waveform.
             </returns>
             <remarks>
                 <para>
             The number of samples in the <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/>
             is equal to <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/>.
             </para>
             </remarks>
             <example>
             The following code demonstrates how to use <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/>.
             <code lang="VB.NET">
             Dim r As New Random()
             Dim writableBuffer As NationalInstruments.DataInfrastructure.WritableBuffer(Of Double) = analogWaveform.GetWritableBuffer()
            
             For i As Integer = 0 To writableBuffer.Size - 1
                  'Add a random value.
                  writableBuffer(i) += r.NextDouble()
             Next
             </code>
             <code lang="C#">
             Random r = new Random();
             NationalInstruments.DataInfrastructure.WritableBuffer&lt;double&gt; writableBuffer = analogWaveform.GetWritableBuffer();
            
             for (int i = 0; i &lt; writableBuffer.Size; i++)
             {
                  // Add a random value.
                  writableBuffer[i] += r.NextDouble();
             }
            
             </code>
             </example>
             <lastupdated>6/7/2012 12:47:55 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetTimeStampBuffer">
             <summary>
             Gets a buffer representing the time stamps of the analog waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing
             the time stamps of the analog waveform.
             </returns>
             <remarks>
             The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
             by <see cref="M:NationalInstruments.AnalogWaveform`1.GetTimeStampBuffer" crefType="Unqualified"/>
             is a read-only view of the waveform time stamps.  Calling
             <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
             on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             makes a copy of the time stamp data.  To change the timing of the waveform, set
             <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/>
             to a new value.
             </remarks>
             <exception cref="T:System.InvalidOperationException">
                 <para>
             The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
             of <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
             </para>
                 <para>- or -</para>
                 <para>
             The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
             of <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> and the
             <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp" crefType="Unqualified"/> property is
             <see langword="false"/>.
             </para>
             </exception>
             <example>
             The following code demonstrates how to use time stamps.
             <code lang="VB.NET">
             Dim dateTimeBuffer As NationalInstruments.DataInfrastructure.Buffer(Of DateTime) = analogWaveform.GetTimeStampBuffer()
            
             For i As Integer = 0 To dateTimeBuffer.Size - 1
                  'Access buffer samples using an indexer property and write the timestamp to output window.
                  Debug.WriteLine(dateTimeBuffer(i))
             Next
             </code>
             <code lang="C#">
             NationalInstruments.DataInfrastructure.Buffer&lt;DateTime&gt; dateTimeBuffer= analogWaveform.GetTimeStampBuffer();
            
             for (int i = 0; i &lt; dateTimeBuffer.Size; i++)
             {
                  // Access buffer samples using an indexer property and write the timestamp to output window.
                  Debug.WriteLine(dateTimeBuffer[i]);
             }
             </code>
             </example>
             <lastupdated>6/7/2012 12:47:03 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStampBuffer">
             <summary>
             Gets a buffer representing the precision time stamps of the analog waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing
             the precision time stamps of the analog waveform.
             </returns>
             <remarks>
                 <para>
             The number of time stamps in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             is equal to <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/>.
             </para>
                 <para>
             The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
             by <see cref="M:NationalInstruments.AnalogWaveform`1.GetPrecisionTimeStampBuffer" crefType="Unqualified"/>
             is a read-only view of the waveform precision time stamps.  Calling
             <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
             on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             makes a copy of the precision time stamp data.  To change the precision timing of the waveform, set
             <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
             to a new value.
             </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
                 <para>
             The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
             of <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
             </para>
                 <para>- or -</para>
                 <para>
             The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
             of <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> and the
             <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp" crefType="Unqualified"/> property is
             <see langword="false"/>.
             </para>
             </exception>
             <example>
             The following code demonstrates how to use precision time stamps.
             <code lang="VB.NET">
             Dim precisionDateTimeBuffer As NationalInstruments.DataInfrastructure.Buffer(Of PrecisionDateTime) = analogWaveform.GetPrecisionTimeStampBuffer()
            
             For i As Integer = 0 To precisionDateTimeBuffer.Size - 1
                  'Access buffer samples using an indexer property and write the precision time stamp to an output window.
                  Debug.WriteLine(precisionDateTimeBuffer(i))
             Next
             </code>
             <code lang="C#">
             NationalInstruments.DataInfrastructure.Buffer&lt;PrecisionDateTime&gt; precisionDateTimeBuffer = analogWaveform.GetPrecisionTimeStampBuffer();
            
             for (int i = 0; i &lt; precisionDateTimeBuffer.Size; i++)
             {
                  // Access buffer samples using an indexer property and write the precision time stamp to an output window.
                  Debug.WriteLine(precisionDateTimeBuffer[i]);
             }
             </code>
             </example>
             <lastupdated>6/7/2012 12:45:29 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.Append(`0[])">
            <summary>
            Appends data to the analog waveform.
            </summary>
            <param name="data">
            The data to append to the analog waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of elements in <paramref name="data"/> is larger than <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the data you append.
            </remarks>
            <lastupdated>6/7/2012 11:29:35 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.Append(`0[],NationalInstruments.PrecisionDateTime[])">
            <summary>
            Appends data and precision time stamps to the analog waveform.
            </summary>
            <param name="data">
            The data to append to the analog waveform.
            </param>
            <param name="timeStamps">
            The precision time stamps to append to the timing of the analog waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="data"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="timeStamps"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>The length of <paramref name="data"/> is not equal to the length of <paramref name="timeStamps"/>.</para>
                <para>- or -</para>
                <para><paramref name="timeStamps"/> are not in ascending order after the time stamps in <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>.</para>
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of elements in <paramref name="data"/> is larger than <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the data you append.  The capacity does not affect the memory allocation of the waveform timing.  The memory of
            the waveform timing is reallocated on each call to <see cref="M:NationalInstruments.AnalogWaveform`1.Append(`0[],NationalInstruments.PrecisionDateTime[])" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>6/7/2012 11:32:26 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.Append(`0[],System.DateTime[])">
            <summary>
            Appends data and time stamps to the analog waveform.
            </summary>
            <param name="data">
            The data to append to the analog waveform.
            </param>
            <param name="timeStamps">
            The time stamps to append to the timing of the analog waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="data"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="timeStamps"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>The length of <paramref name="data"/> is not equal to the length of <paramref name="timeStamps"/>.</para>
                <para>- or -</para>
                <para><paramref name="timeStamps"/> are not in ascending order after the time stamps in <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/>.</para>
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of elements in <paramref name="data"/> is larger than <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the data you append.  The capacity does not affect the memory allocation of the waveform timing.  The memory of
            the waveform timing is reallocated on each call to <see cref="M:NationalInstruments.AnalogWaveform`1.Append(`0[],System.DateTime[])" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>6/7/2012 11:31:37 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.Append(NationalInstruments.AnalogWaveform{`0})">
            <summary>
            Appends analog waveform data and time stamps to the current analog waveform.
            </summary>
            <param name="waveform">
            The <see cref="T:NationalInstruments.AnalogWaveform`1" crefType="Unqualified"/> to append to
            the current analog waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> property of
            <paramref name="waveform"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> property of
            <paramref name="waveform"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            <paramref name="waveform"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            <paramref name="waveform"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The time stamps in <paramref name="waveform"/> are not in ascending order after the time stamps
            in <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> or
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>.
            </exception>
            <remarks>
                <para>
            If <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of samples in <paramref name="waveform"/> is larger than <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the waveform data you append.
            </para>
                <para>
            If the <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> or the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>, the timing
            of <paramref name="waveform"/> is discarded.  If the <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/>
            property of <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> or the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>, the
            time stamps in <paramref name="waveform"/> are appended to the analog waveform's time stamps.
            </para>
                <para>Each extended property in the <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of
            <paramref name="waveform"/> is copied to the <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties" crefType="Unqualified"/>
            collection of the current analog waveform if it does not already exist in the
            <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of the current analog waveform.
            </para>
            </remarks>
            <lastupdated>6/7/2012 11:25:34 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.Append(NationalInstruments.AnalogWaveform{`0}[])">
            <summary>
            Appends analog waveform data and time stamps from an array of waveforms to the current analog waveform.
            </summary>
            <param name="waveforms">
            An array of <see cref="T:NationalInstruments.AnalogWaveform`1" crefType="Unqualified"/> objects to append to
            the current analog waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> property of
            an element in <paramref name="waveforms"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> property of
            an element in <paramref name="waveforms"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            an element in <paramref name="waveforms"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            an element in <paramref name="waveforms"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="waveforms"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para>An element in <paramref name="waveforms"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The time stamps in the analog waveforms in <paramref name="waveforms"/> are not in ascending order after the time stamps
            in <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> or
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>.
            </exception>
            <remarks>
                <para>
            The analog waveforms are appended to the current analog waveform in the order in which they appear
            in <paramref name="waveforms"/>.
            </para>
                <para>
            If <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the sum of the number of samples in the analog waveforms in  <paramref name="waveforms"/> is larger than
            <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the
            <see cref="P:NationalInstruments.AnalogWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the waveform data you append.
            </para>
                <para>
            If the <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> or the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>, the timing
            of the waveforms in <paramref name="waveforms"/> is discarded.  If the
            <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
            of <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/> or the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>, the
            time stamps in the analog waveforms in <paramref name="waveforms"/> are appended to the
            analog waveform's time stamps.
            </para>
                <para>Each extended property in the <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of
            each waveform in <paramref name="waveforms"/> is copied to the <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties" crefType="Unqualified"/>
            collection of the current analog waveform if it does not already exist in the
            <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of the current analog waveform.
            </para>
            </remarks>
            <lastupdated>6/7/2012 11:28:50 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>3/1/2006 5:46:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveform`1.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 4:01:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.Samples">
            <summary>
            Gets the samples of the analog waveform.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1"/> containing the
            <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> objects.
            </value>
            <remarks>
            To access the number of samples in the analog waveform, use <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount"/> instead of <see cref="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count"/>.
            Accessing the number of samples with <see cref="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count"/>
            requires you to use the <see cref="P:NationalInstruments.AnalogWaveform`1.Samples"/> property, which results in decreased performance.
            </remarks>
            <lastupdated>7/22/2008 3:17:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.SampleCount">
            <summary>
            Gets the number of samples in <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </summary>
            <value>
            The number of samples in <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            </value>
            <lastupdated>7/22/2008 12:37:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.ScaleMode">
            <summary>
            Gets or sets the scale mode of the analog waveform.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.WaveformScaleMode"/> of the analog waveform. The default value is
            <see cref="P:NationalInstruments.WaveformScaleMode.None"/>.
            </value>
            <remarks>
            The <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> represents the scale used to convert the raw data of the analog
            waveform to scaled data.
            The <see cref="M:NationalInstruments.AnalogWaveform`1.GetScaledData"/> method of the analog waveform calls
            the <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> to retrieve the scaled data of the analog waveform.
            </remarks>
            <lastupdated>3/1/2006 5:19:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.DataType">
            <summary>
            Gets the data type of the analog waveform.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the analog waveform.
            </value>
            <lastupdated>3/1/2006 5:04:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.ChannelName">
            <summary>
            Gets or sets the name of the device channel from which the analog waveform was acquired.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the device channel from which the
            <see cref="T:NationalInstruments.AnalogWaveform`1"/> was acquired.
            The default value is an empty string.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.AnalogWaveform`1.ChannelName"/> reads and writes to
            <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties"/> using the reserved key <format type="monospace">NI_ChannelName</format>.
            </remarks>
            <lastupdated>3/16/2006 1:36:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.UnitDescription">
            <summary>
            Gets or sets the unit of measurement, such as volts, of the analog waveform.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the unit of measurement of the <see cref="T:NationalInstruments.AnalogWaveform`1"/>.
            The default value is an empty string.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.AnalogWaveform`1.UnitDescription"/> reads and writes to
            <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties"/> using the reserved key <format type="monospace">NI_UnitDescription</format>.
            </remarks>
            <lastupdated>3/16/2006 11:48:38 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.Timing">
            <summary>
            Gets or sets the timing information of the analog waveform.
            </summary>
            <value>
            The timing information of the analog waveform. The default value is <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
                The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> and the number of time stamps in
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> is not equal to
            <see cref="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count"/>.
            </para>
                <para>-or-</para>
                <para>The time stamp values are greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
            </exception>
            <remarks>
                <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> includes information that
            encapsulates waveform timing.
            </remarks>
            <lastupdated>3/16/2006 1:45:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming">
            <summary>
            Gets or sets the timing information of the analog waveform with a higher precision
            than <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>.
            </summary>
            <value>
            The timing information of the analog waveform. The default value is
            <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> and the number of time stamps in
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/> is not equal to
            <see cref="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count"/>.
            </para>
                <para>- or -</para>
                <para>The time stamp values are greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
            </exception>
            <remarks>
                <para>Use <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/> instead of
            <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.AnalogWaveform`1"/> is set using
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>, then this property
            returns timing information with the precision of <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>.
            If the timing information is set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>,
            the timing information returned is only as precise as <see cref="T:NationalInstruments.WaveformTiming"/>.</para>
                <para>Accessing this property can potentially decrease performance if the timing information is
            set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>. Use
            <see cref="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized" crefType="Unqualified"/> to
            determine if <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            has been initialized.</para>
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized" crefType="Unqualified"/>
            <lastupdated>6/7/2012 11:20:07 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized">
            <summary>
            Gets a value indicating whether the precision timing information for the waveform has been initialized.
            </summary>
            <value>
                <see langword="true"/> if <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            has been initialized.
            </value>
            <remarks>
                <para>
            If the timing of the waveform is set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/>,
            then accessing the timing information via <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            can potentially decrease performance.  Use <see cref="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized" crefType="Unqualified"/>
            to determine whether or not this performance decrease could occur.  If <see cref="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized" crefType="Unqualified"/>
            is <see langword="true"/>, then there is no performance decrease when accessing <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>.
            If <see cref="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized" crefType="Unqualified"/> is <see langword="false"/>, then
            there may be a performance decrease when accessing <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>.
            </para>
                <para>
            If you change the value of <see cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/>, the value of
            <see cref="P:NationalInstruments.AnalogWaveform`1.IsPrecisionTimingInitialized" crefType="Unqualified"/> becomes
            <see langword="false"/> until <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is accessed.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            <seealso cref="P:NationalInstruments.AnalogWaveform`1.Timing" crefType="Unqualified"/>
            <lastupdated>6/7/2012 11:18:36 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties">
            <summary>
            Gets the extended properties for the analog waveform.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/> that contains the extended
            properties of the analog waveform.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties"/> stores key value pair information
            specific to the analog waveform. For example, drivers, such as the NI-DAQmx driver, populate <see cref="P:NationalInstruments.AnalogWaveform`1.ExtendedProperties"/>
            with information specific to the data acquisition type. For more information, refer to your specific driver documentation.
            </remarks>
            <lastupdated>3/1/2006 5:04:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveform`1.Capacity">
            <summary>
            Gets or sets the total capacity available for <see cref="T:NationalInstruments.AnalogWaveform`1"/> data.
            </summary>
            <value>
            The total capacity available for <see cref="T:NationalInstruments.AnalogWaveform`1"/> data.
            </value>
            <remarks>
                <para>
            The capacity of a <see cref="T:NationalInstruments.AnalogWaveform`1"/> is represented as the number of samples
            of data that can be stored in the waveform with the current amount of memory allocated for the data.
            Changing the capacity of the <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            reallocates the memory used to store the <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            data.  Changing the capacity is slower for <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            with a larger number of samples.
            </para>
                <para>
            Setting the capacity to the required number of samples of data before calling <see cref="M:NationalInstruments.AnalogWaveform`1.Append(`0[])"/>
            improves the performance of <see cref="M:NationalInstruments.AnalogWaveform`1.Append(`0[])"/>, especially when appending to
            waveforms with a large number of samples.  Setting the capacity to the required amount  also improves the performance of
            memory-optimized reads performed by hardware .NET APIs.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than <see cref="P:NationalInstruments.AnalogWaveform`1.SampleCount"/>.
            </exception>
            <lastupdated>6/11/2012 11:46:14 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.AnalogWaveformCollection`1">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.AnalogWaveform`1"/> objects.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveforms. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Byte"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.Decimal"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.Int16"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int64"/>, and
            <see cref="T:System.UInt64"/>.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
                <para>
            An <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/> contains a strongly typed collection of
            <see cref="T:NationalInstruments.AnalogWaveform`1"/> objects; one object for each channel and record combination.
            You can access these objects through the 1D indexer or the 2D indexer.  The 1D indexer accepts a single integer referring
            to the absolute position of the <see cref="T:NationalInstruments.AnalogWaveform`1"/> in the collection, and is
            most useful when the collection contains only one record per channel or one channel with multiple records.  The 2D indexer
            accepts two indexes: one for the record index and one for the channel index.  To determine the total number of
            <see cref="T:NationalInstruments.AnalogWaveform`1"/> objects in the collection, access the
            <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Count"/> property.
            To determine the number of records and channels, access the <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Records"/>
            and <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Channels"/> properties, respectively.
            </para>
                <para>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </para>
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>9/19/2009 4:21:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            </summary>
            <remarks>
            Upon construction, <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>
            is set to an empty collection of <see cref="T:NationalInstruments.AnalogWaveform`1"/> objects.
            </remarks>
            <lastupdated>12/7/2007 10:53:09 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:01:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
                <see cref="M:NationalInstruments.AnalogWaveformCollection`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the non-static fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>12/7/2007 10:53:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#ICloneable#Clone">
            <exclude/>
            <lastupdated>1/23/2009 4:01:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.CopyTo(NationalInstruments.AnalogWaveform{`0}[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="arrayIndex">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>-or-</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="arrayIndex"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>12/7/2007 10:53:33 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:01:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>12/7/2007 10:53:45 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#AnalogWaveform{TData}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>  that can be used to iterate through the collection.
            </returns>
            <lastupdated>11/30/2011 10:48:03 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Remove(NationalInstruments.AnalogWaveform{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <returns>The return value is not documented because the method is not supported.</returns>
            <remarks>
            <see cref="T:NationalInstruments.AnalogWaveformCollection`1" crefType="Unqualified"/>
            is read only and does not support removing items from the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>11/30/2011 10:48:20 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Contains(NationalInstruments.AnalogWaveform{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            <see langword="true"/> if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>11/30/2011 10:47:44 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Clear">
            <summary>
            This method is not supported.
            </summary>
            <remarks>
            <see cref="T:NationalInstruments.AnalogWaveformCollection`1" crefType="Unqualified"/>
            is read only and does not support clearing the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>11/30/2011 10:47:27 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#Add(NationalInstruments.AnalogWaveform{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <remarks>
            <see cref="T:NationalInstruments.AnalogWaveformCollection`1" crefType="Unqualified"/>
            is read only and does not support adding new items to the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>11/30/2011 10:47:07 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformCollection`1.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 4:01:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.Channels">
            <summary>
            Gets the number of channels in <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            </summary>
            <value>
            The number of channels in <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            </value>
            <lastupdated>2/12/2008 4:50:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.Count">
            <summary>
            Gets the number of analog waveforms in <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            </summary>
            <value>
            The number of analog waveforms in <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Count"/> is defined as the number of
            channels in the collection multiplied by the number of records.
            </value>
            <lastupdated>2/12/2008 4:51:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.Records">
            <summary>
            Gets the number of records in <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            </summary>
            <value>
            The number of records in <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/>.
            </value>
            <lastupdated>2/12/2008 4:52:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.AnalogWaveform`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:NationalInstruments.AnalogWaveform`1"/> to locate in the collection.
            Valid values range from zero to <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Count"/> - 1.
            </param>
            <value>
            The <see cref="T:NationalInstruments.AnalogWaveform`1"/> at the specified index.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="index"/> is greater than or equal to <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Count"/>.</para>
            </exception>
            <remarks>
            The <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/> stores all of its contained waveforms in a single
            one-dimensional array.  The waveforms within the array are arranged sequentially by time rather than sequentially by channel.
            This means that the record 0 waveforms for all channels are located in the array before the record 1 waveforms for the channels.
            For example, an <see cref="T:NationalInstruments.AnalogWaveformCollection`1"/> with two records and two channels stores
            the data in this format: [ R0C0 R0C1 R1C0 R1C1 ].
            Use the 2D indexer to retrieve the waveform for a specific record index and channel index.
            </remarks>
            <lastupdated>2/12/2008 4:46:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.AnalogWaveform`1"/> at the specified indexes.
            </summary>
            <param name="recordIndex">
            The zero-based record index of the <see cref="T:NationalInstruments.AnalogWaveform`1"/> to locate in the collection.
            Valid values range from zero to <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Records"/> - 1.
            </param>
            <param name="channelIndex">
            The zero-based channel index of the <see cref="T:NationalInstruments.AnalogWaveform`1"/> to locate in the collection.
            Valid values range from zero to <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Channels"/> - 1.
            </param>
            <value>
            The <see cref="T:NationalInstruments.AnalogWaveform`1"/> at the specified indexes.
            </value>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="recordIndex"/> or <paramref name="channelIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="recordIndex"/> is greater than or equal to <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Records"/>.</para>
                <para>-or-</para>
                <para><paramref name="channelIndex"/> is greater than or equal to <see cref="P:NationalInstruments.AnalogWaveformCollection`1.Channels"/>.</para>
            </exception>
            <lastupdated>2/12/2008 4:49:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.IsSynchronized">
            <exclude/>
            <lastupdated>12/7/2007 10:52:24 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.SyncRoot">
            <exclude/>
            <lastupdated>12/7/2007 10:52:33 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveform{TData}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/>  is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>.
            </value>
            <lastupdated>11/30/2011 10:46:45 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.AnalogWaveformSample`1">
            <summary>
            Represents a sample of an analog waveform.
            </summary>
            <typeparam name="TData">
            The type of the sample.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
            An <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> represents a sample of an analog waveform. Use
            the <see cref="P:NationalInstruments.AnalogWaveformSample`1.Value"/> property to obtain the value contained
            in the <see cref="T:NationalInstruments.AnalogWaveformSample`1"/>.
            Use the <see cref="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp"/> property to determine if the sample has a time stamp.
            If <see cref="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp"/> is <see langword="true"/>,
            <see cref="P:NationalInstruments.AnalogWaveformSample`1.TimeStamp"/> returns the time stamp of the sample.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>6/28/2006 10:39:27 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSample`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>3/1/2006 5:55:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSample`1.Owner">
            <summary>
            Gets the <see cref="T:NationalInstruments.AnalogWaveform`1"/> that the sample came from.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.AnalogWaveform`1"/> of the
            <see cref="T:NationalInstruments.AnalogWaveformSample`1"/>.
            </value>
            <lastupdated>3/1/2006 5:54:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSample`1.Value">
            <summary>
            Gets or sets the value of the <see cref="T:NationalInstruments.AnalogWaveformSample`1"/>.
            </summary>
            <value>
            The value of the <see cref="T:NationalInstruments.AnalogWaveformSample`1"/>. The default value is 0.
            </value>
            <lastupdated>3/1/2006 5:55:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp">
            <summary>
            Gets a value indicating if the analog sample has a time stamp.
            </summary>
            <value>
                <see langword="true"/> if the analog sample has a <see cref="P:NationalInstruments.AnalogWaveformSample`1.TimeStamp"/>.
            </value>
            <lastupdated>3/1/2006 5:54:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSample`1.TimeStamp">
            <summary>
            Gets the time at which the data was sampled.
            </summary>
            <value>
            The <see cref="T:System.DateTime"/> representing the time at which the data was sampled.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <seealso cref="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp"/>
            <lastupdated>6/20/2006 8:22:38 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSample`1.PrecisionTimeStamp">
            <summary>
            Gets the time at which the data was sampled.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the time at which the data was sampled.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <remarks>
            Use <see cref="P:NationalInstruments.AnalogWaveformSample`1.PrecisionTimeStamp"/> instead of
            <see cref="P:NationalInstruments.AnalogWaveformSample`1.TimeStamp"/> to obtain
            a time stamp with higher precision than <see cref="T:System.DateTime"/>.
            If the timing information in the <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            containing the <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> was set using
            <see cref="P:NationalInstruments.AnalogWaveform`1.PrecisionTiming"/>, then this property
            will return a time stamp with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.AnalogWaveform`1.Timing"/>,
            the time stamp returned will only be as precise as <see cref="T:System.DateTime"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.AnalogWaveformSample`1.HasTimeStamp"/>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="T:NationalInstruments.PrecisionDateTime"/>
            <lastupdated>10/12/2006 1:00:27 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSample`1.Index">
            <summary>
            Gets the index of the sample in the <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1" crefType="Unqualified"/>.
            </summary>
            <value>
            The index of the sample in the <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1" crefType="Unqualified"/>.
            </value>
            <lastupdated>10/19/2009 4:34:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.AnalogWaveformSampleCollection`1">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> objects.
            </summary>
            <typeparam name="TData">
            The type of the sample collection.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>6/28/2006 10:42:50 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.CopyTo(NationalInstruments.AnalogWaveformSample{`0}[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>-or-</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="index"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>3/1/2006 5:58:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>3/1/2006 5:59:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>3/1/2006 5:58:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#CopyTo(NationalInstruments.AnalogWaveformSample{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>.
            The array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <lastupdated>9/28/2009 2:47:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.IndexOf(NationalInstruments.AnalogWaveformSample{`0})">
            <summary>
            Searches for the <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> and returns the zero-based index of the first
            occurrence.
            </summary>
            <param name="sample">
            The <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> to locate.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="sample"/>.
            </returns>
            <lastupdated>3/1/2006 5:58:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Contains(NationalInstruments.AnalogWaveformSample{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
                <see langword="true"/> if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>9/28/2009 2:41:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Remove(NationalInstruments.AnalogWaveformSample{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <returns>The return value is not documented because the method is not supported.</returns>
            <remarks>
                <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1" crefType="Unqualified"/>
            is read only and does not support removing items from the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>9/18/2009 7:51:46 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Clear">
            <summary>
            This method is not supported.
            </summary>
            <remarks>
                <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1" crefType="Unqualified"/>
            is read only and does not support clearing the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>9/15/2009 1:08:28 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#Add(NationalInstruments.AnalogWaveformSample{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <remarks>
                <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1" crefType="Unqualified"/>
            is read only and does not support adding new items to the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>9/18/2009 7:50:37 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>10/19/2009 4:34:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>9/19/2009 4:21:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#AnalogWaveformSample{TData}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>  that can be used to iterate through the collection.
            </returns>
            <lastupdated>9/28/2009 2:58:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> at the specified index.
            </summary>
            <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
            <value>
            The <see cref="T:NationalInstruments.AnalogWaveformSample`1"/> at the specified index.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is greater than or equal to count.</para>
            </exception>
            <lastupdated>3/1/2006 5:57:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.Count">
            <summary>
            Gets the number of samples in <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1"/>.
            </summary>
            <value>
            The number of samples in <see cref="T:NationalInstruments.AnalogWaveformSampleCollection`1"/>.
            </value>
            <lastupdated>3/1/2006 5:57:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>3/1/2006 5:57:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>3/1/2006 5:57:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.AnalogWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#AnalogWaveformSample{TData}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/>  is read-only.
            </summary>
            <value>
                <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>.
            </value>
            <lastupdated>9/28/2009 2:56:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.ComplexDouble">
            <summary>
            Represents a complex number of type <see cref="T:System.Double"/> that is composed of a real part and an imaginary part.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            A complex number is an ordered pair of real numbers. 
            Complex numbers are usually written as <format type="italics">a + bi</format>
            where <format type="italics">a</format>
             represents the real part and <format type="italics">b</format>
             represents the imaginary part. <see cref="T:NationalInstruments.ComplexDouble"/> represents a complex number where <format type="italics">a</format>
            and <format type="italics">b</format> are of type <see cref="T:System.Double"/>.  Complex numbers can also be represented using 
            <see cref="P:NationalInstruments.ComplexDouble.Magnitude"/> and <see cref="P:NationalInstruments.ComplexDouble.Phase"/>. 
            <see cref="P:NationalInstruments.ComplexDouble.Magnitude"/> is defined as the square root of the sum of 
            <see cref="P:NationalInstruments.ComplexDouble.Real"/><format type="superscript">2</format> + 
            <see cref="P:NationalInstruments.ComplexDouble.Imaginary"/><format type="superscript">2</format>. 
            <see cref="P:NationalInstruments.ComplexDouble.Phase"/> is defined as the arctangent of <see cref="P:NationalInstruments.ComplexDouble.Real"/> and 
            <see cref="P:NationalInstruments.ComplexDouble.Imaginary"/>. You can plot <see cref="T:NationalInstruments.ComplexDouble"/> numbers on the complex graph.
            </remarks>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>8/5/2011 3:29:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.ComplexDouble"/> class with the specified real and imaginary values.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <param name="imaginary">The imaginary part of the complex number.</param>
            <lastupdated>2/21/2003 9:56:09 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.FromPolar(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexDouble"/> that represents a complex
            value with the specified magnitude and phase.
            </summary>
            <param name="magnitude">The magnitude of the complex quantity.</param>
            <param name="phase">The phase, in radians, of the complex quantity.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> that represents a complex value
            with a magnitude of <paramref name="magnitude"/> and a phase of 
            <paramref name="phase"/>.
            </returns>
            <lastupdated>2/21/2003 9:56:23 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.FromDouble(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexDouble"/> from a double real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with the real part specified by <paramref name="real"/>
            and a 0 imaginary part.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Explicit(System.Double)~NationalInstruments.ComplexDouble" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:58:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Explicit(System.Double)~NationalInstruments.ComplexDouble">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexDouble"/> from a double real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with the real part specified by <paramref name="real"/>
            and a 0 imaginary part.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.FromDouble(System.Double)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:58:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.ComplexDouble.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ToString(System.String)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format.
            </summary>
            <param name="format">
            The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Double"/> and is applied to the real and imaginary
            parts of the complex number. If <paramref name="format"/> is <see langword="null"/>, the return value uses the default format.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ToString(System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified culture-specific formatting information.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the real and imaginary parts of the number. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="formatProvider"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
            <param name="format">
                The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Double"/> and is applied to the real and imaginary
            parts of the complex number. If <paramref name="format"/> is <see langword="null"/>,  the return value uses the default format.</param>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the real and imaginary parts of the number. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:04:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Parse(System.String)">
            <summary>
            Converts the string representation of a complex number to its
            <see cref="T:NationalInstruments.ComplexDouble"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> equivalent to the complex numeric value
            specified in <paramref name="input"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <paramref name="input"/> is not a complex number in a valid format.
                <para>- or -</para>
                <para>One or both of Real or Imaginary parts are not a valid <see cref="T:System.Double"/>.</para>
            </exception>
            <remarks>
                <para>The <paramref name="input"/> parameter can contain a string of the form:</para>
                <list type="bullet">
                    <item><description>[real] + [imaginary]i</description></item>
                    <item><description>[real] + [imaginary]j</description></item>
                    <item><description>[real] + i[imaginary]</description></item>
                    <item><description>[real] + j[imaginary]</description></item>
                    <item><description>[imaginary]i + [real]</description></item>
                    <item><description>[imaginary]j + [real]</description></item>
                    <item><description>i[imaginary] + real</description></item>
                    <item><description>j[imaginary] + real</description></item>
                    <item><description>([real], [imaginary])</description></item>
                </list>
                <para>
            The [real] and [imaginary] parts of the strings above are <see cref="T:System.Double"/> values whose
            string forms are specified in the <see cref="M:System.Double.Parse(System.String)"/> documentation.  Some examples
            of <paramref name="input"/> are "1.2 + 3.4i", "1.2 + 3.4j", "1.2 + i3.4", "1.2 + j3.4", and "(1.2, 3.4)".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.ToString" crefType="Unqualified"/>
            <lastupdated>6/7/2012 4:24:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its <see cref="T:NationalInstruments.ComplexDouble"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> equivalent to the complex numeric value
            specified in <paramref name="input"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <paramref name="input"/> is not a complex number in a valid format.
                <para>- or -</para>
                <para>One or both of Real or Imaginary parts are not a valid <see cref="T:System.Double"/>.</para>
            </exception>
            <remarks>
                <para>The <paramref name="input"/> parameter can contain a string of the form:</para>
                <list type="bullet">
                    <item><description>[real] + [imaginary]i</description></item>
                    <item><description>[real] + [imaginary]j</description></item>
                    <item><description>[real] + i[imaginary]</description></item>
                    <item><description>[real] + j[imaginary]</description></item>
                    <item><description>[imaginary]i + [real]</description></item>
                    <item><description>[imaginary]j + [real]</description></item>
                    <item><description>i[imaginary] + real</description></item>
                    <item><description>j[imaginary] + real</description></item>
                    <item><description>([real], [imaginary])</description></item>
                </list>
                <para>
            The [real] and [imaginary] parts of the strings above are <see cref="T:System.Double"/> values whose
            string forms are specified in the <see cref="M:System.Double.Parse(System.String)"/> documentation.  Some examples
            of <paramref name="input"/> are "1.2 + 3.4i", "1.2 + 3.4j", "1.2 + i3.4", "1.2 + j3.4", and "(1.2, 3.4)".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.ToString" crefType="Unqualified"/>
            <lastupdated>6/7/2012 4:24:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.TryParse(System.String,NationalInstruments.ComplexDouble@)">
            <summary>
            Converts the string representation of a complex number to its
            <see cref="T:NationalInstruments.ComplexDouble"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="result">
            A <see cref="T:NationalInstruments.ComplexDouble"/> equivalent to the complex numeric value
            specified by <paramref name="input"/>.  If the return value is <see langword="false"/>, <paramref name="result"/>
            is <see cref="P:NationalInstruments.ComplexDouble.Zero"/>.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> is converted successfully.
            </returns>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.ToString" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:18:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexDouble@)">
            <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its <see cref="T:NationalInstruments.ComplexDouble"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information
            about <paramref name="input"/>.
            </param>
            <param name="result">
            A <see cref="T:NationalInstruments.ComplexDouble"/> equivalent to the complex numeric value
            specified by <paramref name="input"/>.  If the return value is <see langword="false"/>, <paramref name="result"/>
            is <see cref="P:NationalInstruments.ComplexDouble.Zero"/>.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> is converted successfully.
            </returns>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexDouble.ToString" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:19:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexDouble"/> objects from 
            <see cref="T:System.Double"/> arrays that represent the real and imaginary parts of complex numbers.
            </summary>
            <param name="realData">The real parts of complex numbers.</param>
            <param name="imaginaryData">The imaginary parts of complex numbers.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> array in which the real part of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="realData"/>[<format type="italics">n</format>] 
            and the imaginary part is <paramref name="imaginaryData"/>[<format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="realData"/> and <paramref name="imaginaryData"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="realData"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="imaginaryData"/> is <see langword="null"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:49:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexDouble"/> objects from subsets of 
            <see cref="T:System.Double"/> arrays that represent the real and imaginary parts of complex numbers.
            </summary>
            <param name="realData">The real parts of complex numbers.</param>
            <param name="imaginaryData">The imaginary parts of complex numbers.</param>
            <param name="startIndex">
            The index in <paramref name="realData"/> (and <paramref name="imaginaryData"/>) from which to compose the <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="realData"/> and 
            <paramref name="imaginaryData"/>, to compose the <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> array in which the real part of the
            <format type="italics">n</format><format type="superscript">th</format>  element is <paramref name="realData"/>[<paramref name="startIndex"/> + <format type="italics">n</format>] and the imaginary part is 
            <paramref name="imaginaryData"/>[<paramref name="startIndex"/> + <format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="realData"/> and <paramref name="imaginaryData"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="realData"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="imaginaryData"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="realData"/> (or <paramref name="imaginaryData"/>).</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="realData"/> (or <paramref name="imaginaryData"/>).</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:51:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ComposeArrayPolar(System.Double[],System.Double[])">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexDouble"/> objects from 
            <see cref="T:System.Double"/> arrays that represent the magnitudes and phases of complex numbers.
            </summary>
            <param name="magnitudes">The magnitudes of complex numbers.</param>
            <param name="phases">The phases of complex numbers.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> array in which the magnitude of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="magnitudes"/>[<format type="italics">n</format>]
             and the phase is <paramref name="phases"/>[<format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="magnitudes"/> and <paramref name="phases"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="magnitudes"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="phases"/> is <see langword="null"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:52:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.ComposeArrayPolar(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexDouble"/> objects from subsets of
            <see cref="T:System.Double"/> arrays that represent the magnitudes and phases of complex numbers.
            </summary>
            <param name="magnitudes">The magnitudes of complex numbers.</param>
            <param name="phases">The phases of complex numbers.</param>
            <param name="startIndex">The index in <paramref name="magnitudes"/> and <paramref name="phases"/> from which to compose the <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="magnitudes"/> and 
            <paramref name="phases"/>, to compose the <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> array in which the magnitude of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="magnitudes"/>[<paramref name="startIndex"/> + <format type="italics">n</format>]
             and the phase is <paramref name="phases"/>[<paramref name="startIndex"/> + <format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="magnitudes"/> and <paramref name="phases"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="magnitudes"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="phases"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="magnitudes"/> or <paramref name="phases"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="magnitudes"/> or <paramref name="phases"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:53:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)">
            <summary>
            Extracts the real and imaginary parts of a <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <param name="realData">Upon return, contains an array that consists of the real parts of <paramref name="complexData"/>.</param>
            <param name="imaginaryData">Upon return, contains an array that consists of the imaginary parts of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:54:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.DecomposeArray(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Extracts the real and imaginary parts of a subset of a <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <param name="startIndex">The index in <paramref name="complexData"/> from which to decompose into two <see cref="T:System.Double"/> arrays.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>,
             to decompose into two <see cref="T:System.Double"/> arrays.
            </param>
            <param name="realData">Upon return, contains an array that consists of the real parts of <paramref name="complexData"/>.</param>
            <param name="imaginaryData">Upon return, contains an array that consists of the imaginary parts of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="complexData"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:55:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.DecomposeArrayPolar(NationalInstruments.ComplexDouble[],System.Double[]@,System.Double[]@)">
            <summary>
            Extracts the magnitude and phase parts of a <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <param name="magnitudes">Upon return, contains an array that consists of the magnitudes of <paramref name="complexData"/>.</param>
            <param name="phases">Upon return, contains an array that consists of the phases of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:55:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.DecomposeArrayPolar(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Extracts the magnitude and phase parts of a subset of a <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <param name="startIndex">The index in <paramref name="complexData"/> from which to decompose into two <see cref="T:System.Double"/> arrays.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>,
             to decompose into two <see cref="T:System.Double"/> arrays.
            </param>
            <param name="magnitudes">Upon return, contains an array that consists of the magnitudes of <paramref name="complexData"/>.</param>
            <param name="phases">Upon return, contains an array that consists of the phases of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="complexData"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexDouble.ComposeArray(System.Double[],System.Double[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:56:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.GetPhases(NationalInstruments.ComplexDouble[])">
            <summary>
            Extracts the phases of complex numbers from an array of <see cref="T:NationalInstruments.ComplexDouble"/> objects.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <returns>
            A <see cref="T:System.Double"/> array that contains the phases of the complex numbers in
            <paramref name="complexData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/28/2003 2:45:16 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.GetMagnitudes(NationalInstruments.ComplexDouble[])">
            <summary>
            Extracts the magnitudes of complex numbers from an array of <see cref="T:NationalInstruments.ComplexDouble"/> objects.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexDouble"/> array.</param>
            <returns>
            A <see cref="T:System.Double"/> array that contains the magnitudes of the complex numbers in
            <paramref name="complexData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/28/2003 2:45:07 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Plus">
            <summary>
            Returns this instance of the <see cref="T:NationalInstruments.ComplexDouble"/> (unary plus).
            </summary>
            <returns>
            This instance of the <see cref="T:NationalInstruments.ComplexDouble"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Addition(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:02:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is 
            the negated value of this object (unary minus).
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is the negated value 
            of this object.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Subtraction(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Add(NationalInstruments.ComplexDouble)">
            <summary>
            Adds the value of the specified <see cref="T:NationalInstruments.ComplexDouble"/> to this object and returns a 
            new <see cref="T:NationalInstruments.ComplexDouble"/> that represents the sum.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexDouble"/> to add to this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> that represents the value of this 
            object plus the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Addition(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:30:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Subtract(NationalInstruments.ComplexDouble)">
            <summary>
            Subtracts the value of a <see cref="T:NationalInstruments.ComplexDouble"/> from this object and 
            returns a new <see cref="T:NationalInstruments.ComplexDouble"/> that represents the difference.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexDouble"/> to subtract from this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> that represents the value of this
            object minus the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Subtraction(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Multiply(NationalInstruments.ComplexDouble)">
            <summary>
            Multiplies a <see cref="T:NationalInstruments.ComplexDouble"/> with this object and 
            returns a new <see cref="T:NationalInstruments.ComplexDouble"/> that represents the product.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexDouble"/> to multiply with this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> that represents the value of this
            object times the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Multiply(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Divide(NationalInstruments.ComplexDouble)">
            <summary>
            Divides this object by a <see cref="T:NationalInstruments.ComplexDouble"/> and returns
            a new <see cref="T:NationalInstruments.ComplexDouble"/> that represents the result.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexDouble"/> by which to divide this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> that represents the value of this
            object divided by the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.op_Division(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:56:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_UnaryPlus(NationalInstruments.ComplexDouble)">
            <summary>
            Returns the specified instance of the <see cref="T:NationalInstruments.ComplexDouble"/> (unary plus).
            </summary>
            <param name="c">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <returns>
            The specified instance of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Plus" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:00:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_UnaryNegation(NationalInstruments.ComplexDouble)">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is the negative of the specified 
            object (unary minus).
            </summary>
            <param name="c">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is the negative of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Negate" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Addition(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Adds the values of two <see cref="T:NationalInstruments.ComplexDouble"/> objects.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is the sum of 
            <paramref name="c1"/> and <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Add(NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:00:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Subtraction(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Subtracts the value of one <see cref="T:NationalInstruments.ComplexDouble"/> from the value of another <see cref="T:NationalInstruments.ComplexDouble"/>.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is the result of 
            <paramref name="c1"/> minus <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Subtract(NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Multiply(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Multiplies the values of two <see cref="T:NationalInstruments.ComplexDouble"/> objects.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is the product of 
            <paramref name="c1"/> and <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Multiply(NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:00:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Division(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Divides the value of a <see cref="T:NationalInstruments.ComplexDouble"/> by the value of another <see cref="T:NationalInstruments.ComplexDouble"/>.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexDouble"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexDouble"/> with a value that is equal to 
            <paramref name="c1"/> divided by <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexDouble.Divide(NationalInstruments.ComplexDouble)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:20:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/11/2005 11:05:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Equals(NationalInstruments.ComplexDouble)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Equality(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.ComplexDouble"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.ComplexDouble"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.ComplexDouble"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.op_Inequality(NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.ComplexDouble"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.ComplexDouble"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.ComplexDouble"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexDouble.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.ComplexDouble.Magnitude">
            <summary>
            Gets the magnitude of the <see cref="T:NationalInstruments.ComplexDouble"/>.
            </summary>
            <value>
            The magnitude of the <see cref="T:NationalInstruments.ComplexDouble"/>.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.ComplexDouble.Magnitude"/> is defined as the square root of the sum of <see cref="P:NationalInstruments.ComplexDouble.Real"/><format type="superscript">2</format> + <see cref="P:NationalInstruments.ComplexDouble.Imaginary"/><format type="superscript">2</format>. 
            </remarks>
            <lastupdated>3/17/2008 3:36:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexDouble.Phase">
            <summary>
            Gets the phase of the <see cref="T:NationalInstruments.ComplexDouble"/>.
            </summary>
            <value>
            The phase of the <see cref="T:NationalInstruments.ComplexDouble"/>.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.ComplexDouble.Phase"/> is defined as the arctangent of <see cref="P:NationalInstruments.ComplexDouble.Real"/> and <see cref="P:NationalInstruments.ComplexDouble.Imaginary"/>. 
            </remarks>
            <lastupdated>3/17/2008 3:37:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexDouble.Zero">
            <summary>
            Gets the complex number <format type="italics">0 + 0i</format>.
            </summary>
            <value>
            The complex number <format type="italics">0 + 0i</format>.
            </value>
            <remarks>
            This property provides a convenient source for an object of a 
            <see cref="T:NationalInstruments.ComplexDouble"/> with a value of <format type="italics">0 + 0i</format>.
            </remarks>
            <lastupdated>2/21/2003 9:57:05 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexDouble.ComplexConjugate">
            <summary>
            Gets the complex conjugate of the <see cref="T:NationalInstruments.ComplexDouble"/>.
            </summary>
            <value>
            The complex conjugate of this object.  For a complex number <format type="italics">a + bi</format>, the complex 
            conjugate is <format type="italics">a - bi</format>.
            </value>
            <lastupdated>8/5/2011 3:30:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexDouble.Real">
            <summary>Gets or sets the real part of the <see cref="T:NationalInstruments.ComplexDouble"/>.</summary><value>The real part of the <see cref="T:NationalInstruments.ComplexDouble"/>.</value><lastupdated>2/21/2003 9:56:52 AM</lastupdated><updatedby>Beth Parrott</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexDouble.Imaginary">
            <summary>Gets or sets the imaginary part of the <see cref="T:NationalInstruments.ComplexDouble"/>.</summary><value>The imaginary part of the <see cref="T:NationalInstruments.ComplexDouble"/>.</value><lastupdated>2/21/2003 9:56:29 AM</lastupdated><updatedby>Beth Parrott</updatedby><approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ComplexInt16">
            <summary>
            Represents a complex number of type <see cref="T:System.Int16"/> that is composed of a real part and an imaginary part.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <para>
            A complex number is an ordered pair of numbers. 
            Complex numbers are usually written as <format type="italics">a + bi</format>
            where <format type="italics">a</format>
             represents the real part and <format type="italics">b</format>
             represents the imaginary part. <see cref="T:NationalInstruments.ComplexInt16"/> represents a complex number where <format type="italics">a</format>
            and <format type="italics">b</format> are of type <see cref="T:System.Int16"/>.
            </para>
            <para>
            You can use <see cref="T:NationalInstruments.DataConverter" crefType="Unqualified"/> to convert <see cref="T:NationalInstruments.ComplexInt16" crefType="Unqualified"/>
            values to <see cref="T:NationalInstruments.ComplexDouble" crefType="Unqualified"/> values.  However, <see cref="T:NationalInstruments.DataConverter" crefType="Unqualified"/>
            does not support converting <see cref="T:NationalInstruments.ComplexDouble" crefType="Unqualified"/> values to
            <see cref="T:NationalInstruments.ComplexInt16" crefType="Unqualified"/> values.  
            </para>
            </remarks>
            <example>
            The following sample demonstrates a method that uses <see cref="T:NationalInstruments.DataConverter"/> to convert an array of 
            <see cref="T:NationalInstruments.ComplexInt16" crefType="Unqualified"/> values to an array of
            <see cref="T:NationalInstruments.ComplexDouble" crefType="Unqualified"/> values.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal values As ComplexInt16()) As ComplexDouble()
                Dim convertedValues As ComplexDouble() = Nothing
                If DataConverter.CanConvert(values, GetType(ComplexDouble())) Then
                    convertedValues = CType(DataConverter.Convert(values, GetType(ComplexDouble())), ComplexDouble())
                End If
                Return convertedValues
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private ComplexDouble[] ConvertData(ComplexInt16[] values)
            {
                ComplexDouble[] convertedValues = null;
                if (DataConverter.CanConvert(values, typeof(ComplexDouble[])))
                    convertedValues = (ComplexDouble[])DataConverter.Convert(values, typeof(ComplexDouble[]));
                return convertedValues;
            }
            </code>
            </example>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>8/8/2011 12:38:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.ComplexInt16"/> class with the specified real and imaginary values.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <param name="imaginary">The imaginary part of the complex number.</param>
            <lastupdated>8/8/2011 12:41:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.FromInt16(System.Int16)">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexInt16"/> from an <see cref="T:System.Int16"/> real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with the real part specified by <paramref name="real"/>
            and a 0 imaginary part.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Explicit(System.Int16)~NationalInstruments.ComplexInt16" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:47:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Explicit(System.Int16)~NationalInstruments.ComplexInt16">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexInt16"/> from an <see cref="T:System.Int16"/> real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with the real part specified by <paramref name="real"/>
            and a 0 imaginary part.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.FromInt16(System.Int16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:47:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.ComplexInt16.TryParse(System.String,NationalInstruments.ComplexInt16@)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.Parse(System.String)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:54:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.ToString(System.String)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format.
            </summary>
            <param name="format">
            The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Int16"/> and is applied to the real and imaginary
            parts of the complex number. If <paramref name="format"/> is <see langword="null"/>, the return value uses the default format.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.TryParse(System.String,NationalInstruments.ComplexInt16@)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.Parse(System.String)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:55:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.ToString(System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified culture-specific formatting information.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the real and imaginary parts of the number. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="formatProvider"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexInt16@)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.Parse(System.String,System.IFormatProvider)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:55:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
            <param name="format">
            The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Int16"/> and is applied to the real and imaginary
            parts of the complex number. If <paramref name="format"/> is <see langword="null"/>,  the return value uses the default format.</param>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the real and imaginary parts of the number. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexInt16@)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.Parse(System.String,System.IFormatProvider)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:01:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Parse(System.String)">
            <summary>
            Converts the string representation of a complex number to its <see cref="T:NationalInstruments.ComplexInt16"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> equivalent to the complex numeric value
            specified in <paramref name="input"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <para><paramref name="input"/> is not a complex number in a valid format.</para>
                <para>- or -</para>
                <para>One or both of Real or Imaginary parts are not a valid <see cref="T:System.Int16"/>.</para>
            </exception>
            <remarks>
                <para>The <paramref name="input"/> parameter can contain a string of the form:</para>
                <list type="bullet">
                    <item><description>[real] + [imaginary]i</description></item>
                    <item><description>[real] + [imaginary]j</description></item>
                    <item><description>[real] + i[imaginary]</description></item>
                    <item><description>[real] + j[imaginary]</description></item>
                    <item><description>[imaginary]i + [real]</description></item>
                    <item><description>[imaginary]j + [real]</description></item>
                    <item><description>i[imaginary] + real</description></item>
                    <item><description>j[imaginary] + real</description></item>
                    <item><description>([real], [imaginary])</description></item>
                </list>
                <para>
            The [real] and [imaginary] parts of the strings above are <see cref="T:System.Int16"/> values whose
            string forms are specified in the <see cref="M:System.Int16.Parse(System.String)"/> documentation.  Some examples
            of <paramref name="input"/> are "1 + 2i", "1 + 2j", "1 + i2", "1 + j2", and "(1, 2)".
            </para>
            </remarks>
            <seealso cref="M:System.Int16.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.TryParse(System.String,NationalInstruments.ComplexInt16@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.ToString" crefType="Unqualified"/>
            <lastupdated>6/7/2012 4:26:09 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its <see cref="T:NationalInstruments.ComplexInt16"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> equivalent to the complex numeric value
            specified in <paramref name="input"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <para><paramref name="input"/> is not a complex number in a valid format.</para>
                <para>- or -</para>
                <para>One or both of Real or Imaginary parts are not a valid <see cref="T:System.Int16"/>.</para>
            </exception>
            <remarks>
                <para>The <paramref name="input"/> parameter can contain a string of the form:</para>
                <list type="bullet">
                    <item><description>[real] + [imaginary]i</description></item>
                    <item><description>[real] + [imaginary]j</description></item>
                    <item><description>[real] + i[imaginary]</description></item>
                    <item><description>[real] + j[imaginary]</description></item>
                    <item><description>[imaginary]i + [real]</description></item>
                    <item><description>[imaginary]j + [real]</description></item>
                    <item><description>i[imaginary] + real</description></item>
                    <item><description>j[imaginary] + real</description></item>
                    <item><description>([real], [imaginary])</description></item>
                </list>
                <para>
            The [real] and [imaginary] parts of the strings above are <see cref="T:System.Int16"/> values whose
            string forms are specified in the <see cref="M:System.Int16.Parse(System.String,System.IFormatProvider)"/> documentation.  Some examples
            of <paramref name="input"/> are "1 + 2i", "1 + 2j", "1 + i2", "1 + j2", and "(1, 2)".
            </para>
            </remarks>
            <seealso cref="M:System.Int16.Parse(System.String,System.IFormatProvider)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexInt16@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.ToString(System.IFormatProvider)" crefType="Unqualified"/>
            <lastupdated>6/7/2012 4:27:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.TryParse(System.String,NationalInstruments.ComplexInt16@)">
            <summary>
            Converts the string representation of a complex number to its
            <see cref="T:NationalInstruments.ComplexInt16"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="result">
            A <see cref="T:NationalInstruments.ComplexInt16"/> equivalent to the complex numeric value
            specified by <paramref name="input"/>.  If the return value is <see langword="false"/>, <paramref name="result"/>
            is <see cref="P:NationalInstruments.ComplexInt16.Zero"/>.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> is converted successfully.
            </returns>
            <seealso cref="M:System.Int16.TryParse(System.String,System.Int16@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.ToString" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:02:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexInt16@)">
            <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its <see cref="T:NationalInstruments.ComplexInt16"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information
            about <paramref name="input"/>.
            </param>
            <param name="result">
            A <see cref="T:NationalInstruments.ComplexInt16"/> equivalent to the complex numeric value
            specified by <paramref name="input"/>.  If the return value is <see langword="false"/>, <paramref name="result"/>
            is <see cref="P:NationalInstruments.ComplexInt16.Zero"/>.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> is converted successfully.
            </returns>
            <seealso cref="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.Parse(System.String,System.IFormatProvider)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexInt16.ToString(System.IFormatProvider)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:04:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.ComposeArray(System.Int16[],System.Int16[])">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexInt16"/> objects from 
            <see cref="T:System.Int16"/> arrays that represent the real and imaginary parts of complex numbers.
            </summary>
            <param name="realData">The real parts of complex numbers.</param>
            <param name="imaginaryData">The imaginary parts of complex numbers.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> array in which the real part of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="realData"/>[<format type="italics">n</format>]
            and the imaginary part is <paramref name="imaginaryData"/>[<format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="realData"/> and <paramref name="imaginaryData"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="realData"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="imaginaryData"/> is <see langword="null"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.DecomposeArray(NationalInstruments.ComplexInt16[],System.Int16[]@,System.Int16[]@)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:42:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.ComposeArray(System.Int16[],System.Int16[],System.Int32,System.Int32)">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexInt16"/> objects from subsets of 
            <see cref="T:System.Int16"/> arrays that represent the real and imaginary parts of complex numbers.
            </summary>
            <param name="realData">The real parts of complex numbers.</param>
            <param name="imaginaryData">The imaginary parts of complex numbers.</param>
            <param name="startIndex">
            The index in <paramref name="realData"/> (and <paramref name="imaginaryData"/>) from which to compose the <see cref="T:NationalInstruments.ComplexInt16"/> array.
            </param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="realData"/> or 
            <paramref name="imaginaryData"/>, to compose the <see cref="T:NationalInstruments.ComplexInt16"/> array.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> array in which the real part of the
            <format type="italics">n</format><format type="superscript">th</format>  element is <paramref name="realData"/>[<paramref name="startIndex"/> + <format type="italics">n</format>] and the imaginary part is 
            <paramref name="imaginaryData"/>[<paramref name="startIndex"/> + <format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="realData"/> and <paramref name="imaginaryData"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="realData"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="imaginaryData"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="realData"/> (or <paramref name="imaginaryData"/>).</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="realData"/> (or <paramref name="imaginaryData"/>).</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.DecomposeArray(NationalInstruments.ComplexInt16[],System.Int16[]@,System.Int16[]@)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:43:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.DecomposeArray(NationalInstruments.ComplexInt16[],System.Int16[]@,System.Int16[]@)">
            <summary>
            Extracts the real and imaginary parts of a <see cref="T:NationalInstruments.ComplexInt16"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexInt16"/> array.</param>
            <param name="realData">Upon return, contains an array that consists of the real parts of <paramref name="complexData"/>.</param>
            <param name="imaginaryData">Upon return, contains an array that consists of the imaginary parts of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.ComposeArray(System.Int16[],System.Int16[])" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:45:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.DecomposeArray(NationalInstruments.ComplexInt16[],System.Int32,System.Int32,System.Int16[]@,System.Int16[]@)">
            <summary>
            Extracts the real and imaginary parts of a subset of a <see cref="T:NationalInstruments.ComplexInt16"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexInt16"/> array.</param>
            <param name="startIndex">The index in <paramref name="complexData"/> from which to decompose into two <see cref="T:System.Int16"/> arrays.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>,
             to decompose into two <see cref="T:System.Int16"/> arrays.
            </param>
            <param name="realData">Upon return, contains an array that consists of the real parts of <paramref name="complexData"/>.</param>
            <param name="imaginaryData">Upon return, contains an array that consists of the imaginary parts of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="complexData"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.ComposeArray(System.Int16[],System.Int16[])" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:44:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Plus">
            <summary>
            Returns this instance of the <see cref="T:NationalInstruments.ComplexInt16"/> (unary plus).
            </summary>
            <returns>
            This instance of the <see cref="T:NationalInstruments.ComplexInt16"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Addition(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:53:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is 
            the negated value of this object (unary minus).
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is the negated value 
            of this object.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Subtraction(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:48:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Add(NationalInstruments.ComplexInt16)">
            <summary>
            Adds the value of the specified <see cref="T:NationalInstruments.ComplexInt16"/> to this object and returns a 
            new <see cref="T:NationalInstruments.ComplexInt16"/> that represents the sum.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexInt16"/> to add to this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> that represents the value of this 
            object plus the value of <paramref name="c"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Addition(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:41:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Subtract(NationalInstruments.ComplexInt16)">
            <summary>
            Subtracts the value of a <see cref="T:NationalInstruments.ComplexInt16"/> from this object and 
            returns a new <see cref="T:NationalInstruments.ComplexInt16"/> that represents the difference.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexInt16"/> to subtract from this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> that represents the value of this
            object minus the value of <paramref name="c"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Subtraction(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:53:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Multiply(NationalInstruments.ComplexInt16)">
            <summary>
            Multiplies a <see cref="T:NationalInstruments.ComplexInt16"/> with this object and 
            returns a new <see cref="T:NationalInstruments.ComplexInt16"/> that represents the product.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexInt16"/> to multiply with this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> that represents the value of this
            object times the value of <paramref name="c"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Multiply(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:48:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Divide(NationalInstruments.ComplexInt16)">
            <summary>
            Divides this object by a <see cref="T:NationalInstruments.ComplexInt16"/> and returns
            a new <see cref="T:NationalInstruments.ComplexInt16"/> that represents the result.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexInt16"/> by which to divide this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> that represents the value of this
            object divided by the value of <paramref name="c"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.op_Division(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:45:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_UnaryPlus(NationalInstruments.ComplexInt16)">
            <summary>
            Returns the specified instance of the <see cref="T:NationalInstruments.ComplexInt16"/> (unary plus).
            </summary>
            <param name="c">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <returns>
            The specified instance of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.Plus" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:50:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_UnaryNegation(NationalInstruments.ComplexInt16)">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is the negative of the specified 
            object (unary minus).
            </summary>
            <param name="c">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is the negative of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexInt16.Negate" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:48:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Addition(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <summary>
            Adds the values of two <see cref="T:NationalInstruments.ComplexInt16"/> objects.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is the sum of 
            <paramref name="c1"/> and <paramref name="c2"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.Add(NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:51:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Subtraction(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <summary>
            Subtracts the value of one <see cref="T:NationalInstruments.ComplexInt16"/> from the value of another <see cref="T:NationalInstruments.ComplexInt16"/>.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is the result of 
            <paramref name="c1"/> minus <paramref name="c2"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.Subtract(NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:49:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Multiply(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <summary>
            Multiplies the values of two <see cref="T:NationalInstruments.ComplexInt16"/> objects.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is the product of 
            <paramref name="c1"/> and <paramref name="c2"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.Multiply(NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:49:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Division(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <summary>
            Divides the value of a <see cref="T:NationalInstruments.ComplexInt16"/> by the value of another <see cref="T:NationalInstruments.ComplexInt16"/>.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexInt16"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexInt16"/> with a value that is equal to  
            <paramref name="c1"/> divided by <paramref name="c2"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting real or imaginary value is larger than <see cref="F:System.Int16.MaxValue" crefType="PartiallyQualified"/>
            or smaller than <see cref="F:System.Int16.MinValue" crefType="PartiallyQualified"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexInt16.Divide(NationalInstruments.ComplexInt16)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 12:50:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/11/2005 11:05:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Equals(NationalInstruments.ComplexInt16)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Equality(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.ComplexInt16"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.ComplexInt16"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.ComplexInt16"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.op_Inequality(NationalInstruments.ComplexInt16,NationalInstruments.ComplexInt16)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.ComplexInt16"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.ComplexInt16"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.ComplexInt16"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexInt16.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.ComplexInt16.Zero">
            <summary>
            Gets the complex number <format type="italics">0 + 0i</format>.
            </summary>
            <value>
            The complex number <format type="italics">0 + 0i</format>.
            </value>
            <remarks>
            This property provides a convenient source for an object of a 
            <see cref="T:NationalInstruments.ComplexInt16"/> with a value of <format type="italics">0 + 0i</format>.
            </remarks>
            <lastupdated>8/8/2011 12:39:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexInt16.ComplexConjugate">
            <summary>
            Gets the complex conjugate of the <see cref="T:NationalInstruments.ComplexInt16"/>.
            </summary>
            <value>
            The complex conjugate of this object.  For a complex number <format type="italics">a + bi</format>, the complex 
            conjugate is <format type="italics">a - bi</format>.
            </value>
            <lastupdated>8/8/2011 12:39:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexInt16.Real">
            <summary>Gets or sets the real part of the <see cref="T:NationalInstruments.ComplexInt16"/>.</summary><value>The real part of the <see cref="T:NationalInstruments.ComplexInt16"/>.</value><lastupdated>8/8/2011 12:39:32 PM</lastupdated><updatedby>Measurement Studio</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexInt16.Imaginary">
            <summary>Gets or sets the imaginary part of the <see cref="T:NationalInstruments.ComplexInt16"/>.</summary><value>The imaginary part of the <see cref="T:NationalInstruments.ComplexInt16"/>.</value><lastupdated>8/8/2011 12:39:25 PM</lastupdated><updatedby>Measurement Studio</updatedby><approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ComplexSingle">
            <summary>
            Represents a complex number of type <see cref="T:System.Single"/> that is composed of a real part and an imaginary part.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            A complex number is an ordered pair of real numbers. 
            Complex numbers are usually written as <format type="italics">a + bi</format>
            where <format type="italics">a</format>
             represents the real part and <format type="italics">b</format>
             represents the imaginary part. <see cref="T:NationalInstruments.ComplexSingle"/> represents a complex number where <format type="italics">a</format>
            and <format type="italics">b</format> are of type <see cref="T:System.Single"/>.  Complex numbers can also be represented using 
            <see cref="P:NationalInstruments.ComplexSingle.Magnitude"/> and <see cref="P:NationalInstruments.ComplexSingle.Phase"/>. 
            <see cref="P:NationalInstruments.ComplexSingle.Magnitude"/> is defined as the square root of the sum of 
            <see cref="P:NationalInstruments.ComplexSingle.Real"/><format type="superscript">2</format> + 
            <see cref="P:NationalInstruments.ComplexSingle.Imaginary"/><format type="superscript">2</format>. 
            <see cref="P:NationalInstruments.ComplexSingle.Phase"/> is defined as the arctangent of <see cref="P:NationalInstruments.ComplexSingle.Real"/> and 
            <see cref="P:NationalInstruments.ComplexSingle.Imaginary"/>. You can plot <see cref="T:NationalInstruments.ComplexSingle"/> numbers on the complex graph.
            </remarks>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>8/5/2011 3:29:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.ComplexSingle"/> class with the specified real and imaginary values.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <param name="imaginary">The imaginary part of the complex number.</param>
            <lastupdated>2/21/2003 9:56:09 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.FromPolar(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexSingle"/> that represents a complex
            value with the specified magnitude and phase.
            </summary>
            <param name="magnitude">The magnitude of the complex quantity.</param>
            <param name="phase">The phase, in radians, of the complex quantity.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> that represents a complex value
            with a magnitude of <paramref name="magnitude"/> and a phase of 
            <paramref name="phase"/>.
            </returns>
            <lastupdated>2/21/2003 9:56:23 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.FromSingle(System.Single)">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexSingle"/> from a float real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with the real part specified by <paramref name="real"/>
            and a 0 imaginary part.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Explicit(System.Single)~NationalInstruments.ComplexSingle" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:58:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Explicit(System.Single)~NationalInstruments.ComplexSingle">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexSingle"/> from a float real value.
            </summary>
            <param name="real">The real part of the complex number.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with the real part specified by <paramref name="real"/>
            and a 0 imaginary part.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.FromSingle(System.Single)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:58:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.ComplexSingle.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ToString(System.String)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format.
            </summary>
            <param name="format">
            The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Single"/> and is applied to the real and imaginary
            parts of the complex number. If <paramref name="format"/> is <see langword="null"/>, the return value uses the default format.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ToString(System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified culture-specific formatting information.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the real and imaginary parts of the number. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="formatProvider"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
            <param name="format">
                The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Single"/> and is applied to the real and imaginary
            parts of the complex number. If <paramref name="format"/> is <see langword="null"/>,  the return value uses the default format.</param>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the real and imaginary parts of the number. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Parse(System.String)" crefType="Unqualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:04:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Parse(System.String)">
            <summary>
            Converts the string representation of a complex number to its
            <see cref="T:NationalInstruments.ComplexSingle"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> equivalent to the complex numeric value
            specified in <paramref name="input"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <paramref name="input"/> is not a complex number in a valid format.
                <para>- or -</para>
                <para>One or both of Real or Imaginary parts are not a valid <see cref="T:System.Single"/>.</para>
            </exception>
            <remarks>
                <para>The <paramref name="input"/> parameter can contain a string of the form:</para>
                <list type="bullet">
                    <item><description>[real] + [imaginary]i</description></item>
                    <item><description>[real] + [imaginary]j</description></item>
                    <item><description>[real] + i[imaginary]</description></item>
                    <item><description>[real] + j[imaginary]</description></item>
                    <item><description>[imaginary]i + [real]</description></item>
                    <item><description>[imaginary]j + [real]</description></item>
                    <item><description>i[imaginary] + real</description></item>
                    <item><description>j[imaginary] + real</description></item>
                    <item><description>([real], [imaginary])</description></item>
                </list>
                <para>
            The [real] and [imaginary] parts of the strings above are <see cref="T:System.Single"/> values whose
            string forms are specified in the <see cref="M:System.Single.Parse(System.String)"/> documentation.  Some examples
            of <paramref name="input"/> are "1.2 + 3.4i", "1.2 + 3.4j", "1.2 + i3.4", "1.2 + j3.4", and "(1.2, 3.4)".
            </para>
            </remarks>
            <seealso cref="M:System.Single.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.ToString" crefType="Unqualified"/>
            <lastupdated>6/7/2012 4:24:14 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its <see cref="T:NationalInstruments.ComplexSingle"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="input"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> equivalent to the complex numeric value
            specified in <paramref name="input"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                <paramref name="input"/> is not a complex number in a valid format.
                <para>- or -</para>
                <para>One or both of Real or Imaginary parts are not a valid <see cref="T:System.Single"/>.</para>
            </exception>
            <remarks>
                <para>The <paramref name="input"/> parameter can contain a string of the form:</para>
                <list type="bullet">
                    <item><description>[real] + [imaginary]i</description></item>
                    <item><description>[real] + [imaginary]j</description></item>
                    <item><description>[real] + i[imaginary]</description></item>
                    <item><description>[real] + j[imaginary]</description></item>
                    <item><description>[imaginary]i + [real]</description></item>
                    <item><description>[imaginary]j + [real]</description></item>
                    <item><description>i[imaginary] + real</description></item>
                    <item><description>j[imaginary] + real</description></item>
                    <item><description>([real], [imaginary])</description></item>
                </list>
                <para>
            The [real] and [imaginary] parts of the strings above are <see cref="T:System.Single"/> values whose
            string forms are specified in the <see cref="M:System.Single.Parse(System.String)"/> documentation.  Some examples
            of <paramref name="input"/> are "1.2 + 3.4i", "1.2 + 3.4j", "1.2 + i3.4", "1.2 + j3.4", and "(1.2, 3.4)".
            </para>
            </remarks>
            <seealso cref="M:System.Single.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.ToString" crefType="Unqualified"/>
            <lastupdated>6/7/2012 4:24:49 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.TryParse(System.String,NationalInstruments.ComplexSingle@)">
            <summary>
            Converts the string representation of a complex number to its
            <see cref="T:NationalInstruments.ComplexSingle"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="result">
            A <see cref="T:NationalInstruments.ComplexSingle"/> equivalent to the complex numeric value
            specified by <paramref name="input"/>.  If the return value is <see langword="false"/>, <paramref name="result"/>
            is <see cref="P:NationalInstruments.ComplexSingle.Zero"/>.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> is converted successfully.
            </returns>
            <seealso cref="M:System.Single.TryParse(System.String,System.Single@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.ToString" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:18:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.TryParse(System.String,System.IFormatProvider,NationalInstruments.ComplexSingle@)">
            <summary>
            Converts the string representation of a complex number in a specified culture-specific format
            to its <see cref="T:NationalInstruments.ComplexSingle"/> equivalent.
            </summary>
            <param name="input">A string containing a complex number to convert.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information
            about <paramref name="input"/>.
            </param>
            <param name="result">
            A <see cref="T:NationalInstruments.ComplexSingle"/> equivalent to the complex numeric value
            specified by <paramref name="input"/>.  If the return value is <see langword="false"/>, <paramref name="result"/>
            is <see cref="P:NationalInstruments.ComplexSingle.Zero"/>.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> is converted successfully.
            </returns>
            <seealso cref="M:System.Single.TryParse(System.String,System.Single@)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.Parse(System.String)" crefType="PartiallyQualified"/>
            <seealso cref="M:NationalInstruments.ComplexSingle.ToString" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:19:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ComposeArray(System.Single[],System.Single[])">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexSingle"/> objects from 
            <see cref="T:System.Single"/> arrays that represent the real and imaginary parts of complex numbers.
            </summary>
            <param name="realData">The real parts of complex numbers.</param>
            <param name="imaginaryData">The imaginary parts of complex numbers.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> array in which the real part of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="realData"/>[<format type="italics">n</format>] 
            and the imaginary part is <paramref name="imaginaryData"/>[<format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="realData"/> and <paramref name="imaginaryData"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="realData"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="imaginaryData"/> is <see langword="null"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.DecomposeArray(NationalInstruments.ComplexSingle[],System.Single[]@,System.Single[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:49:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ComposeArray(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexSingle"/> objects from subsets of 
            <see cref="T:System.Single"/> arrays that represent the real and imaginary parts of complex numbers.
            </summary>
            <param name="realData">The real parts of complex numbers.</param>
            <param name="imaginaryData">The imaginary parts of complex numbers.</param>
            <param name="startIndex">
            The index in <paramref name="realData"/> (and <paramref name="imaginaryData"/>) from which to compose the <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="realData"/> and 
            <paramref name="imaginaryData"/>, to compose the <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> array in which the real part of the
            <format type="italics">n</format><format type="superscript">th</format>  element is <paramref name="realData"/>[<paramref name="startIndex"/> + <format type="italics">n</format>] and the imaginary part is 
            <paramref name="imaginaryData"/>[<paramref name="startIndex"/> + <format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="realData"/> and <paramref name="imaginaryData"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="realData"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="imaginaryData"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="realData"/> (or <paramref name="imaginaryData"/>).</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="realData"/> (or <paramref name="imaginaryData"/>).</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.DecomposeArray(NationalInstruments.ComplexSingle[],System.Single[]@,System.Single[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:51:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ComposeArrayPolar(System.Single[],System.Single[])">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexSingle"/> objects from 
            <see cref="T:System.Single"/> arrays that represent the magnitudes and phases of complex numbers.
            </summary>
            <param name="magnitudes">The magnitudes of complex numbers.</param>
            <param name="phases">The phases of complex numbers.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> array in which the magnitude of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="magnitudes"/>[<format type="italics">n</format>]
             and the phase is <paramref name="phases"/>[<format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="magnitudes"/> and <paramref name="phases"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="magnitudes"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="phases"/> is <see langword="null"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.DecomposeArray(NationalInstruments.ComplexSingle[],System.Single[]@,System.Single[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:52:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.ComposeArrayPolar(System.Single[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Creates an array of <see cref="T:NationalInstruments.ComplexSingle"/> objects from subsets of
            <see cref="T:System.Single"/> arrays that represent the magnitudes and phases of complex numbers.
            </summary>
            <param name="magnitudes">The magnitudes of complex numbers.</param>
            <param name="phases">The phases of complex numbers.</param>
            <param name="startIndex">The index in <paramref name="magnitudes"/> and <paramref name="phases"/> from which to compose the <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="magnitudes"/> and 
            <paramref name="phases"/>, to compose the <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> array in which the magnitude of the
            <format type="italics">n</format><format type="superscript">th</format> element is <paramref name="magnitudes"/>[<paramref name="startIndex"/> + <format type="italics">n</format>]
             and the phase is <paramref name="phases"/>[<paramref name="startIndex"/> + <format type="italics">n</format>].
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="magnitudes"/> and <paramref name="phases"/> do not have the same length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="magnitudes"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="phases"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="magnitudes"/> or <paramref name="phases"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="magnitudes"/> or <paramref name="phases"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.DecomposeArray(NationalInstruments.ComplexSingle[],System.Single[]@,System.Single[]@)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:53:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.DecomposeArray(NationalInstruments.ComplexSingle[],System.Single[]@,System.Single[]@)">
            <summary>
            Extracts the real and imaginary parts of a <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <param name="realData">Upon return, contains an array that consists of the real parts of <paramref name="complexData"/>.</param>
            <param name="imaginaryData">Upon return, contains an array that consists of the imaginary parts of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.ComposeArray(System.Single[],System.Single[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:54:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.DecomposeArray(NationalInstruments.ComplexSingle[],System.Int32,System.Int32,System.Single[]@,System.Single[]@)">
            <summary>
            Extracts the real and imaginary parts of a subset of a <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <param name="startIndex">The index in <paramref name="complexData"/> from which to decompose into two <see cref="T:System.Single"/> arrays.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>,
             to decompose into two <see cref="T:System.Single"/> arrays.
            </param>
            <param name="realData">Upon return, contains an array that consists of the real parts of <paramref name="complexData"/>.</param>
            <param name="imaginaryData">Upon return, contains an array that consists of the imaginary parts of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="complexData"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.ComposeArray(System.Single[],System.Single[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:55:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.DecomposeArrayPolar(NationalInstruments.ComplexSingle[],System.Single[]@,System.Single[]@)">
            <summary>
            Extracts the magnitude and phase parts of a <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <param name="magnitudes">Upon return, contains an array that consists of the magnitudes of <paramref name="complexData"/>.</param>
            <param name="phases">Upon return, contains an array that consists of the phases of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.ComposeArray(System.Single[],System.Single[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:55:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.DecomposeArrayPolar(NationalInstruments.ComplexSingle[],System.Int32,System.Int32,System.Single[]@,System.Single[]@)">
            <summary>
            Extracts the magnitude and phase parts of a subset of a <see cref="T:NationalInstruments.ComplexSingle"/> array.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <param name="startIndex">The index in <paramref name="complexData"/> from which to decompose into two <see cref="T:System.Single"/> arrays.</param>
            <param name="length">
            The number of elements used, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>,
             to decompose into two <see cref="T:System.Single"/> arrays.
            </param>
            <param name="magnitudes">Upon return, contains an array that consists of the magnitudes of <paramref name="complexData"/>.</param>
            <param name="phases">Upon return, contains an array that consists of the phases of <paramref name="complexData"/>.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startIndex"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="startIndex"/> is greater than or equal to the number of elements in <paramref name="complexData"/>.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is less than 0.</para>
                <para>- or -</para>
                <para><paramref name="length"/> is greater than the number of elements from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.</para>
            </exception>
            <seealso cref="M:NationalInstruments.ComplexSingle.ComposeArray(System.Single[],System.Single[])" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:56:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.GetPhases(NationalInstruments.ComplexSingle[])">
            <summary>
            Extracts the phases of complex numbers from an array of <see cref="T:NationalInstruments.ComplexSingle"/> objects.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <returns>
            A <see cref="T:System.Single"/> array that contains the phases of the complex numbers in
            <paramref name="complexData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/28/2003 2:45:16 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.GetMagnitudes(NationalInstruments.ComplexSingle[])">
            <summary>
            Extracts the magnitudes of complex numbers from an array of <see cref="T:NationalInstruments.ComplexSingle"/> objects.
            </summary>
            <param name="complexData">A <see cref="T:NationalInstruments.ComplexSingle"/> array.</param>
            <returns>
            A <see cref="T:System.Single"/> array that contains the magnitudes of the complex numbers in
            <paramref name="complexData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="complexData"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/28/2003 2:45:07 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Plus">
            <summary>
            Returns this instance of the <see cref="T:NationalInstruments.ComplexSingle"/> (unary plus).
            </summary>
            <returns>
            This instance of the <see cref="T:NationalInstruments.ComplexSingle"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Addition(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:02:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is 
            the negated value of this object (unary minus).
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is the negated value 
            of this object.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Subtraction(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Add(NationalInstruments.ComplexSingle)">
            <summary>
            Adds the value of the specified <see cref="T:NationalInstruments.ComplexSingle"/> to this object and returns a 
            new <see cref="T:NationalInstruments.ComplexSingle"/> that represents the sum.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexSingle"/> to add to this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> that represents the value of this 
            object plus the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Addition(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:30:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Subtract(NationalInstruments.ComplexSingle)">
            <summary>
            Subtracts the value of a <see cref="T:NationalInstruments.ComplexSingle"/> from this object and 
            returns a new <see cref="T:NationalInstruments.ComplexSingle"/> that represents the difference.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexSingle"/> to subtract from this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> that represents the value of this
            object minus the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Subtraction(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:03:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Multiply(NationalInstruments.ComplexSingle)">
            <summary>
            Multiplies a <see cref="T:NationalInstruments.ComplexSingle"/> with this object and 
            returns a new <see cref="T:NationalInstruments.ComplexSingle"/> that represents the product.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexSingle"/> to multiply with this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> that represents the value of this
            object times the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Multiply(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Divide(NationalInstruments.ComplexSingle)">
            <summary>
            Divides this object by a <see cref="T:NationalInstruments.ComplexSingle"/> and returns
            a new <see cref="T:NationalInstruments.ComplexSingle"/> that represents the result.
            </summary>
            <param name="c">The <see cref="T:NationalInstruments.ComplexSingle"/> by which to divide this object.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> that represents the value of this
            object divided by the value of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.op_Division(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:56:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_UnaryPlus(NationalInstruments.ComplexSingle)">
            <summary>
            Returns the specified instance of the <see cref="T:NationalInstruments.ComplexSingle"/> (unary plus).
            </summary>
            <param name="c">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <returns>
            The specified instance of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Plus" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:00:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_UnaryNegation(NationalInstruments.ComplexSingle)">
            <summary>
            Returns a <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is the negative of the specified 
            object (unary minus).
            </summary>
            <param name="c">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is the negative of <paramref name="c"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Negate" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Addition(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <summary>
            Adds the values of two <see cref="T:NationalInstruments.ComplexSingle"/> objects.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is the sum of 
            <paramref name="c1"/> and <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Add(NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:00:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Subtraction(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <summary>
            Subtracts the value of one <see cref="T:NationalInstruments.ComplexSingle"/> from the value of another <see cref="T:NationalInstruments.ComplexSingle"/>.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is the result of 
            <paramref name="c1"/> minus <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Subtract(NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 3:59:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Multiply(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <summary>
            Multiplies the values of two <see cref="T:NationalInstruments.ComplexSingle"/> objects.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is the product of 
            <paramref name="c1"/> and <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Multiply(NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/5/2011 4:00:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Division(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <summary>
            Divides the value of a <see cref="T:NationalInstruments.ComplexSingle"/> by the value of another <see cref="T:NationalInstruments.ComplexSingle"/>.
            </summary>
            <param name="c1">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <param name="c2">A <see cref="T:NationalInstruments.ComplexSingle"/>.</param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexSingle"/> with a value that is equal to 
            <paramref name="c1"/> divided by <paramref name="c2"/>.
            </returns>
            <seealso cref="M:NationalInstruments.ComplexSingle.Divide(NationalInstruments.ComplexSingle)" crefType="Unqualified"/>
            <lastupdated>8/8/2011 1:20:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/11/2005 11:05:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Equals(NationalInstruments.ComplexSingle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Equality(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.ComplexSingle"/> objects have the same value.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.ComplexSingle"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.ComplexSingle"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.op_Inequality(NationalInstruments.ComplexSingle,NationalInstruments.ComplexSingle)">
            <summary>
            Determines whether two specified <see cref="T:NationalInstruments.ComplexSingle"/> objects have different values.
            </summary>
            <returns>
            <see langword="true"/> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="left">
            A <see cref="T:NationalInstruments.ComplexSingle"/> object.
            </param>
            <param name="right">
            A <see cref="T:NationalInstruments.ComplexSingle"/> object.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.ComplexSingle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.ComplexSingle.Magnitude">
            <summary>
            Gets the magnitude of the <see cref="T:NationalInstruments.ComplexSingle"/>.
            </summary>
            <value>
            The magnitude of the <see cref="T:NationalInstruments.ComplexSingle"/>.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.ComplexSingle.Magnitude"/> is defined as the square root of the sum of <see cref="P:NationalInstruments.ComplexSingle.Real"/><format type="superscript">2</format> + <see cref="P:NationalInstruments.ComplexSingle.Imaginary"/><format type="superscript">2</format>. 
            </remarks>
            <lastupdated>3/17/2008 3:36:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexSingle.Phase">
            <summary>
            Gets the phase of the <see cref="T:NationalInstruments.ComplexSingle"/>.
            </summary>
            <value>
            The phase of the <see cref="T:NationalInstruments.ComplexSingle"/>.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.ComplexSingle.Phase"/> is defined as the arctangent of <see cref="P:NationalInstruments.ComplexSingle.Real"/> and <see cref="P:NationalInstruments.ComplexSingle.Imaginary"/>. 
            </remarks>
            <lastupdated>3/17/2008 3:37:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexSingle.Zero">
            <summary>
            Gets the complex number <format type="italics">0 + 0i</format>.
            </summary>
            <value>
            The complex number <format type="italics">0 + 0i</format>.
            </value>
            <remarks>
            This property provides a convenient source for an object of a 
            <see cref="T:NationalInstruments.ComplexSingle"/> with a value of <format type="italics">0 + 0i</format>.
            </remarks>
            <lastupdated>2/21/2003 9:57:05 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexSingle.ComplexConjugate">
            <summary>
            Gets the complex conjugate of the <see cref="T:NationalInstruments.ComplexSingle"/>.
            </summary>
            <value>
            The complex conjugate of this object.  For a complex number <format type="italics">a + bi</format>, the complex 
            conjugate is <format type="italics">a - bi</format>.
            </value>
            <lastupdated>8/5/2011 3:30:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexSingle.Real">
            <summary>Gets or sets the real part of the <see cref="T:NationalInstruments.ComplexSingle"/>.</summary><value>The real part of the <see cref="T:NationalInstruments.ComplexSingle"/>.</value><lastupdated>2/21/2003 9:56:52 AM</lastupdated><updatedby>Beth Parrott</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexSingle.Imaginary">
            <summary>Gets or sets the imaginary part of the <see cref="T:NationalInstruments.ComplexSingle"/>.</summary><value>The imaginary part of the <see cref="T:NationalInstruments.ComplexSingle"/>.</value><lastupdated>2/21/2003 9:56:29 AM</lastupdated><updatedby>Beth Parrott</updatedby><approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ComplexWaveform`1">
            <summary>
            Provides a data type that encapsulates raw complex data, scaling information, and timing information.
            </summary>
            <threadsafety safety="unsafe"/>
            <typeparam name="TData">
            The underlying type of the waveform. <typeparamref name="TData"/> supports the <see cref="T:NationalInstruments.ComplexDouble"/>,
            <see cref="T:NationalInstruments.ComplexInt16"/>, and <see cref="T:NationalInstruments.ComplexSingle"/> data types.
            </typeparam>
            <remarks>
                <para>
                    <see cref="T:NationalInstruments.ComplexWaveform`1"/> encapsulates a group of sampled complex values and timing information.
            Each sample represents a complex value. Use <see cref="P:NationalInstruments.ComplexWaveform`1.Samples"/> to access the samples
            in a complex waveform. Use <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> to get the raw complex data and
            <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> to get the scaled complex data.
            <see cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/> determines the scaling of the scaled data.</para>
                <para><see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>
            specifies the timing information of the <see cref="T:NationalInstruments.ComplexWaveform`1"/>. When you create a complex
            waveform using the constructor or a factory method, such as <see cref="M:NationalInstruments.ComplexWaveform`1.FromArray1D(`0[])"/>,
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> is set to
            <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
                </para>
                <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>
            The following example demonstrates a method that displays all the complex values in an <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            Each line displays a new complex value.
            <code lang="VB.NET">
            Private Sub DisplayWaveform(Of TData)(ByVal waveform As ComplexWaveform(Of TData))
                 For Each sample As ComplexWaveformSample(Of TData) In waveform.Samples
                      Console.WriteLine(String.Format("{0}", sample.Value))
                 Next
            End Sub
            </code>
            </example>
            <example>
            <code lang="C#">
            private void DisplayWaveform&lt;TData&gt;(ComplexWaveformSample&lt;TData&gt; waveform)
            {
                 foreach (ComplexWaveformSample&lt;TData&gt; sample in waveform.Samples)
                 {
                      Console.WriteLine(String.Format("{0}", sample.Value));
                 }
            }
            </code>
            </example>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>8/5/2011 3:04:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.ComplexWaveform`1"/> with the specified sample
            count.
            </summary>
            <param name="sampleCount">
            The number of samples in <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleCount"/> is less than zero.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> is set to <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> to set the timing information.
            </remarks>
            <lastupdated>12/11/2007 1:05:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.ComplexWaveform`1"/> with the specified sample
            count and capacity.
            </summary>
            <param name="sampleCount">
            The number of samples in <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <param name="capacity">
            The total capacity of the <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="capacity"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="capacity"/> is less than <paramref name="sampleCount"/>.
            </exception>
            <remarks>
                <para>
            Setting the capacity of the <see cref="T:NationalInstruments.ComplexWaveform`1"/> initializes the memory
            required for that capacity without increasing the number of samples in the waveform.  Setting the capacity
            large enough to fit any data that may be added to the <see cref="T:NationalInstruments.ComplexWaveform`1"/>
            after creation makes adding data later more efficient.  Initializing an <see cref="T:NationalInstruments.ComplexWaveform`1"/>
            with a capacity greater than the number of samples allocates extra memory for the capacity specified, so that
            appending <see cref="T:NationalInstruments.ComplexWaveform`1"/> using <see cref="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})"/>
            does not require new allocation of memory or copying of existing samples.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> is set to <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> to set the timing information.
            </para>
            </remarks>
            <lastupdated>6/7/2012 1:25:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:12:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.FromArray1D(`0[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexWaveform`1"/> from an array of values.
            </summary>
            <param name="array">
            The array of values.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> is set to <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> to set the timing information.
            </remarks>
            <lastupdated>11/20/2007 4:19:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.FromArray2D(`0[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexWaveform`1"/> array from a two-dimensional array of values.
            </summary>
            <param name="array">
            The two-dimensional array of values.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexWaveform`1"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each <see cref="T:NationalInstruments.ComplexWaveform`1"/> instance in the returned array represents a row of data
            in the two-dimensional <paramref name="array"/>. Upon construction, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> is set to <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> to set the timing information.
            </remarks>
            <lastupdated>11/20/2007 4:23:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.CopySamples(NationalInstruments.ComplexWaveform{`0},NationalInstruments.ComplexWaveform{`0},System.Int32)">
            <summary>
            Copies the data of a source complex waveform to a destination complex waveform.
            </summary>
            <param name="sourceWaveform">
            The source <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <param name="destinationWaveform">
            The destination <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="sourceWaveform"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="destinationWaveform"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than the <paramref name="sourceWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than the <paramref name="destinationWaveform"/> sample count.</para>
            </exception>
            <lastupdated>11/20/2007 4:18:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.CopySamples(NationalInstruments.ComplexWaveform{`0},System.Int32,NationalInstruments.ComplexWaveform{`0},System.Int32,System.Int32)">
            <summary>
            Copies the data of a source complex waveform to a destination complex waveform with the specified indexes.
            </summary>
            <param name="sourceWaveform">
            The source <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <param name="sourceSampleIndex">
            The source sample index.
            </param>
            <param name="destinationWaveform">
            The destination <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </param>
            <param name="destinationSampleIndex">
            The destination sample index.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="sourceWaveform"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="destinationWaveform"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sourceSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sourceSampleIndex"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="sourceWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="destinationWaveform"/> sample count.</para>
            </exception>
            <lastupdated>11/20/2007 4:19:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetRawData">
            <summary>
            Returns the raw complex waveform data.
            </summary>
            <returns>
            The raw complex waveform data.
            </returns>
            <remarks>
            The raw data returned is a copy of the data in the complex waveform.
            </remarks>
            <lastupdated>11/20/2007 5:11:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetRawData(System.Int32,System.Int32)">
            <summary>
            Returns the raw complex waveform data using the specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to return.
            </param>
            <returns>
            The raw complex waveform data.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            The raw data returned is a copy of the data in the complex waveform.
            </remarks>
            <lastupdated>11/20/2007 5:11:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetRawData(System.Int32,System.Int32,`0[],System.Int32)">
            <summary>
            Returns the raw complex waveform data using the specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the raw data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the raw data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            The raw data returned is a copy of the data in the complex waveform.
            </remarks>
            <lastupdated>12/11/2007 2:31:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetScaledData">
            <summary>
            Returns the scaled complex waveform data.
            </summary>
            <returns>
            The scaled complex waveform data.
            </returns>
            <remarks>
            The scaled data returned is a copy of the data in the complex waveform. You can use
            <see cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/> to define how the returned data is scaled.
            </remarks>
            <seealso cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/>
            <lastupdated>12/11/2007 1:06:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetScaledData(System.Int32,System.Int32)">
            <summary>
            Returns the scaled complex waveform data using the sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to return.
            </param>
            <returns>
            The scaled complex waveform data.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            The scaled data returned is a copy of the data in the complex waveform. You can use
            <see cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/> to define how the returned data is scaled.
            </remarks>
            <lastupdated>12/11/2007 1:06:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetScaledData(System.Int32,System.Int32,NationalInstruments.ComplexDouble[],System.Int32)">
            <summary>
            Returns the scaled complex waveform data using the sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the data.
            </param>
            <param name="count">
            The number of samples to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the scaled data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            The scaled data returned is a copy of the data in the complex waveform. You can use
            <see cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/> to define how the returned data is scaled.
            </remarks>
            <lastupdated>12/11/2007 1:06:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
            <see cref="M:NationalInstruments.ComplexWaveform`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the non-static fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>11/20/2007 4:18:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.System#ICloneable#Clone">
            <exclude/>
            <lastupdated>1/23/2009 4:12:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStamps">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
            </para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>
            <lastupdated>11/20/2007 5:11:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> using
            the specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
            </para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>
            <lastupdated>11/20/2007 5:12:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> using
            the specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the complex waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
            </para>
                <para>-or-</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>
            <lastupdated>11/20/2007 5:12:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetBuffer(System.Boolean)">
             <summary>
             Gets a buffer representing the data of the complex waveform.
             </summary>
             <param name="copy">Indicates whether a copy of the waveform data is returned.</param>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing the
             data of the complex waveform.
             </returns>
             <remarks>
                 <para>
             The number of samples in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             is equal to <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/>.
             </para>
                 <para>
             The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
             by <see cref="M:NationalInstruments.ComplexWaveform`1.GetBuffer(System.Boolean)" crefType="Unqualified"/>
             is a read-only view of the waveform data.  Calling <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
             on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             makes a copy of the waveform data.  To modify the actual data in the waveform, call
             <see cref="M:NationalInstruments.ComplexWaveform`1.GetWritableBuffer" crefType="Unqualified"/>.
             </para>
                 <para>
             When <paramref name="copy"/> is <see langword="true"/>, the returned buffer is populated with a copy of
             the waveform data. It is safe to access the samples of the returned buffer until it is explicitly disposed.
             </para>
                 <para>
             When <paramref name="copy"/> is <see langword="false"/>, the returned buffer contains a direct reference
             to the waveform data. It is only safe to access the samples of the returned buffer when the data in the
             waveform is not changed. Calling <see cref="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})" crefType="Unqualified"/>
             changes the data through the buffer returned by <see cref="M:NationalInstruments.ComplexWaveform`1.GetWritableBuffer" crefType="Unqualified"/> and
              using a memory-optimized read method invalidates the returned buffer and makes it unsafe to use.
             </para>
             </remarks>
             <example>
             <code lang="VB.NET">
             Dim buffer As NationalInstruments.DataInfrastructure.Buffer(Of ComplexDouble) = complexWaveform.GetBuffer(True)
            
             For i As Integer = 0 To buffer.Size - 1
                  'Access data samples using indexer property and write the data value to an output window.
                  Debug.WriteLine(buffer(i))
             Next
             </code>
             <code lang="C#">
             NationalInstruments.DataInfrastructure.Buffer&lt;ComplexDouble&gt; buffer = complexWaveform.GetBuffer(true);
            
             for (int i = 0; i &lt; buffer.Size; i++)
             {
                  //Access data samples using indexer property and write the data value to an output window.
                  Debug.WriteLine(buffer[i]);
             }
             </code>
             </example>
             <lastupdated>6/11/2012 11:39:51 AM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetWritableBuffer">
             <summary>
             Gets a writable buffer representing the data of the complex waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/> representing the
             data of the complex waveform.
             </returns>
             <remarks>
                 <para>
             The number of time stamps in the <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/>
             is equal to <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/>.
             </para>
             </remarks>
             <example>
             <code lang="VB.NET">
             Dim r As New Random()
             Dim writableBuffer As NationalInstruments.DataInfrastructure.WritableBuffer(Of ComplexDouble) = complexWaveform.GetWritableBuffer()
            
             For i As Integer = 0 To writableBuffer.Size - 1
                  'Add a random value.
                  writableBuffer(i) = writableBuffer(i) + New ComplexDouble(r.NextDouble(), r.NextDouble())
             Next
             </code>
             <code lang="C#">
             Random r = new Random();
             NationalInstruments.DataInfrastructure.WritableBuffer&lt;ComplexDouble&gt; writableBuffer = complexWaveform.GetWritableBuffer();
            
             for (int i = 0; i &lt; writableBuffer.Size; i++)
             {
                  //Add a random value.
                  writableBuffer[i] = writableBuffer[i] + new ComplexDouble(r.NextDouble(), r.NextDouble());
             }
             </code>
             </example>
             <lastupdated>6/7/2012 1:29:45 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetPrecisionTimeStampBuffer">
             <summary>
             Gets a buffer representing the precision time stamps of the complex waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing
             the precision time stamps of the complex waveform.
             </returns>
             <remarks>
                 <para>
             The number of time stamps in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             is equal to <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/>.
             </para>
                 <para>
             The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
             by <see cref="M:NationalInstruments.ComplexWaveform`1.GetBuffer(System.Boolean)" crefType="Unqualified"/>
             is a read-only view of the waveform precision time stamps.  Calling
             <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
             on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
             makes a copy of the precision time stamp data.  To change the precision timing of the waveform, set
             <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>
             to a new value.
             </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
                 <para>
             The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
             of <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
             </para>
                 <para>- or -</para>
                 <para>
             The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
             of <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> and the
             <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp" crefType="Unqualified"/> property is
             <see langword="false"/>.
             </para>
             </exception>
             <example>
             <code lang="VB.NET">
             Dim precisionDateTimeBuffer As NationalInstruments.DataInfrastructure.Buffer(Of PrecisionDateTime) = complexWaveform.GetPrecisionTimeStampBuffer()
            
             For i As Integer = 0 To precisionDateTimeBuffer.Size - 1
                  'Access data samples using an indexer property and write the timestamp to an output window.
                  Debug.WriteLine(precisionDateTimeBuffer(i))
             Next
             </code>
             <code lang="C#">
             NationalInstruments.DataInfrastructure.Buffer&lt;PrecisionDateTime&gt; precisionDateTimeBuffer = complexWaveform.GetPrecisionTimeStampBuffer();
            
             for (int i = 0; i &lt; precisionDateTimeBuffer.Size; i++)
             {
                  //Access data samples using an indexer property and write the timestamp to an output window.
                  Debug.WriteLine(precisionDateTimeBuffer[i]);
             }
            
             </code>
             </example>
             <lastupdated>6/7/2012 1:29:14 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.Append(`0[])">
            <summary>
            Appends data to the complex waveform.
            </summary>
            <param name="data">
            The data to append to the complex waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of elements in <paramref name="data"/> is larger than <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the data you append.
            </remarks>
            <lastupdated>6/7/2012 1:12:30 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.Append(`0[],NationalInstruments.PrecisionDateTime[])">
            <summary>
            Appends data and precision time stamps to the complex waveform.
            </summary>
            <param name="data">
            The data to append to the complex waveform.
            </param>
            <param name="timeStamps">
            The precision time stamps to append to the timing of the complex waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="data"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para><paramref name="timeStamps"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>The length of <paramref name="data"/> is not equal to the length of <paramref name="timeStamps"/>.</para>
                <para>- or -</para>
                <para><paramref name="timeStamps"/> are not in ascending order after the time stamps in <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>.</para>
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of elements in <paramref name="data"/> is larger than <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the data you append.  The capacity does not affect the memory allocation of the waveform timing.  The memory of
            the waveform timing is reallocated on each call to <see cref="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>6/7/2012 1:15:26 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})">
            <summary>
            Appends complex waveform data and time stamps to the current complex waveform.
            </summary>
            <param name="waveform">
            The <see cref="T:NationalInstruments.ComplexWaveform`1" crefType="Unqualified"/> to append to
            the current complex waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            <paramref name="waveform"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            <paramref name="waveform"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The time stamps in <paramref name="waveform"/> are not in ascending order after the time stamps
            in <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>.
            </exception>
            <remarks>
                <para>
            If <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the number of samples in <paramref name="waveform"/> is larger than <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the waveform data you append.
            </para>
                <para>
            If the <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>, the timing
            of <paramref name="waveform"/> is discarded.  If the <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/>
            property of <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>, the
            time stamps in <paramref name="waveform"/> are appended to the complex waveform's time stamps.
            </para>
                <para>Each extended property in the <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of
            <paramref name="waveform"/> is copied to the <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties" crefType="Unqualified"/>
            collection of the current complex waveform if it does not already exist in the
            <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of the current complex waveform.
            </para>
            </remarks>
            <lastupdated>6/7/2012 1:09:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0}[])">
            <summary>
            Appends complex waveform data and time stamps from an array of waveforms to the current complex waveform.
            </summary>
            <param name="waveforms">
            An array of <see cref="T:NationalInstruments.ComplexWaveform`1" crefType="Unqualified"/> objects to append to
            the current complex waveform.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            an element in <paramref name="waveforms"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.
            </para>
                <para>- or -</para>
                <para>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/> and the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of the
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/> property of
            an element in <paramref name="waveforms"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="waveforms"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para>An element in <paramref name="waveforms"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The time stamps in the complex waveforms in <paramref name="waveforms"/> are not in ascending order after the time stamps
            in <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>.
            </exception>
            <remarks>
                <para>
            The complex waveforms are appended to the current complex waveform in the order in which they appear
            in <paramref name="waveforms"/>.
            </para>
                <para>
            If <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount" crefType="Unqualified"/> plus
            the sum of the number of samples in the complex waveforms in  <paramref name="waveforms"/> is larger than
            <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the waveform data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the
            <see cref="P:NationalInstruments.ComplexWaveform`1.Capacity" crefType="Unqualified"/>
            of the waveform large enough to hold the waveform data you append.
            </para>
                <para>
            If the <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property of
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> or
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>, the timing
            of the waveforms in <paramref name="waveforms"/> is discarded.  If the
            <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode" crefType="Unqualified"/> property
            of <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming" crefType="Unqualified"/>
            is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/>, the
            time stamps in the complex waveforms in <paramref name="waveforms"/> are appended to the
            complex waveform's time stamps.
            </para>
                <para>Each extended property in the <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of
            each waveform in <paramref name="waveforms"/> is copied to the <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties" crefType="Unqualified"/>
            collection of the current complex waveform if it does not already exist in the
            <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties" crefType="Unqualified"/> collection of the current complex waveform.
            </para>
            </remarks>
            <lastupdated>6/7/2012 1:11:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>11/20/2007 5:26:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/26/2009 12:09:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetRealDataArray(System.Boolean)">
            <summary>
            Returns an array that contains the real parts of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the real data.
            </param>
            <returns>
            An array that contains the real parts of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the real parts of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            </remarks>
            <lastupdated>12/11/2007 1:05:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetRealDataWaveform(System.Boolean)">
            <summary>
            Returns an <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the real
            parts of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the real data.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the
            real parts of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the real parts of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            The returned waveform always has <see cref="P:NationalInstruments.WaveformScaleMode.None"/> as the <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> value.
            Other complex waveform properties, such as  <see cref="P:NationalInstruments.ComplexWaveform`1.ChannelName"/>, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>,
            and <see cref="P:NationalInstruments.ComplexWaveform`1.UnitDescription"/> are copied to the returned analog waveform.
            </remarks>
            <lastupdated>12/11/2007 1:06:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetImaginaryDataArray(System.Boolean)">
            <summary>
            Returns an array that contains the imaginary parts of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the imaginary data.
            </param>
            <returns>
            An array that contains the imaginary parts of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the imaginary parts of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            </remarks>
            <lastupdated>12/11/2007 1:04:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetImaginaryDataWaveform(System.Boolean)">
            <summary>
            Returns an <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the imaginary
            parts of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the imaginary data.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the
            imaginary parts of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the imaginary parts of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            The returned waveform always has <see cref="P:NationalInstruments.WaveformScaleMode.None"/> as the <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> value.
            Other complex waveform properties, such as  <see cref="P:NationalInstruments.ComplexWaveform`1.ChannelName"/>, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>,
            and <see cref="P:NationalInstruments.ComplexWaveform`1.UnitDescription"/> are copied to the returned analog waveform.
            </remarks>
            <lastupdated>12/11/2007 1:05:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetMagnitudeDataArray(System.Boolean)">
            <summary>
            Returns an array that contains the magnitudes of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the magnitude.
            </param>
            <returns>
            An array that contains the magnitudes of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the magnitudes of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            <note type="note">This method is not supported for <see cref="T:NationalInstruments.ComplexWaveform`1"/> objects of type <see cref="T:NationalInstruments.ComplexInt16"/>.</note>
            </remarks>
            <lastupdated>8/5/2011 3:05:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetMagnitudeDataWaveform(System.Boolean)">
            <summary>
            Returns an <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the magnitude
            data of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the magnitude data.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that has the
            magnitude data of the complex samples.
            </returns>
            <remarks>
            The complex data that is used to get the magnitude data is obtained with the help of <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/>,
            if <paramref name="applyScaling"/> is <see langword="true"/>. Otherwise, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            The returned waveform always has <see cref="P:NationalInstruments.WaveformScaleMode.None"/> as the <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> value.
            Other complex waveform properties, such as  <see cref="P:NationalInstruments.ComplexWaveform`1.ChannelName"/>, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>,
            and <see cref="P:NationalInstruments.ComplexWaveform`1.UnitDescription"/>, are copied to the returned analog waveform.
            <note type="note">This method is not supported for <see cref="T:NationalInstruments.ComplexWaveform`1"/> objects of type <see cref="T:NationalInstruments.ComplexInt16"/>.</note>
            </remarks>
            <lastupdated>8/5/2011 3:21:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetPhaseDataArray(System.Boolean)">
            <summary>
            Returns an array that contains the phases of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the phase.
            </param>
            <returns>
            An array that contains the phases of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the phases of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            <note type="note">This method is not supported for <see cref="T:NationalInstruments.ComplexWaveform`1"/> objects of type <see cref="T:NationalInstruments.ComplexInt16"/>.</note>
            </remarks>
            <lastupdated>8/5/2011 3:20:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveform`1.GetPhaseDataWaveform(System.Boolean)">
            <summary>
            Returns an <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the phases
            of the complex waveform samples.
            </summary>
            <param name="applyScaling">
            Specifies whether to apply scaling to the raw data before obtaining the phases.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.AnalogWaveform`1"/> of type <see cref="T:System.Double"/> that contains the
            phases of the complex samples.
            </returns>
            <remarks>
            If <paramref name="applyScaling"/> is <see langword="true"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> is
            used to return the imaginary parts of the complex waveform samples. If <paramref name="applyScaling"/> is
            <see langword="false"/>, <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> is used.
            The returned waveform always has <see cref="P:NationalInstruments.WaveformScaleMode.None"/> as the <see cref="P:NationalInstruments.AnalogWaveform`1.ScaleMode"/> value.
            Other complex waveform properties, such as  <see cref="P:NationalInstruments.ComplexWaveform`1.ChannelName"/>, <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/>,
            and <see cref="P:NationalInstruments.ComplexWaveform`1.UnitDescription"/>, are copied to the returned analog waveform.
            <note type="note">This method is not supported for <see cref="T:NationalInstruments.ComplexWaveform`1"/> objects of type <see cref="T:NationalInstruments.ComplexInt16"/>.</note>
            </remarks>
            <lastupdated>8/5/2011 3:21:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.Samples">
            <summary>
            Gets the samples of the complex waveform.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1"/> containing the
            <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> objects.
            </value>
            <remarks>
            To access the number of samples in the complex waveform, use <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount"/> instead of <see cref="P:NationalInstruments.ComplexWaveformSampleCollection`1.Count"/>.
            Accessing the number of samples with <see cref="P:NationalInstruments.ComplexWaveformSampleCollection`1.Count"/>
            requires you to use the <see cref="P:NationalInstruments.ComplexWaveform`1.Samples"/> property, which results in decreased performance.
            </remarks>
            <lastupdated>7/22/2008 3:21:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.SampleCount">
            <summary>
            Gets the number of samples in <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </summary>
            <value>
            The number of samples in <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            </value>
            <lastupdated>7/22/2008 12:37:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.ScaleMode">
            <summary>
            Gets or sets the scale mode of the complex waveform.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> of the complex waveform. The default value is
            <see cref="P:NationalInstruments.ComplexWaveformScaleMode.None"/>.
            </value>
            <remarks>
            The <see cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/> represents the scale used to convert the raw data of
            the complex waveform to scaled data.
            The <see cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/> method of the complex waveform calls
            the <see cref="P:NationalInstruments.ComplexWaveform`1.ScaleMode"/> to retrieve the scaled data of the complex waveform.
            </remarks>
            <seealso cref="T:NationalInstruments.ComplexWaveformScaleMode"/>
            <seealso cref="M:NationalInstruments.ComplexWaveform`1.GetScaledData"/>
            <seealso cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/>
            <lastupdated>11/20/2007 3:10:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.DataType">
            <summary>
            Gets the data type of the complex waveform.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the complex waveform.
            </value>
            <lastupdated>11/21/2007 10:12:24 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.ChannelName">
            <summary>
            Gets or sets the name of the device channel from which the complex waveform is acquired.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the device channel from which the
            <see cref="T:NationalInstruments.ComplexWaveform`1"/> is acquired.
            The default value is an empty string.
            </value>
            <remarks>
            <see cref="P:NationalInstruments.ComplexWaveform`1.ChannelName"/> reads and writes to
            <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties"/> using the reserved key <format type="monospace">NI_ChannelName</format>.
            </remarks>
            <lastupdated>11/20/2007 3:09:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.UnitDescription">
            <summary>
            Gets or sets the unit of measurement, such as volts, of the complex waveform.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the unit of measurement of the <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            The default value is an empty string.
            </value>
            <remarks>
            <see cref="P:NationalInstruments.ComplexWaveform`1.UnitDescription"/> reads and writes to
            <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties"/> using the reserved key <format type="monospace">NI_UnitDescription</format>.
            </remarks>
            <lastupdated>11/20/2007 3:10:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming">
            <summary>
            Gets or sets the timing information of the complex waveform.
            </summary>
            <value>
            The timing information of the complex waveform. The default value is
            <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
                The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is
            <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> and the number of time stamps in
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> is not equal to
            <see cref="P:NationalInstruments.ComplexWaveformSampleCollection`1.Count"/>.
            </para>
                <para>-or-</para>
                <para>The time stamp values are greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
            </exception>
            <remarks>
            Use the <see cref="M:NationalInstruments.PrecisionWaveformTiming.ToWaveformTiming"/> method on the
            <see cref="P:NationalInstruments.ComplexWaveform`1.PrecisionTiming"/> property to get timing information with lower precision than <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>.
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>11/20/2007 3:09:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties">
            <summary>
            Gets the extended properties for the complex waveform.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/> that contains the extended
            properties of the complex waveform.
            </value>
            <remarks>
            <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties"/> stores key value pair information
            specific to the complex waveform. For example, drivers, such as the NI-DAQmx driver, populate <see cref="P:NationalInstruments.ComplexWaveform`1.ExtendedProperties"/>
            with information specific to the data acquisition type. For more information, refer to your specific driver documentation.
            </remarks>
            <lastupdated>11/21/2007 10:12:18 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveform`1.Capacity">
            <summary>
            Gets or sets the total capacity available for <see cref="T:NationalInstruments.ComplexWaveform`1"/> data.
            </summary>
            <value>
            The total capacity available for <see cref="T:NationalInstruments.ComplexWaveform`1"/> data.
            </value>
            <remarks>
                <para>
            The capacity of a <see cref="T:NationalInstruments.ComplexWaveform`1"/> is represented as the number of samples
            of data that can be stored in the waveform with the current amount of memory allocated for the data.
            Changing the capacity of the <see cref="T:NationalInstruments.ComplexWaveform`1"/>
            reallocates the memory used to store the <see cref="T:NationalInstruments.ComplexWaveform`1"/>
            data.
            Changing the capacity is slower for <see cref="T:NationalInstruments.ComplexWaveform`1"/>
            with a larger number of samples.
            </para>
                <para>
            Setting the capacity to the required number of samples before calling <see cref="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})"/>
             improves the performance of <see cref="M:NationalInstruments.ComplexWaveform`1.Append(NationalInstruments.ComplexWaveform{`0})"/>, especially when appending to
            waveforms with a large number of samples.  Setting the capacity to the required amount also improves the performance of
            memory-optimized reads performed by hardware .NET APIs.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than <see cref="P:NationalInstruments.ComplexWaveform`1.SampleCount"/>.
            </exception>
            <lastupdated>6/11/2012 11:46:20 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ComplexWaveformCollection`1">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.ComplexWaveform`1"/> objects.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveforms. <typeparamref name="TData"/> supports the <see cref="T:NationalInstruments.ComplexDouble"/>,
            <see cref="T:NationalInstruments.ComplexInt16"/>, and <see cref="T:NationalInstruments.ComplexSingle"/> data types.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>8/5/2011 3:22:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </summary>
            <remarks>
            Upon construction, <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>
            is set to an empty collection of <see cref="T:NationalInstruments.ComplexWaveform`1"/> objects.
            </remarks>
            <lastupdated>12/7/2007 10:57:46 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:02:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
            <see cref="M:NationalInstruments.ComplexWaveformCollection`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the non-static fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>12/7/2007 10:57:41 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#ICloneable#Clone">
            <exclude/>
            <lastupdated>1/23/2009 4:02:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.CopyTo(NationalInstruments.ComplexWaveform{`0}[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="arrayIndex">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>-or-</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="arrayIndex"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>12/7/2007 10:57:58 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:02:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>12/7/2007 10:58:06 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#ComplexWaveform{TData}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>  that can be used to iterate through the collection.
            </returns>
            <lastupdated>11/30/2011 10:49:26 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Remove(NationalInstruments.ComplexWaveform{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <returns>The return value is not documented because the method is not supported.</returns>
            <remarks>
            <see cref="T:NationalInstruments.ComplexWaveformCollection`1" crefType="Unqualified"/>
            is read only and does not support removing items from the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>11/30/2011 10:49:41 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Contains(NationalInstruments.ComplexWaveform{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            <see langword="true"/> if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>11/30/2011 10:49:17 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Clear">
            <summary>
            This method is not supported.
            </summary>
            <remarks>
            <see cref="T:NationalInstruments.ComplexWaveformCollection`1" crefType="Unqualified"/>
            is read only and does not support clearing the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>11/30/2011 10:49:08 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#Add(NationalInstruments.ComplexWaveform{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <remarks>
            <see cref="T:NationalInstruments.ComplexWaveformCollection`1" crefType="Unqualified"/>
            is read only and does not support adding new items to the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>11/30/2011 10:48:54 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformCollection`1.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 4:02:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.Channels">
            <summary>
            Gets the number of channels in <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </summary>
            <value>
            The number of channels in <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </value>
            <lastupdated>12/7/2007 10:54:09 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.Count">
            <summary>
            Gets the number of complex waveforms in <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </summary>
            <value>
            The number of complex waveforms in <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </value>
            <lastupdated>12/7/2007 10:54:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.Records">
            <summary>
            Gets the number of records in <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </summary>
            <value>
            The number of records in <see cref="T:NationalInstruments.ComplexWaveformCollection`1"/>.
            </value>
            <lastupdated>12/7/2007 10:54:49 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.ComplexWaveform`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:NationalInstruments.ComplexWaveform`1"/> to locate in the collection.
            </param>
            <value>
            The <see cref="T:NationalInstruments.ComplexWaveform`1"/> at the specified index.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="index"/> is greater than or equal to <see cref="P:NationalInstruments.ComplexWaveformCollection`1.Count"/>.</para>
            </exception>
            <lastupdated>12/11/2007 1:21:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.ComplexWaveform`1"/> at the specified indexes.
            </summary>
            <param name="recordIndex">
            The zero-based record index of the <see cref="T:NationalInstruments.ComplexWaveform`1"/> to locate in the collection.
            </param>
            <param name="channelIndex">
            The zero-based channel index of the <see cref="T:NationalInstruments.ComplexWaveform`1"/> to locate in the collection.
            </param>
            <value>
            The <see cref="T:NationalInstruments.ComplexWaveform`1"/> at the specified indexes.
            </value>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="recordIndex"/> or <paramref name="channelIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="recordIndex"/> or <paramref name="channelIndex"/> is greater than or equal to <see cref="P:NationalInstruments.ComplexWaveformCollection`1.Count"/>.</para>
            </exception>
            <lastupdated>12/11/2007 1:21:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.IsSynchronized">
            <exclude/>
            <lastupdated>12/7/2007 10:54:18 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.SyncRoot">
            <exclude/>
            <lastupdated>12/7/2007 10:54:53 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveform{TData}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/>  is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>.
            </value>
            <lastupdated>11/30/2011 10:48:40 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.ComplexWaveformSample`1">
            <summary>
            Represents a sample of a complex waveform.
            </summary>
            <typeparam name="TData">
            The type of the sample.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
            A <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> represents a sample of a complex waveform. Use
            the <see cref="P:NationalInstruments.ComplexWaveformSample`1.Value"/> property to get the value contained
            in <see cref="T:NationalInstruments.ComplexWaveformSample`1"/>.
            Use the <see cref="P:NationalInstruments.ComplexWaveformSample`1.HasTimeStamp"/> property to determine if the sample has a time stamp.
            If <see cref="P:NationalInstruments.ComplexWaveformSample`1.HasTimeStamp"/> is <see langword="true"/>,
            <see cref="P:NationalInstruments.ComplexWaveformSample`1.PrecisionTimeStamp"/> returns the time stamp of the sample.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>12/11/2007 12:56:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSample`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>11/21/2007 9:41:41 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSample`1.Owner">
            <summary>
            Gets the <see cref="T:NationalInstruments.ComplexWaveform`1"/> that the sample came from.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.ComplexWaveform`1"/> of the
            <see cref="T:NationalInstruments.ComplexWaveformSample`1"/>.
            </value>
            <lastupdated>11/21/2007 9:41:13 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSample`1.Value">
            <summary>
            Gets or sets the value of the <see cref="T:NationalInstruments.ComplexWaveformSample`1"/>.
            </summary>
            <value>
            The value of the <see cref="T:NationalInstruments.ComplexWaveformSample`1"/>. The default value is 0 + 0i.
            </value>
            <lastupdated>11/21/2007 9:41:31 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSample`1.HasTimeStamp">
            <summary>
            Gets a value indicating if the complex sample has a time stamp.
            </summary>
            <value>
                <see langword="true"/> if the complex sample has a <see cref="P:NationalInstruments.ComplexWaveformSample`1.PrecisionTimeStamp"/>.
            </value>
            <lastupdated>11/21/2007 9:41:05 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSample`1.PrecisionTimeStamp">
            <summary>
            Gets the time at which the data was sampled.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the time at which the data was sampled.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.ComplexWaveformSample`1.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <seealso cref="P:NationalInstruments.ComplexWaveformSample`1.HasTimeStamp"/>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="T:NationalInstruments.PrecisionDateTime"/>
            <lastupdated>11/21/2007 9:41:21 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSample`1.Index">
            <summary>
            Gets the index of the sample in the <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1" crefType="Unqualified"/>.
            </summary>
            <value>
            The index of the sample in the <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1" crefType="Unqualified"/>.
            </value>
            <lastupdated>10/19/2009 4:34:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ComplexWaveformSampleCollection`1">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> objects.
            </summary>
            <typeparam name="TData">
            The type of the sample collection.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>11/21/2007 9:41:50 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.#ctor(NationalInstruments.ComplexWaveform{`0})">
            <exclude/>
            <lastupdated>25/10/2007 8:22:24 PM</lastupdated>
            <updatedby>Mahesh</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.CopyTo(NationalInstruments.ComplexWaveformSample{`0}[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>-or-</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="index"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>11/21/2007 9:42:25 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>11/20/2007 5:27:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:12:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#CopyTo(NationalInstruments.ComplexWaveformSample{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>.
            The array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <lastupdated>9/28/2009 4:17:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.IndexOf(NationalInstruments.ComplexWaveformSample{`0})">
            <summary>
            Searches for the <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> and returns the zero-based index of the first
            occurrence.
            </summary>
            <param name="sample">
            The <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> to locate.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="sample"/>.
            </returns>
            <lastupdated>11/21/2007 9:42:48 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Contains(NationalInstruments.ComplexWaveformSample{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
                <see langword="true"/> if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>9/28/2009 4:15:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Remove(NationalInstruments.ComplexWaveformSample{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <returns>The return value is not documented because the method is not supported.</returns>
            <remarks>
                <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1" crefType="Unqualified"/>
            is read only and does not support removing items from the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>9/18/2009 7:51:58 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Clear">
            <summary>
            This method is not supported.
            </summary>
            <remarks>
                <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1" crefType="Unqualified"/>
            is read only and does not support clearing the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>9/15/2009 1:08:28 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#Add(NationalInstruments.ComplexWaveformSample{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <remarks>
                <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1" crefType="Unqualified"/>
            is read only and does not support adding new items to the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            <lastupdated>9/18/2009 7:52:07 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>10/19/2009 4:34:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>9/19/2009 4:21:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#ComplexWaveformSample{TData}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>  that can be used to iterate through the collection.
            </returns>
            <lastupdated>9/28/2009 4:18:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> at the specified index.
            </summary>
            <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
            <value>
            The <see cref="T:NationalInstruments.ComplexWaveformSample`1"/> at the specified index.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is greater than or equal to count.</para>
            </exception>
            <lastupdated>11/21/2007 9:42:15 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.Count">
            <summary>
            Gets the number of samples in <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1"/>.
            </summary>
            <value>
            The number of samples in <see cref="T:NationalInstruments.ComplexWaveformSampleCollection`1"/>.
            </value>
            <lastupdated>11/21/2007 9:42:00 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/26/2009 12:09:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/26/2009 12:09:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformSampleCollection`1.System#Collections#Generic#ICollection{NationalInstruments#ComplexWaveformSample{TData}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/>  is read-only.
            </summary>
            <value>
                <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>.
            </value>
            <lastupdated>9/28/2009 4:17:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.ComplexWaveformScaleMode">
            <summary>
            Represents a class used to scale complex waveform data.
            </summary>
            <remarks>
            <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> scales waveform data. Use
            <see cref="M:NationalInstruments.ComplexWaveformScaleMode.CreateLinearMode(System.Double,System.Double)"/> to create a linear scale.
            <see cref="P:NationalInstruments.ComplexWaveformScaleMode.None"/> represents a scale mode that does
            not scale the data.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>11/21/2007 9:54:42 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformScaleMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> class.
            </summary>
            <lastupdated>11/21/2007 9:55:26 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0})">
            <summary>
            Returns the scaled complex waveform data.
            </summary>
            <param name="waveform">
            The waveform to get the scaled data from.
            </param>
            <typeparam name="TData">
            The underlying type of <paramref name="waveform"/>. <typeparamref name="TData"/> supports the <see cref="T:NationalInstruments.ComplexDouble"/>,
            <see cref="T:NationalInstruments.ComplexInt16"/>, and <see cref="T:NationalInstruments.ComplexSingle"/> data types.
            </typeparam>
            <returns>
            The scaled data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <see cref="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0})"/> calls
            <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> to get the data to scale, and then calls
            <see cref="M:NationalInstruments.ComplexWaveformScaleMode.TransformData(NationalInstruments.ComplexDouble[])"/> to perform the transformation.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>8/5/2011 3:22:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0},System.Int32,System.Int32)">
            <summary>
            Returns the scaled complex waveform data using the specified sample index and count.
            </summary>
            <typeparam name="TData">
            The underlying type of <paramref name="waveform"/>. <typeparamref name="TData"/> supports the <see cref="T:NationalInstruments.ComplexDouble"/>,
            <see cref="T:NationalInstruments.ComplexInt16"/>, and <see cref="T:NationalInstruments.ComplexSingle"/> data types.
            </typeparam>
            <param name="waveform">
            The waveform to get the scaled data from.
            </param>
            <param name="sampleIndex">
            The start index.
            </param>
            <param name="count">
            The amount of scaled data to return.
            </param>
            <returns>
            The scaled data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            <see cref="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0})"/> calls
            <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> to get the data to scale, and then calls
            <see cref="M:NationalInstruments.ComplexWaveformScaleMode.TransformData(NationalInstruments.ComplexDouble[])"/> to perform the transformation.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>8/5/2011 3:24:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0},System.Int32,System.Int32,NationalInstruments.ComplexDouble[],System.Int32)">
            <summary>
            Returns the scaled complex waveform data using the specified sample index, count, and array index.
            </summary>
            <typeparam name="TData">
            The underlying type of <paramref name="waveform"/>. <typeparamref name="TData"/> supports the <see cref="T:NationalInstruments.ComplexDouble"/>,
            <see cref="T:NationalInstruments.ComplexInt16"/>, and <see cref="T:NationalInstruments.ComplexSingle"/> data types.
            </typeparam>
            <param name="waveform">
            The waveform to get the scaled data from.
            </param>
            <param name="sampleIndex">
            The start sample.
            </param>
            <param name="count">
            The amount of scaled data to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the scaled data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>- or -</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            <see cref="M:NationalInstruments.ComplexWaveformScaleMode.GetScaledData``1(NationalInstruments.ComplexWaveform{``0})"/> calls
            <see cref="M:NationalInstruments.ComplexWaveform`1.GetRawData"/> to get the data to scale, and then calls
            <see cref="M:NationalInstruments.ComplexWaveformScaleMode.TransformData(NationalInstruments.ComplexDouble[])"/> to perform the transformation.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>8/5/2011 3:25:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformScaleMode.TransformData(NationalInstruments.ComplexDouble[])">
            <summary>
            Returns the transformed data.
            </summary>
            <param name="data">
            The raw, untransformed data.
            </param>
            <returns>
            The transformed data.
            </returns>
            <lastupdated>11/21/2007 10:12:08 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComplexWaveformScaleMode.CreateLinearMode(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> that scales the complex data linearly.
            </summary>
            <param name="gain">
            The gain of the linear scale.
            </param>
            <param name="offset">
            The offset of the linear scale.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> that scales data linearly.
            </returns>
            <remarks>
            The scaled values are calculated by multiplying both the real and imaginary parts of each waveform sample with
            the <paramref name="gain"/> and then adding the <paramref name="offset"/> to both the real and imaginary parts.
            </remarks>
            <lastupdated>11/21/2007 9:55:32 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComplexWaveformScaleMode.None">
            <summary>
            Gets a <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> that does not scale data.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.ComplexWaveformScaleMode"/> that does not scale data.
            </value>
            <lastupdated>11/21/2007 9:55:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ComponentBase">
            <summary>
            Provides a base implementation of the <see cref="T:System.ComponentModel.IComponent"/> interface for
            Measurement Studio components.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The <see cref="T:NationalInstruments.ComponentBase"/> class is the base class for all Measurement Studio
            components that marshal by reference.  This class extends the
            <see cref="T:System.ComponentModel.Component"/> class to add functionality such as providing a
            way to customize how calls to event handlers are marshaled and to track the disposed state of the
            component.
            </remarks>
            <seealso cref="T:System.ComponentModel.Component"/>
            <seealso cref="T:System.ComponentModel.IComponent"/>
            <seealso cref="T:NationalInstruments.ISynchronizeCallbacks"/>
            <lastupdated>3/5/2003 1:00:26 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ISynchronizeCallbacks">
            <summary>
            Specifies that an object can use an <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> implementation
            to customize how events and callback delegates are invoked.
            </summary>
            <remarks>
                <para>
            Objects that implement <see cref="T:NationalInstruments.ISynchronizeCallbacks"/> use the value of the
            <see cref="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject"/> property to determine how events
            and callback delegates are invoked.  If the value of the
            <see cref="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject"/> property is <see langword="null"/>,
            events and callbacks are directly invoked.  If the value of the
            <see cref="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject"/> property is not <see langword="null"/>,
            events and callbacks are invoked through the <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])"/> method
            of the specified <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> implementation.  For example, if an
            object that implements <see cref="T:NationalInstruments.ISynchronizeCallbacks"/> raises events in a separate
            thread and you want to handle the events in your user interface thread, you set the
            <see cref="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject"/> property to an instance of a
            Windows Forms form.
            </para>
                <note type="note">
                    <see cref="T:NationalInstruments.ISynchronizeCallbacks"/> has been superseded by
            ISupportSynchronizationContext in .NET Framework 2.0. For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </note>
            </remarks>
            <lastupdated>3/16/2006 4:23:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ISynchronizeCallbacks.SynchronizingObject">
            <summary>
            Gets or sets the object that marshals event-handler and callback calls.
            </summary>
            <value>
            The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object that marshals
            event-handler and callback calls.  The default value is <see langword="null"/>.
            </value>
            <remarks>
            When the value of this property is <see langword="null"/>, event-handler and callback calls are
            raised in the default manner. As a result, calls might occur in a thread other than the main
            thread.  Avoid this behavior by setting this property to an object that implements the
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> interface, such as a Windows Forms form.
            <note type="note">
            For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </note>
            </remarks>
            <lastupdated>3/16/2006 4:28:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.ComponentBase"/> class.
            </summary>
            <lastupdated>2/21/2003 9:57:14 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.OnSynchronizingObjectChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.ComponentBase.SynchronizingObjectChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>9/6/2005 12:25:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 4:12:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the component or by its container.
            </summary>
            <param name="service">
            A service provided by the component.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the component.  This value is
            <see langword="null"/> if the component does not provide the specified service.
            </returns>
            <lastupdated>3/28/2003 2:42:57 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:NationalInstruments.ComponentBase"/>.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, this method releases managed and unmanaged resources. If
            <see langword="false"/>, this method releases
            only unmanaged resources.
            </param>
            <remarks>
                <para>
            The public <see cref="M:System.IDisposable.Dispose"/> method and the finalizer call this method.
            The public <see cref="M:System.IDisposable.Dispose"/> invokes the protected Dispose(Boolean) method
            with <paramref name="disposing"/> set to <see langword="true"/>. The finalizer invokes the protected
            Dispose(Boolean) method with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
                <para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases
            all resources held by managed objects that this <see cref="T:NationalInstruments.ComponentBase"/> references. This method invokes the <see cref="M:System.IDisposable.Dispose"/> method of each referenced
            object.
            </para>
            </remarks>
            <lastupdated>2/21/2003 9:57:20 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseExceptionIfDisposed">
            <summary>
            This member is obsolete. Use the <see cref="M:NationalInstruments.ComponentBase.ThrowExceptionIfDisposed"/>
            method to achieve the same functionality.
            </summary>
            <lastupdated>9/6/2005 12:25:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the component has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The component has been disposed.
            </exception>
            <lastupdated>9/6/2005 12:25:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.AddEventHandler(System.Object,System.Delegate)">
            <summary>
            Adds an event handler for the specified event key.
            </summary>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/>
            event handler list.
            </param>
            <param name="handler">
            The delegate to the method that handles the event.
            </param>
            <remarks>
            To add event handlers, use <see cref="M:NationalInstruments.ComponentBase.AddEventHandler(System.Object,System.Delegate)"/>
            instead of the <see cref="P:System.ComponentModel.Component.Events"/> property.
            In .NET Framework 2.0, <see cref="M:NationalInstruments.ComponentBase.AddEventHandler(System.Object,System.Delegate)"/>
            associates a SynchronizationContext with the event handler and
            uses the SynchronizationContext to invoke the event handler
            if SynchronizeCallbacks is <see langword="true"/>.
            <note type="note">
            For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/16/2006 4:31:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RemoveEventHandler(System.Object,System.Delegate)">
            <summary>
            Removes an event handler for the specified event key.
            </summary>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/>
            event handler list.
            </param>
            <param name="handler">
            The delegate to the method that handles the event.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/2/2006 2:14:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseEvent(System.Object,System.EventArgs)">
            <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/> event handler list.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/2/2006 1:42:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseEventDirect(System.Object,System.EventArgs)">
            <summary>
            Raises the event specified by an event key with the specified event arguments without
            cross-thread synchronization.
            </summary>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/> event handler list.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <lastupdated>3/2/2006 1:43:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseEventAsync(System.Object,System.EventArgs)">
            <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/>
            event handler list.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <lastupdated>3/2/2006 1:42:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventDirect``1(System.Object,``0)">
            <summary>
            Raises the event specified by an event key with the specified event arguments without
            cross-thread synchronization.
            </summary>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs"/>-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
            <param name="eventKey">
            The key of the event in the event handler list.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <lastupdated>6/2/2006 11:25:58 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.Object,``0)">
            <summary>
            Raises the event specified by an event key with the specified event arguments.
            </summary>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs"/>-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/>
            event handler list.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <remarks>
            Use <see cref="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.Object,``0)"/>
            to raise events whose types are
            <see cref="T:System.EventHandler`1"/>.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>6/2/2006 11:24:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
            <summary>
            Raises the event through a synchronization context with the specified event arguments.
            </summary>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs"/>-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
            <param name="operation">
            An <see cref="T:System.ComponentModel.AsyncOperation"/> that provides the
            <see cref="T:System.Threading.SynchronizationContext"/> that is used to invoke
            the event.
            </param>
            <param name="callback">
            A delegate to the method that raises the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <lastupdated>6/2/2006 11:23:15 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.Object,``0)">
            <summary>
            Asynchronously raises the event specified by an event key with the specified event arguments.
            </summary>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs"/>-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
            <param name="eventKey">
            The key of the event in the <see cref="P:System.ComponentModel.Component.Events"/>
            event handler list.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <remarks>
            Use <see cref="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.Object,``0)"/>
            to raise events whose types are
            <see cref="T:System.EventHandler`1"/>.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>6/2/2006 11:25:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.ComponentModel.AsyncOperation,NationalInstruments.EventSynchronizationCallback{``0},``0)">
            <summary>
            Asynchronously raises the event through a synchronization context with the specified event
            arguments.
            </summary>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs"/>-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
            <param name="operation">
            An <see cref="T:System.ComponentModel.AsyncOperation"/> that provides the
            <see cref="T:System.Threading.SynchronizationContext"/> that is used to invoke
            the event.
            </param>
            <param name="callback">
            A delegate to the method that raises the event.
            </param>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <lastupdated>6/2/2006 11:24:58 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComponentBase.IsDisposed">
            <summary>
            Gets a value indicating if the component has been disposed.
            </summary>
            <value>
                <see langword="true"/> if the component has been disposed.
            </value>
            <lastupdated>7/26/2004 9:37:16 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComponentBase.SynchronizeCallbacks">
            <summary>
            Gets or sets how events and callback delegates are invoked.
            </summary>
            <value>
                <see langword="true"/> if events and callbacks are invoked through the
            <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> methods; otherwise, events
            and callbacks are invoked directly.  The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            In some cases, callbacks and event handlers are executed in a different thread than the rest of the program.
            Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls,
            from these callbacks and event handlers. For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </remarks>
            <lastupdated>3/20/2006 5:32:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComponentBase.SynchronizingObject">
            <summary>
            Gets or sets the object that marshals event-handler and callback calls.
            </summary>
            <value>
            The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object that marshals
            event-handler and callback calls.  The default value is <see langword="null"/>.
            </value>
            <remarks>
                <para>
            When the value of this property is <see langword="null"/>, event-handler and callback calls are
            raised in the default manner. As a result, calls might occur in a thread other than the main
            thread.  Avoid this behavior by setting this property to an object that implements the
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> interface, such as a Windows Forms form.
            </para>
                <note type="note">
                    <see cref="P:NationalInstruments.ComponentBase.SynchronizingObject"/> has been superseded by
            SynchronizeCallbacks in .NET Framework 2.0. For more information, refer to <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/16/2006 4:51:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ComponentBase.Tag">
            <summary>
            Gets or sets the object that contains data about the component.
            </summary>
            <value>
            An <see cref="T:System.Object"/> that contains data about the <see cref="T:NationalInstruments.ComponentBase"/>.
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            You can assign any type derived from <see cref="T:System.Object"/> to this property.
            If <see cref="P:NationalInstruments.ComponentBase.Tag"/> is set through the Windows Forms
            Designer, you can assign only text.
            <para>
            A common use for <see cref="P:NationalInstruments.ComponentBase.Tag"/> is to store information
            that is closely associated with the <see cref="T:NationalInstruments.ComponentBase"/>. For
            example, you can use <see cref="P:NationalInstruments.ComponentBase.Tag"/> to store the name
            of the <see cref="T:NationalInstruments.ComponentBase"/> so that the information can be accessed
            quickly.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/28/2003 2:42:38 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.ComponentBase.SynchronizingObjectChanged">
            <summary>
            Occurs when <see cref="P:NationalInstruments.ComponentBase.SynchronizingObject"/> has changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>9/6/2005 12:25:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DataConverter">
            <summary>
            Converts data from one data type to another data type.
            </summary>
            <threadsafety safety="safe"/>
            <remarks>
                <para>
                    The <see cref="T:NationalInstruments.DataConverter"/> class is similar to the <see cref="T:System.Convert"/> class and
            supports converting the value of an object of one data type to another data type that has an equivalent value.
            In addition to the functionality that <see cref="T:System.Convert"/> provides, the <see cref="T:NationalInstruments.DataConverter"/> class
            supports the following functionality:
            </para>
                <list type="bullet">
                    <item>
                        <description>
            Convert scalar values to one-dimensional arrays.
            </description>
                    </item>
                    <item>
                        <description>
            Convert scalar values to two-dimensional arrays.
            </description>
                    </item>
                    <item>
                        <description>
            Convert one-dimensional arrays to one-dimensional arrays of another data type.
            </description>
                    </item>
                    <item>
                        <description>
            Convert one-dimensional arrays to two-dimensional arrays.
            </description>
                    </item>
                    <item>
                        <description>
            Convert two-dimensional arrays to two-dimensional arrays of another data type.
            </description>
                    </item>
                    <item>
                        <description>
            Verify if a data conversion is possible without attempting the data conversion and handling <see cref="T:System.InvalidCastException"/>.
                        </description>
                    </item>
                </list>
                <para>
            The <see cref="T:NationalInstruments.DataConverter"/> class supports the following types:
            </para>
                <list type="bullet">
                    <item><description><see cref="T:System.Boolean"/></description></item>
                    <item><description><see cref="T:System.Byte"/></description></item>
                    <item><description><see cref="T:System.Char"/></description></item>
                    <item><description><see cref="T:System.Drawing.Color"/></description></item>
                    <item><description><see cref="T:System.DateTime"/></description></item>
                    <item><description><see cref="T:System.Decimal"/></description></item>
                    <item><description><see cref="T:System.Double"/></description></item>
                    <item><description><see cref="T:System.Int16"/></description></item>
                    <item><description><see cref="T:System.Int32"/></description></item>
                    <item><description><see cref="T:System.Int64"/></description></item>
                    <item><description><see cref="T:System.SByte"/></description></item>
                    <item><description><see cref="T:System.Single"/></description></item>
                    <item><description><see cref="T:System.String"/></description></item>
                    <item><description><see cref="T:System.UInt16"/></description></item>
                    <item><description><see cref="T:System.UInt32"/></description></item>
                    <item><description><see cref="T:System.UInt64"/></description></item>
                </list>
                <note type="note">
            Some conversions cause precision loss. One effect of precision loss is that if you convert from one type to another and then back to the original type,
             the final value might not be the same as the original value.
            </note>
            </remarks>
            <example>
            The following sample demonstrates a method that uses the <see cref="T:NationalInstruments.DataConverter"/> to convert an array of integers to an array of
            doubles.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal values As Integer()) As Double()
                Dim convertedValues As Double() = Nothing
                If DataConverter.CanConvert(values, GetType(Double())) Then
                    convertedValues = CType(DataConverter.Convert(values, GetType(Double())), Double())
                End If
                Return convertedValues
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double[] ConvertData(int[] values)
            {
                double[] convertedValues = null;
                if (DataConverter.CanConvert(values, typeof(double[])))
                    convertedValues = (double[])DataConverter.Convert(values, typeof(double[]));
                return convertedValues;
            }
            </code>
            </example>
            <seealso cref="T:System.Convert"/>
            <lastupdated>9/6/2005 1:49:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)">
            <summary>
            Returns if an object can be converted to a specified type.
            </summary>
            <param name="source">
            The object to check in order to verify if a conversion is possible.
            </param>
            <param name="targetType">
            The data type to check in order to verify if <paramref name="source"/> can be converted to it.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="source"/> can be converted to the type specified by <paramref name="targetType"/>.
            </returns>
            <example>
            The following example demonstrates a method that uses the <see cref="T:NationalInstruments.DataConverter"/> to convert an array of integers to an array of
            doubles.  <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before actually performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal values As Integer()) As Double()
                Dim convertedValues As Double() = Nothing
                If DataConverter.CanConvert(values, GetType(Double())) Then
                    convertedValues = CType(DataConverter.Convert(values, GetType(Double())), Double())
                End If
                Return convertedValues
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double[] ConvertData(int[] values)
            {
                double[] convertedValues = null;
                if (DataConverter.CanConvert(values, typeof(double[])))
                    convertedValues = (double[])DataConverter.Convert(values, typeof(double[]));
                return convertedValues;
            }
            </code>
            </example>
            <lastupdated>3/2/2006 2:23:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.CanConvert``1(System.Object)">
            <summary>
            Returns if an object can be converted to the generic type TData.
            </summary>
            <typeparam name="TData">
            The type to check in order to verify if <paramref name="source"/> can be converted to it.
            </typeparam>
            <param name="source">
            The object to check in order to verify if a conversion is possible.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="source"/> can be converted to the generic type TData.
            </returns>
            <example>
            The following example demonstrates a method that uses the <see cref="T:NationalInstruments.DataConverter"/> to convert an array of integers to an array of
            doubles.  <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before actually performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal values As Integer()) As Double()
                Dim convertedValues As Double() = Nothing
                If DataConverter.CanConvert(Of Double())(values) Then
                    convertedValues = DataConverter.Convert(Of Double())(values)
                End If
                Return convertedValues
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double[] ConvertData(int[] values)
            {
                double[] convertedValues = null;
                if (DataConverter.CanConvert&lt;double[]&gt;(values))
                    convertedValues = DataConverter.Convert&lt;double[]&gt;(values);
                return convertedValues;
            }
            </code>
            </example>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <lastupdated>6/2/2006 11:27:26 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.Convert(System.Object,System.Type)">
            <summary>
            Returns an object of a specified type that has a value that is equivalent to a specified object.
            </summary>
            <param name="source">
            The object to convert the value of.
            </param>
            <param name="targetType">
            The type to convert the value of <paramref name="source"/> to.
            </param>
            <returns>
            An object that is of the type specified by <paramref name="targetType"/> and has a value that is equivalent to the value of <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="targetType"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            Converting <paramref name="source"/> to <paramref name="targetType"/> cannot produce a meaningful result.
            </exception>
            <example>
            The following example demonstrates a method that uses the <see cref="T:NationalInstruments.DataConverter"/> to convert an array of integers to an array of
            doubles.  <see cref="M:NationalInstruments.DataConverter.Convert(System.Object,System.Type)"/>
            is used to perform the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal values As Integer()) As Double()
                Dim convertedValues As Double() = Nothing
                If DataConverter.CanConvert(values, GetType(Double())) Then
                    convertedValues = CType(DataConverter.Convert(values, GetType(Double())), Double())
                End If
                Return convertedValues
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double[] ConvertData(int[] values)
            {
                double[] convertedValues = null;
                if (DataConverter.CanConvert(values, typeof(double[])))
                    convertedValues = (double[])DataConverter.Convert(values, typeof(double[]));
                return convertedValues;
            }
            </code>
            </example>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>9/15/2009 9:12:34 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.Convert``1(System.Object)">
            <summary>
            Returns an object of the generic type, <format type="italics">TData</format>, with a value that is equivalent to a specified object.
            </summary>
            <typeparam name="TData">
            The type to convert the value of <paramref name="source"/> to.
            </typeparam>
            <param name="source">
            The object to convert the value of.
            </param>
            <returns>
            An object that is of the generic type, <format type="italics">TData</format>, and has a value that is equivalent to the value of <paramref name="source"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Converting <paramref name="source"/> to <typeparamref name="TData"/> cannot produce a meaningful result.
            </exception>
            <example>
            The following example demonstrates a method that uses <see cref="T:NationalInstruments.DataConverter"/> to convert an array of integers to an array of
            doubles.  <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal values As Integer()) As Double()
                Dim convertedValues As Double() = Nothing
                If DataConverter.CanConvert(Of Double())(values) Then
                    convertedValues = DataConverter.Convert(Of Double())(values)
                End If
                Return convertedValues
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double[] ConvertData(int[] values)
            {
                double[] convertedValues = null;
                if (DataConverter.CanConvert&lt;double[]&gt;(values))
                    convertedValues = DataConverter.Convert&lt;double[]&gt;(values);
                return convertedValues;
            }
            </code>
            </example>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>4/7/2011 10:17:41 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.Convert``1(System.DateTime)">
            <summary>
            Returns an object of the generic type, <format type="italics">TData</format>, with a value that is equivalent to a specified <see cref="T:System.DateTime" crefType="Unqualified"/>.
            </summary>
            <typeparam name="TData">
            The type to convert the value of <paramref name="sourceDateTime"/> to.
            </typeparam>
            <param name="sourceDateTime">
            The <see cref="T:System.DateTime" crefType="Unqualified"/> to convert the value of.
            </param>
            <returns>
            An object that is of the generic type, <format type="italics">TData</format>, and has a value that is equivalent to the value of <paramref name="sourceDateTime"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Converting <paramref name="sourceDateTime"/> to <typeparamref name="TData"/> cannot produce a meaningful result.
            </exception>
            <example>
            The following example demonstrates a method that uses the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime" crefType="Unqualified"/> value to double. <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal sourceDateTime As DateTime) As Double
                Dim convertedValue As Double = 0
                If DataConverter.CanConvert(Of Double)(sourceDateTime) Then
                    convertedValue = DataConverter.Convert(Of Double)(sourceDateTime)
                End If
                Return convertedValue
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double ConvertData(DateTime sourceDateTime)
            {
                double convertedValue = 0;
                if (DataConverter.CanConvert&lt;double&gt;(sourceDateTime))
                    convertedValue = DataConverter.Convert&lt;double&gt;(sourceDateTime);
                return convertedValue;
            }
            </code>
            </example>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <lastupdated>9/15/2009 9:12:37 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.Convert``1(NationalInstruments.PrecisionDateTime)">
            <summary>
            Returns an object of the generic type, <format type="italics">TData</format>, that has a value that is equivalent to a specified <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/>.
            </summary>
            <typeparam name="TData">
            The type to convert the value of <paramref name="sourcePrecisionDateTime"/> to.
            </typeparam>
            <param name="sourcePrecisionDateTime">
            The <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> to convert the value of.
            </param>
            <returns>
            An object that is of the generic type, <format type="italics">TData</format>, and has a value that is equivalent to the value of <paramref name="sourcePrecisionDateTime"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Converting <paramref name="sourcePrecisionDateTime"/> to <typeparamref name="TData"/> cannot produce a meaningful result.
            </exception>
            <example>
            The following example demonstrates a method that uses <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> value to double. <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal sourcePrecisionDateTime As PrecisionDateTime) As Double
                Dim convertedValue As Double = 0
                If DataConverter.CanConvert(Of Double)(sourcePrecisionDateTime) Then
                    convertedValue = DataConverter.Convert(Of Double)(sourcePrecisionDateTime)
                End If
                Return convertedValue
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double ConvertData(PrecisionDateTime sourcePrecisionDateTime)
            {
                double convertedValue = 0;
                if (DataConverter.CanConvert&lt;double&gt;(sourcePrecisionDateTime))
                    convertedValue = DataConverter.Convert&lt;double&gt;(sourcePrecisionDateTime);
                return convertedValue;
            }
            </code>
            </example>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>9/15/2009 9:12:45 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.Convert``1(System.TimeSpan)">
            <summary>
            Returns an object of the generic type, <format type="italics">TData</format>, that has a value that is equivalent to a specified <see cref="T:System.TimeSpan" crefType="Unqualified"/>.
            </summary>
            <typeparam name="TData">
            The type to convert the value of <paramref name="sourceTimeSpan"/> to.
            </typeparam>
            <param name="sourceTimeSpan">
            The <see cref="T:System.TimeSpan" crefType="Unqualified"/> to convert the value of.
            </param>
            <returns>
            An object that is of the generic type, <format type="italics">TData</format>, and has a value that is equivalent to the value of <paramref name="sourceTimeSpan"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Converting <paramref name="sourceTimeSpan"/> to <typeparamref name="TData"/> cannot produce a meaningful result.
            </exception>
            <example>
            The following example demonstrates a method that uses <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.TimeSpan" crefType="Unqualified"/> value to double. <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal sourceTimeSpan As TimeSpan) As Double
                Dim convertedValue As Double = 0
                If DataConverter.CanConvert(Of Double)(sourceTimeSpan) Then
                    convertedValue = DataConverter.Convert(Of Double)(sourceTimeSpan)
                End If
                Return convertedValue
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double ConvertData(TimeSpan sourceTimeSpan)
            {
                double convertedValue = 0;
                if (DataConverter.CanConvert&lt;double&gt;(sourceTimeSpan))
                    convertedValue = DataConverter.Convert&lt;double&gt;(sourceTimeSpan);
                return convertedValue;
            }
            </code>
            </example>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>9/15/2009 9:12:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DataConverter.Convert``1(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Returns an object of the generic type, <format type="italics">TData</format>, that has a value that is equivalent to a specified <see cref="T:NationalInstruments.PrecisionTimeSpan" crefType="Unqualified"/>.
            </summary>
            <typeparam name="TData">
            The type to convert the value of <paramref name="sourcePrecisionTimeSpan"/> to.
            </typeparam>
            <param name="sourcePrecisionTimeSpan">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan" crefType="Unqualified"/> to convert the value of.
            </param>
            <returns>
            An object that is of the generic type, <format type="italics">TData</format>, and has a value that is equivalent to the value of <paramref name="sourcePrecisionTimeSpan"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            Converting <paramref name="sourcePrecisionTimeSpan"/> to <typeparamref name="TData"/> cannot produce a meaningful result.
            </exception>
            <example>
            The following example demonstrates a method that uses <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:NationalInstruments.PrecisionTimeSpan" crefType="Unqualified"/> value to double. <see cref="M:NationalInstruments.DataConverter.CanConvert(System.Object,System.Type)"/>
            is used to verify if the conversion is possible before performing the conversion.
            <code lang="VB.NET">
            Private Function ConvertData(ByVal sourcePrecisionTimeSpan As PrecisionTimeSpan) As Double
                Dim convertedValue As Double = 0
                If DataConverter.CanConvert(Of Double)(sourcePrecisionTimeSpan) Then
                    convertedValue = DataConverter.Convert(Of Double)(sourcePrecisionTimeSpan)
                End If
                Return convertedValue
            End Function
            </code>
            </example>
            <example>
            <code lang="C#">
            private double ConvertData(PrecisionTimeSpan sourcePrecisionTimeSpan)
            {
                double convertedValue = 0;
                if (DataConverter.CanConvert&lt;double&gt;(sourcePrecisionTimeSpan))
                    convertedValue = DataConverter.Convert&lt;double&gt;(sourcePrecisionTimeSpan);
                return convertedValue;
            }
            </code>
            </example>
            <remarks>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </remarks>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>9/15/2009 9:12:49 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalState">
            <summary>
            Specifies the different digital states that a digital signal can represent.
            </summary>
            <lastupdated>9/19/2005 5:50:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.ForceDown">
            <summary>
            Force logic low. Drive to the low voltage level (VIL).
            </summary>
            <lastupdated>9/16/2005 11:30:31 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.ForceUp">
            <summary>
            Force logic high. Drive to the high voltage level (VIH).
            </summary>
            <lastupdated>9/16/2005 11:30:18 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.ForceOff">
            <summary>
            Force logic high impedance. Turn the driver off.
            </summary>
            <lastupdated>9/16/2005 11:30:24 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.CompareLow">
            <summary>
            Compare logic low (edge). Compare for a voltage level lower than
            the low voltage threshold (VOL).
            </summary>
            <lastupdated>9/16/2005 11:29:53 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.CompareHigh">
            <summary>
            Compare logic high (edge). Compare for a voltage level higher
            than the high voltage threshold (VOH).
            </summary>
            <lastupdated>9/16/2005 11:29:47 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.CompareUnknown">
            <summary>
            Compare logic unknown. Don't compare.
            </summary>
            <lastupdated>9/16/2005 11:30:08 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.CompareOff">
            <summary>
            Compare logic high impedance (edge). Compare for a voltage level
            between the low voltage threshold (VOL) and the high voltage threshold
            (VOH).
            </summary>
            <lastupdated>9/16/2005 11:30:03 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.DigitalState.CompareValid">
            <summary>
            Compare logic valid level (edge). Compare for a
            voltage level either lower than the low voltage threshold (VOL) or higher
            than the high voltage threshold (VOH).
            </summary>
            <lastupdated>9/16/2005 11:43:20 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalStateCollection">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.DigitalState"/> values.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.DigitalState"/> values.
            </remarks>
            <lastupdated>6/11/2012 12:49:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateCollection.CopyTo(NationalInstruments.DigitalState[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="array"/> is multidimensional.</para>
                <para>- or -</para>
                <para><paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>- or -</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="index"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>9/6/2005 2:07:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:12:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateCollection.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>9/6/2005 2:07:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalStateCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NationalInstruments.DigitalState"/> at the specified index.
            </summary>
            <param name="stateIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
            <value>The <see cref="T:NationalInstruments.DigitalState"/> at the specified index.</value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <paramref name="stateIndex"/> is an invalid <see cref="T:NationalInstruments.DigitalState"/> value.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="stateIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="stateIndex"/> is greater than or equal to <see cref="P:NationalInstruments.DigitalStateCollection.Count"/>.</para>
            </exception>
            <lastupdated>9/7/2005 2:05:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalStateCollection.Count">
            <summary>
            Gets the number of states in the <see cref="T:NationalInstruments.DigitalStateCollection"/>.
            </summary>
            <value>
            The number of states in the <see cref="T:NationalInstruments.DigitalStateCollection"/>.
            </value>
            <lastupdated>9/6/2005 1:53:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalStateCollection.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 4:12:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalStateCollection.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 4:12:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalStateUtility">
            <summary>
            Provides helper methods related to digital states.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <see cref="T:NationalInstruments.DigitalStateUtility"/> provides methods related to digital states. For example, you can use
            <see cref="M:NationalInstruments.DigitalStateUtility.ToChar(NationalInstruments.DigitalState)"/> to obtain the character representation of a
            <see cref="T:NationalInstruments.DigitalState"/>, or you can use <see cref="M:NationalInstruments.DigitalStateUtility.Test(NationalInstruments.DigitalState,NationalInstruments.DigitalState)"/> to test digital states.
            </remarks>
            <lastupdated>9/6/2005 2:20:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateUtility.Test(NationalInstruments.DigitalState,NationalInstruments.DigitalState)">
            <summary>
            Tests two digital states and returns whether the test failed.
            </summary>
            <param name="state1">The first <see cref="T:NationalInstruments.DigitalState"/> tested.</param>
            <param name="state2">The second <see cref="T:NationalInstruments.DigitalState"/> tested.</param>
            <returns>
                <see langword="true"/> if the test failed.
            </returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <para><paramref name="state1"/> is an invalid <see cref="T:NationalInstruments.DigitalState"/> value.</para>
                <para>-or-</para>
                <para><paramref name="state2"/> is an invalid <see cref="T:NationalInstruments.DigitalState"/> value.</para>
            </exception>
            <remarks>
                <para>The following table compares <paramref name="state1"/> and <paramref name="state2"/>.</para>
                <para><image src="truthtable.gif"/></para>
                <para>The following table lists the digital states and the corresponding characters.</para>
                <list type="table">
                    <listheader>
                        <term>Digital State</term>
                        <description>Character</description>
                    </listheader>
                    <item>
                        <term>ForceDown</term>
                        <description>0</description>
                    </item>
                    <item>
                        <term>ForceUp</term>
                        <description>1</description>
                    </item>
                    <item>
                        <term>ForceOff</term>
                        <description>Z</description>
                    </item>
                    <item>
                        <term>CompareLow</term>
                        <description>L</description>
                    </item>
                    <item>
                        <term>CompareHigh</term>
                        <description>H</description>
                    </item>
                    <item>
                        <term>CompareUnknown</term>
                        <description>X</description>
                    </item>
                    <item>
                        <term>CompareOff</term>
                        <description>T</description>
                    </item>
                    <item>
                        <term>CompareValid</term>
                        <description>V</description>
                    </item>
                </list>
            </remarks>
            <lastupdated>9/19/2005 6:27:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateUtility.ToChar(NationalInstruments.DigitalState)">
            <summary>
            Returns a character representing the <see cref="T:NationalInstruments.DigitalState"/>.
            </summary>
            <param name="state">The <see cref="T:NationalInstruments.DigitalState"/> value.</param>
            <returns>
            A <see cref="T:System.Char"/> representing the <see cref="T:NationalInstruments.DigitalState"/>.
            </returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <paramref name="state"/> is an invalid <see cref="T:NationalInstruments.DigitalState"/> value.
            </exception>
            <remarks>
            The following table lists the digital states and the corresponding characters.
                <list type="table">
                    <listheader>
                        <term>Digital State</term>
                        <description>Character</description>
                    </listheader>
                    <item>
                        <term>ForceDown</term>
                        <description>0</description>
                    </item>
                    <item>
                        <term>ForceUp</term>
                        <description>1</description>
                    </item>
                    <item>
                        <term>ForceOff</term>
                        <description>Z</description>
                    </item>
                    <item>
                        <term>CompareLow</term>
                        <description>L</description>
                    </item>
                    <item>
                        <term>CompareHigh</term>
                        <description>H</description>
                    </item>
                    <item>
                        <term>CompareUnknown</term>
                        <description>X</description>
                    </item>
                    <item>
                        <term>CompareOff</term>
                        <description>T</description>
                    </item>
                    <item>
                        <term>CompareValid</term>
                        <description>V</description>
                    </item>
                </list>
            </remarks>
            <lastupdated>9/19/2005 1:10:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateUtility.TryGetChar(NationalInstruments.DigitalState,System.Char@)">
            <summary>
            Gets a character representing the <see cref="T:NationalInstruments.DigitalState"/>.
            </summary>
            <param name="state">The <see cref="T:NationalInstruments.DigitalState"/> value.</param>
            <param name="charState">
            When this method returns,
            contains the character representing the specified <see cref="T:NationalInstruments.DigitalState"/>, if <paramref name="state"/> is valid,
            or a question mark character if <paramref name="state"/> is an invalid <see cref="T:NationalInstruments.DigitalState"/> value.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="state"/> is a valid <see cref="T:NationalInstruments.DigitalState"/>;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The following table lists the digital states and the corresponding characters.
                <list type="table">
                    <listheader>
                        <term>Digital State</term>
                        <description>Character</description>
                    </listheader>
                    <item>
                        <term>ForceDown</term>
                        <description>0</description>
                    </item>
                    <item>
                        <term>ForceUp</term>
                        <description>1</description>
                    </item>
                    <item>
                        <term>ForceOff</term>
                        <description>Z</description>
                    </item>
                    <item>
                        <term>CompareLow</term>
                        <description>L</description>
                    </item>
                    <item>
                        <term>CompareHigh</term>
                        <description>H</description>
                    </item>
                    <item>
                        <term>CompareUnknown</term>
                        <description>X</description>
                    </item>
                    <item>
                        <term>CompareOff</term>
                        <description>T</description>
                    </item>
                    <item>
                        <term>CompareValid</term>
                        <description>V</description>
                    </item>
                </list>
            </remarks>
            <lastupdated>2012-09-28 10:24:49 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DigitalStateUtility.TryGetState(System.Char,NationalInstruments.DigitalState@)">
            <summary>
            Gets the <see cref="T:NationalInstruments.DigitalState"/> represented by a character.
            </summary>
            <param name="input">The <see cref="T:NationalInstruments.DigitalState"/> value.</param>
            <param name="state">
            When this method returns,
            contains the <see cref="T:NationalInstruments.DigitalState"/> character represented by <paramref name="input"/>, if <paramref name="input"/> is a recognized character;
            or the default value of <see cref="T:NationalInstruments.DigitalState"/> if <paramref name="input"/> was not recognized.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="input"/> is a recognized <see cref="T:NationalInstruments.DigitalState"/> character;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The following table lists the digital states and the corresponding characters.
                <list type="table">
                    <listheader>
                        <term>Digital State</term>
                        <description>Character</description>
                    </listheader>
                    <item>
                        <term>ForceDown</term>
                        <description>0</description>
                    </item>
                    <item>
                        <term>ForceUp</term>
                        <description>1</description>
                    </item>
                    <item>
                        <term>ForceOff</term>
                        <description>Z</description>
                    </item>
                    <item>
                        <term>CompareLow</term>
                        <description>L</description>
                    </item>
                    <item>
                        <term>CompareHigh</term>
                        <description>H</description>
                    </item>
                    <item>
                        <term>CompareUnknown</term>
                        <description>X</description>
                    </item>
                    <item>
                        <term>CompareOff</term>
                        <description>T</description>
                    </item>
                    <item>
                        <term>CompareValid</term>
                        <description>V</description>
                    </item>
                </list>
            </remarks>
            <lastupdated>2012-09-28 10:24:49 AM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveform">
            <summary>
            Provides a data type that encapsulates digital data and timing information.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
                <para>
                    <see cref="T:NationalInstruments.DigitalWaveform"/> encapsulates a group of sampled digital signals.
            You view the digital waveform in terms of signals or samples. With one signal, you view one state from each sample in the digital waveform. A sample represents a set of digital states that are either acquired at that same time or are at the same sample index in the digital waveform. The digital states of a sample span across a signal. Use <see cref="P:NationalInstruments.DigitalWaveform.Signals"/> to access the signals in a digital waveform. Use <see cref="P:NationalInstruments.DigitalWaveform.Samples"/>
            to access the samples in a digital waveform.</para>
                <para>
            Each byte in the integer maps to a port in the channel, in the order in which you added the ports  to the channel. The least significant byte maps to the first port added to the channel, with all  unused bytes zeroed out. For example,
            if <see cref="P:NationalInstruments.DigitalWaveform.Signals"/> contains two <see cref="T:NationalInstruments.DigitalWaveformSignal"/> objects,
            in order to map the first <see cref="T:NationalInstruments.DigitalWaveformSignal"/> to the least  significant port, such as port0,
            you need to define the digital channel as "Dev1/port1:port0". Dev1  is the digital device name. For more information, refer to
            <format type="italics">Digital Data (Integer Format)</format> in the <format type="italics">NI-DAQmx Help</format>.</para>
                <para>
                    <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> specifies the timing
            information of the <see cref="T:NationalInstruments.DigitalWaveform"/>. When you create a digital waveform using the constructor or a factory method, such as <see cref="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[])"/>, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            </para>
                <para>
            Use <see cref="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[])"/> and <see cref="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:])"/> to
            construct a <see cref="T:NationalInstruments.DigitalWaveform"/> from primitive data types.
            Use <see cref="M:NationalInstruments.DigitalWaveform.Test(NationalInstruments.DigitalWaveform)"/> to test a <see cref="T:NationalInstruments.DigitalWaveform"/>
            against an expected <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
            </remarks>
            <example>
            The following sample demonstrates a method that displays all the digital states in a
            <see cref="T:NationalInstruments.DigitalWaveform"/>. Each row displayed is a particular signal. The first
            row is the least significant signal. The columns are the samples; the column on the left is the first
            sample.
            <code lang="VB.NET">
            Private Sub DisplayWaveform(ByVal waveform As DigitalWaveform)
                For Each signal As DigitalWaveformSignal In waveform.Signals
                    For Each state As DigitalState In signal.States
                        Debug.Write(String.Format("{0,-20}", state))
                    Next
                    Debug.WriteLine("")
                Next
            End Sub
            </code>
            </example>
            <example>
            <code lang="C#">
            private void DisplayWaveform(DigitalWaveform waveform)
            {
                foreach(DigitalWaveformSignal signal in waveform.Signals)
                {
                    foreach(DigitalState state in signal.States)
                    {
                        Debug.Write(String.Format("{0,-20}", state));
                    }
                    Debug.WriteLine("");
                }
            }</code>
            </example>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <lastupdated>2/10/2010 9:05:27 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.DigitalWaveform"/> with the specified sample and signal
            count.
            </summary>
            <param name="sampleCount">
            The number of samples in the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="signalCount">
            The number of signals in the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="signalCount"/> is less than zero.</para>
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </remarks>
            <lastupdated>9/19/2005 1:23:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.#ctor(System.Int32,System.Int32,NationalInstruments.DigitalState)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.DigitalWaveform"/> with the specified sample count, signal
            count, and default value.
            </summary>
            <param name="sampleCount">
            The number of samples in the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="signalCount">
            The number of signals in the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="defaultValue">
            The <see cref="T:NationalInstruments.DigitalState"/> to initialize the <see cref="T:NationalInstruments.DigitalWaveform"/> with.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="signalCount"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
                <paramref name="defaultValue"/> is an invalid <see cref="T:NationalInstruments.DigitalState"/> value.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </remarks>
            <lastupdated>9/19/2005 1:24:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:13:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
                <see cref="M:NationalInstruments.DigitalWaveform.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.DigitalWaveform"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the non-static fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>9/6/2005 3:14:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.System#ICloneable#Clone">
            <exclude/>
            <lastupdated>1/23/2009 4:13:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>9/7/2005 11:08:52 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.CopyStates(NationalInstruments.DigitalWaveform,NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
            <summary>
            Copies the data of a source digital waveform to a destination digital waveform.
            </summary>
            <param name="sourceWaveform">
            The source <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="destinationWaveform">
            The destination <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <param name="signalCount">
            The number of signals to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>The <paramref name="sourceWaveform"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para>The <paramref name="destinationWaveform"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="signalCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than <paramref name="sourceWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than <paramref name="destinationWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="signalCount"/> is greater than <paramref name="sourceWaveform"/> signal count.</para>
                <para>-or-</para>
                <para><paramref name="signalCount"/> is greater than <paramref name="destinationWaveform"/> signal count.</para>
            </exception>
            <lastupdated>9/19/2005 5:36:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.CopyStates(NationalInstruments.DigitalWaveform,System.Int32,System.Int32,NationalInstruments.DigitalWaveform,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the data of a source digital waveform to a destination digital waveform with the specified indexes.
            </summary>
            <param name="sourceWaveform">
            The source <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="sourceSampleIndex">
            The source sample index.
            </param>
            <param name="sourceSignalIndex">
            The source signal index.
            </param>
            <param name="destinationWaveform">
            The destination <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="destinationSampleIndex">
            The destination sample index.
            </param>
            <param name="destinationSignalIndex">
            The destination signal index.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <param name="signalCount">
            The number of signals to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>The <paramref name="sourceWaveform"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para>The <paramref name="destinationWaveform"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sourceSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sourceSignalIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="destinationSignalIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="signalCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sourceSampleIndex"/> + <paramref name="sampleCount"/> is greater than <paramref name="sourceWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> + <paramref name="sampleCount"/> is greater than <paramref name="destinationWaveform"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="sourceSignalIndex"/> + <paramref name="signalCount"/> is greater than <paramref name="sourceWaveform"/> signal count.</para>
                <para>-or-</para>
                <para><paramref name="destinationSignalIndex"/> + <paramref name="signalCount"/> is greater than <paramref name="destinationWaveform"/> signal count.</para>
            </exception>
            <lastupdated>9/19/2005 5:37:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.Test(NationalInstruments.DigitalWaveform)">
            <summary>
            Tests the digital waveform against an expected digital waveform.
            </summary>
            <param name="expectedWaveform">
            The expected <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveformTestResult"/> containing the test results.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="expectedWaveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The digital waveform and the <paramref name="expectedWaveform"/> signal counts are not equal.
            </exception>
            <remarks>
            Compares the digital waveform to the <paramref name="expectedWaveform"/> by comparing the states of each, using <see cref="M:NationalInstruments.DigitalStateUtility.Test(NationalInstruments.DigitalState,NationalInstruments.DigitalState)"/>.
            </remarks>
            <lastupdated>9/19/2005 1:39:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.Test(System.Int32,NationalInstruments.DigitalWaveform,System.Int32,System.Int32)">
            <summary>
            Tests the digital waveform against an expected digital waveform using the specified start sample and expected start sample.
            </summary>
            <param name="startSample">
            The beginning sample to compare.
            </param>
            <param name="expectedWaveform">
            The expected <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="expectedStartSample">
            The beginning sample of the expected <see cref="T:NationalInstruments.DigitalWaveform"/> to compare.
            </param>
            <param name="sampleCount">
            The number of samples to compare.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="expectedWaveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="startSample"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="expectedStartSample"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="startSample"/> plus <paramref name="sampleCount"/> is greater than the digital waveform sample count.</para>
                <para>-or-</para>
                <para><paramref name="expectedStartSample"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="expectedWaveform"/> sample count.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The digital waveform and the <paramref name="expectedWaveform"/> signal counts are not equal.
            </exception>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveformTestResult"/> containing the test results.
            </returns>
            <remarks>
            Compares the digital waveform to the <paramref name="expectedWaveform"/> by comparing the states of each, using <see cref="M:NationalInstruments.DigitalStateUtility.Test(NationalInstruments.DigitalState,NationalInstruments.DigitalState)"/>.
            </remarks>
            <lastupdated>9/19/2005 1:39:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional <see cref="T:System.Byte"/> array.
            </summary>
            <param name="samples">
            The two-dimensional <see cref="T:System.Byte"/> array of samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each <see cref="T:System.Byte"/> in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Byte[0:,0:],System.Byte[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional <see cref="T:System.Byte"/> array with
            the specified mask array.
            </summary>
            <param name="samples">
            The two-dimensional <see cref="T:System.Byte"/> array of samples.
            </param>
            <param name="masks">
            The mask array used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="samples"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="masks"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="samples"/> is not equal to the length of <paramref name="masks"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each <see cref="T:System.Byte"/> in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            The <paramref name="masks"/> index corresponds to each row of the two-dimensional <paramref name="samples"/> array. For example,
            <paramref name="masks"/> index 0 is applied to row 0 of <paramref name="samples"/>.
            </para>
                <para>
            Use <paramref name="masks"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="masks"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes only one signal per sample.</para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="samples">
            The <see cref="T:System.Byte"/> array of samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each <see cref="T:System.Byte"/> in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:24:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Byte[],System.Byte)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from a <see cref="T:System.Byte"/> array and a
            mask.
            </summary>
            <param name="samples">
            The <see cref="T:System.Byte"/> array of samples.
            </param>
            <param name="mask">
            The mask used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each <see cref="T:System.Byte"/> in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Use the <paramref name="mask"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="mask"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes only one signal per sample.</para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:24:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int16[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 16-bit integers.
            </summary>
            <param name="samples">
            The two-dimensional array of 16-bit integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 16-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int16[0:,0:],System.Int16[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 16-bit integers with
            the specified mask array.
            </summary>
            <param name="samples">
            The two-dimensional array of 16-bit integer samples.
            </param>
            <param name="masks">
            The mask array used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="samples"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="masks"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="samples"/> is not equal to the length of <paramref name="masks"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 16-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            The <paramref name="masks"/> index corresponds to each row of the two-dimensional <paramref name="samples"/> array. For example,
            <paramref name="masks"/> index 0 is applied to row 0 of <paramref name="samples"/>.
            </para>
                <para>
            Use <paramref name="masks"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="masks"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes only one signal per sample.</para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int16[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 16-bit integers.
            </summary>
            <param name="samples">
            The array of 16-bit integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each 16-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:25:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int16[],System.Int16)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 16-bit integers and a
            mask.
            </summary>
            <param name="samples">
            The array of 16-bit integer samples.
            </param>
            <param name="mask">
            The mask used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each 16-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Use <paramref name="mask"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="mask"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> only includes one signal per sample.</para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:25:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt16[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 16-bit unsigned integers.
            </summary>
            <param name="samples">
            The two-dimensional array of 16-bit unsigned integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 16-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:27:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt16[0:,0:],System.UInt16[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 16-bit unsigned integers with
            the specified mask array.
            </summary>
            <param name="samples">
            The two-dimensional array of 16-bit unsigned integer samples.
            </param>
            <param name="masks">
            The mask array used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="samples"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="masks"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="samples"/> is not equal to the length of <paramref name="masks"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 16-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            The <paramref name="masks"/> index corresponds to each row of the two-dimensional <paramref name="samples"/> array. For example,
            <paramref name="masks"/> index 0 is applied to row 0 of <paramref name="samples"/>.
            </para>
                <para>
            Use <paramref name="masks"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="masks"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes
            only one signal per sample.</para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:27:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt16[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 16-bit unsigned integers.
            </summary>
            <param name="samples">
            The array of 16-bit unsigned integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each 16-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:25:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt16[],System.UInt16)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 16-bit unsigned integers and a
            mask.
            </summary>
            <param name="samples">
            The array of 16-bit unsigned integer samples.
            </param>
            <param name="mask">
            The mask used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each 16-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Use the <paramref name="mask"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="mask"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes  only one signal per sample.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:25:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int32[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 32-bit integers.
            </summary>
            <param name="samples">
            The two-dimensional array of 32-bit integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 32-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.Int32[0:,0:],System.Int32[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 32-bit integers with
            the specified mask array.
            </summary>
            <param name="samples">
            The two-dimensional array of 32-bit integer samples.
            </param>
            <param name="masks">
            The mask array used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="samples"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="masks"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="samples"/> is not equal to the length of <paramref name="masks"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 32-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            The <paramref name="masks"/> index corresponds to each row of the two-dimensional <paramref name="samples"/> array. For example,
            <paramref name="masks"/> index 0 is applied to row 0 of the <paramref name="samples"/>.
            </para>
                <para>
            Use <paramref name="masks"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="masks"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes only one signal per sample.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int32[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 32-bit integers.
            </summary>
            <param name="samples">
            The array of 32-bit integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each 32-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:24:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.Int32[],System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 32-bit integers and a
            mask.
            </summary>
            <param name="samples">
            The array of 32-bit integer samples.
            </param>
            <param name="mask">
            The mask used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each 32-bit integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Use <paramref name="mask"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="mask"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes only one signal per sample.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:24:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt32[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 32-bit unsigned integers.
            </summary>
            <param name="samples">
            The two-dimensional array of 32-bit unsigned integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 32-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:26:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPorts(System.UInt32[0:,0:],System.UInt32[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> array from a two-dimensional array of 32-bit unsigned integers with
            the specified mask array.
            </summary>
            <param name="samples">
            The two-dimensional array of 32-bit unsigned integer samples.
            </param>
            <param name="masks">
            The mask array used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="samples"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="masks"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="samples"/> is not equal to the length of <paramref name="masks"/>.
            </exception>
            <remarks>
                <para>
            Each row of the two-dimensional <paramref name="samples"/> array corresponds to a resulting <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Each 32-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            The <paramref name="masks"/> index corresponds to each row of the two-dimensional <paramref name="samples"/> array. For example,
            <paramref name="masks"/> index 0 is applied to row 0 of <paramref name="samples"/>.
            </para>
                <para>
            Use <paramref name="masks"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="masks"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes only one signal per sample.</para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:27:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt32[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 32-bit unsigned integers.
            </summary>
            <param name="samples">
            The array of 32-bit unsigned integer samples.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each 32-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:25:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.FromPort(System.UInt32[],System.UInt32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.DigitalWaveform"/> from an array of 32-bit unsigned integers and a
            mask.
            </summary>
            <param name="samples">
            The array of 32-bit unsigned integer samples.
            </param>
            <param name="mask">
            The mask used to specify which bits are used.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="samples"/> is <see langword="null"/>.
            </exception>
            <remarks>
                <para>
            Each 32-bit unsigned integer in the <paramref name="samples"/> array represents a digital sample taken over a port of signals. Each bit in the sample is
            a signal value, either on or off. The least significant bit of the sample is placed at signal
            index 0 of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
                <para>
            Use the <paramref name="mask"/> to specify what bits are included in the resulting <see cref="T:NationalInstruments.DigitalWaveform"/>. For
            example, a <paramref name="mask"/> value of 0x1 means the resulting <see cref="T:NationalInstruments.DigitalWaveform"/> includes
            only one signal per sample.
            </para>
                <para>
            Upon construction, <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is set to <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            Use <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to set timing information.
            </para>
            </remarks>
            <lastupdated>9/19/2005 1:25:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <lastupdated>9/7/2005 10:56:52 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <remarks>
            Use <see cref="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps"/> instead of
            <see cref="M:NationalInstruments.DigitalWaveform.GetTimeStamps"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.DigitalWaveform"/> was set using
            <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>, then this method
            will return time stamps with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>,
            the time stamps returned will only be as precise as <see cref="T:System.DateTime"/>.</remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>10/13/2006 9:47:20 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetBuffer(System.Boolean)">
            <summary>
            Gets a buffer representing the data of the digital waveform.
            </summary>
            <param name="copy">Indicates whether a copy of the waveform data is returned.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> representing the
            data of the digital waveform.
            </returns>
            <remarks>
                <para>
            The number of samples in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
            is equal to the <see cref="P:NationalInstruments.DigitalWaveformSampleCollection.Count"/> of <see cref="P:NationalInstruments.DigitalWaveform.Samples"/>.
            </para>
                <para>
            The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> returned
            by <see cref="M:NationalInstruments.DigitalWaveform.GetBuffer(System.Boolean)"/>
            is a read-only view of the waveform data.  Calling <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable"/>
            on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
            makes a copy of the waveform data.  To modify the actual data in the waveform, call
            <see cref="M:NationalInstruments.DigitalWaveform.GetWritableBuffer"/>.
            </para>
                <para>
            When <paramref name="copy"/> is <see langword="true"/>, the returned buffer is populated with a copy of
            the waveform data. It is safe to access the samples of the returned buffer until it is explicitly disposed.
            </para>
                <para>
            When <paramref name="copy"/> is <see langword="false"/>, the returned buffer contains a direct reference
            to the waveform data. It is only safe to access the samples of the returned buffer when the data in the
            waveform is not changed. Setting a value with the <see cref="P:NationalInstruments.DigitalWaveform.Samples"/> or <see cref="P:NationalInstruments.DigitalWaveform.Signals"/> collections,
            changing the data through the buffer returned by <see cref="M:NationalInstruments.DigitalWaveform.GetWritableBuffer"/>, or
             using a memory-optimized read method invalidates the returned buffer and makes it unsafe to use.
            </para>
            </remarks>
            <example>
            The following code demonstrates how to use <see cref="M:NationalInstruments.DigitalWaveform.GetBuffer(System.Boolean)"/>.
            <code lang="VB.NET">
            Dim buffer As NationalInstruments.DataInfrastructure.Buffer(Of DigitalSample) = digitalWaveform.GetBuffer(True)
            For i As Integer = 0 To (buffer.Size - 1)
                 'Access digital samples using an indexer property to write sample values to an output window.
                 Debug.WriteLine(buffer(i))
            Next
            </code>
            <code lang="C#">
            NationalInstruments.DataInfrastructure.Buffer&lt;DigitalSample&gt; buffer = digitalWaveform.GetBuffer(true);
            for (int i = 0; i &lt; buffer.Size; i++)
            {
                 // Access digital samples using an indexer property to write sample values to an output window.
                 Debug.WriteLine(buffer[i]);
            }
            </code>
            </example>
            <lastupdated>6/7/2012 11:36:34 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetWritableBuffer">
             <summary>
             Gets a writable buffer representing the data of the digital waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/> representing the
             data of the digital waveform.
             </returns>
             <remarks>
                 <para>
             The number of samples in the <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>
             is equal to the <see cref="P:NationalInstruments.DigitalWaveformSampleCollection.Count"/> of <see cref="P:NationalInstruments.DigitalWaveform.Samples"/>.
             </para>
             </remarks>
             <example>
             The following code demonstrates how to use <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1"/>.
             <code lang="VB.NET">
             Dim emptySample As New DigitalSample(New DigitalState(digitalWaveform.Signals.Count) {})
             Dim writableBuffer As WritableBuffer(Of DigitalSample) = digitalWaveform.GetWritableBuffer()
            
             For i As Integer = 0 To writableBuffer.Size - 1
                  'Reset all digital samples in the waveform.
                  writableBuffer(i) = emptySample
             Next
             </code>
             <code lang="C#">
             DigitalSample emptySample = new DigitalSample(new DigitalState[digitalWaveform.Signals.Count]);
             WritableBuffer&lt;DigitalSample&gt; writableBuffer = digitalWaveform.GetWritableBuffer();
            
             for (int i = 0; i &lt; writableBuffer.Size; i++)
             {
                  // Reset all digital samples in the waveform.
                  writableBuffer[i] = emptySample;
             }
            
             </code>
             </example>
             <lastupdated>6/7/2012 12:47:55 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetTimeStampBuffer">
             <summary>
             Gets a buffer representing the time stamps of the digital waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> representing
             the time stamps of the digital waveform.
             </returns>
             <remarks>
             The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> returned
             by <see cref="M:NationalInstruments.DigitalWaveform.GetTimeStampBuffer"/>
             is a read-only view of the waveform time stamps.  Calling
             <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable"/>
             on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
             makes a copy of the time stamp data.  To change the timing of the waveform, set
             <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>
             to a new value.
             </remarks>
             <exception cref="T:System.InvalidOperationException">
                 <para>
             The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> property
             of <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
             </para>
                 <para>- or -</para>
                 <para>
             The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> property
             of <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> and the
             <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> property is
             <see langword="false"/>.
             </para>
             </exception>
             <example>
             The following code demonstrates how to use time stamps.
             <code lang="VB.NET">
             Dim dateTimeBuffer As NationalInstruments.DataInfrastructure.Buffer(Of DateTime) = digitalWaveform.GetTimeStampBuffer()
            
             For i As Integer = 0 To dateTimeBuffer.Size - 1
                  'Access buffer samples using an indexer property and write the timestamp to output window.
                  Debug.WriteLine(dateTimeBuffer(i))
             Next
             </code>
             <code lang="C#">
             NationalInstruments.DataInfrastructure.Buffer&lt;DateTime&gt; dateTimeBuffer= digitalWaveform.GetTimeStampBuffer();
            
             for (int i = 0; i &lt; dateTimeBuffer.Size; i++)
             {
                  // Access buffer samples using an indexer property and write the timestamp to output window.
                  Debug.WriteLine(dateTimeBuffer[i]);
             }
             </code>
             </example>
             <lastupdated>6/7/2012 12:47:03 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStampBuffer">
             <summary>
             Gets a buffer representing the precision time stamps of the digital waveform.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> representing
             the precision time stamps of the digital waveform.
             </returns>
             <remarks>
                 <para>
             The number of time stamps in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
             is equal to the <see cref="P:NationalInstruments.DigitalWaveformSampleCollection.Count"/> of <see cref="P:NationalInstruments.DigitalWaveform.Samples"/>.
             </para>
                 <para>
             The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> returned
             by <see cref="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStampBuffer"/>
             is a read-only view of the waveform precision time stamps.  Calling
             <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable"/>
             on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/>
             makes a copy of the precision time stamp data.  To change the precision timing of the waveform, set
             <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>
             to a new value.
             </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
                 <para>
             The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> property
             of <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.
             </para>
                 <para>- or -</para>
                 <para>
             The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> property
             of <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/> is
             <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> and the
             <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> property is
             <see langword="false"/>.
             </para>
             </exception>
             <example>
             The following code demonstrates how to use precision time stamps.
             <code lang="VB.NET">
             Dim precisionDateTimeBuffer As NationalInstruments.DataInfrastructure.Buffer(Of PrecisionDateTime) = digitalWaveform.GetPrecisionTimeStampBuffer()
            
             For i As Integer = 0 To precisionDateTimeBuffer.Size - 1
                  'Access buffer samples using an indexer property and write the precision time stamp to an output window.
                  Debug.WriteLine(precisionDateTimeBuffer(i))
             Next
             </code>
             <code lang="C#">
             NationalInstruments.DataInfrastructure.Buffer&lt;PrecisionDateTime&gt; precisionDateTimeBuffer = digitalWaveform.GetPrecisionTimeStampBuffer();
            
             for (int i = 0; i &lt; precisionDateTimeBuffer.Size; i++)
             {
                  // Access buffer samples using an indexer property and write the precision time stamp to an output window.
                  Debug.WriteLine(precisionDateTimeBuffer[i]);
             }
             </code>
             </example>
             <lastupdated>6/7/2012 12:45:29 PM</lastupdated>
             <updatedby>National Instruments</updatedby>
             <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> using the
            specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <lastupdated>3/16/2006 1:41:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/> using the
            specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            Use <see cref="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps"/> instead of
            <see cref="M:NationalInstruments.DigitalWaveform.GetTimeStamps"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.DigitalWaveform"/> was set using
            <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>, then this method
            will return time stamps with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>,
            the time stamps returned will only be as precise as <see cref="T:System.DateTime"/>.
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>10/13/2006 9:47:15 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> using the
            specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <lastupdated>3/16/2006 1:42:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps from <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/> using the
            specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the digital waveform from which to get the time stamps.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>-or-</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            Use <see cref="M:NationalInstruments.DigitalWaveform.GetPrecisionTimeStamps"/> instead of
            <see cref="M:NationalInstruments.DigitalWaveform.GetTimeStamps"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the timing information in <see cref="T:NationalInstruments.DigitalWaveform"/> was set using
            <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>, then this method
            will return time stamps with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>,
            the time stamps returned will only be as precise as <see cref="T:System.DateTime"/>.
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>10/13/2006 9:45:11 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveform.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 4:13:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.Signals">
            <summary>
            Gets the signals of the digital waveform.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.DigitalWaveformSignalCollection"/> containing the <see cref="T:NationalInstruments.DigitalWaveformSignal"/>
            objects.
            </value>
            <lastupdated>9/6/2005 3:03:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.Samples">
            <summary>
            Gets the samples of the digital waveform.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.DigitalWaveformSampleCollection"/> containing the <see cref="T:NationalInstruments.DigitalWaveformSample"/>
            objects.
            </value>
            <lastupdated>9/6/2005 3:03:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.Timing">
            <summary>
            Gets or sets the timing information of the digital waveform.
            </summary>
            <value>
            The timing information of the digital waveform. The default value is <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
                The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para><see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>.</para>
                <para>-or-</para>
                <para>The time stamp values are greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
            </exception>
            <remarks>
            <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> includes information that encapsulates waveform timing.
            </remarks>
            <lastupdated>3/16/2006 1:46:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.PrecisionTiming">
            <summary>
            Gets or sets the timing information of the digital waveform with a higher precision
            than <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>.
            </summary>
            <value>
            The timing information of the digital waveform. The default value is <see cref="F:NationalInstruments.WaveformTiming.Empty"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
                The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para><see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>.</para>
                <para>-or-</para>
                <para>The time stamp values are greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
            </exception>
            <remarks>
                <para>
                    <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/> includes information that
            encapsulates waveform timing.
            Use <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/> instead of
            <see cref="P:NationalInstruments.DigitalWaveform.Timing"/> to obtain
            timing information with higher precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            If the waveform timing information in <see cref="T:NationalInstruments.DigitalWaveform"/>
            is set using <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>, then this property
            returns timing information with the precision of <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>.
            If the timing information is set using <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>,
            the timing information returned is only as precise as <see cref="T:NationalInstruments.WaveformTiming"/>.</para>
                <para>Accessing this property can potentially decrease performance if the timing information is
            set using <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>. Use
            <see cref="P:NationalInstruments.DigitalWaveform.IsPrecisionTimingInitialized" crefType="Unqualified"/> to
            determine if <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming" crefType="Unqualified"/>
            has been initialized.</para>
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <lastupdated>9/16/2008 4:51:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.IsPrecisionTimingInitialized">
            <summary>
            Gets a value indicating whether the precision timing information for the waveform has been initialized.
            </summary>
            <value>
                <see langword="true"/> if <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming" crefType="Unqualified"/>
            has been initialized.
            </value>
            <lastupdated>9/16/2008 4:51:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.ExtendedProperties">
            <summary>
            Gets the extended properties for the digital waveform.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/> that contains the extended
            properties of the digital waveform.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.DigitalWaveform.ExtendedProperties"/> stores key value pair information
            specific to the digital waveform. For example, drivers, such as the NI-DAQmx driver, populate <see cref="P:NationalInstruments.DigitalWaveform.ExtendedProperties"/>
            with information specific to the data acquisition type. For more information, refer to your specific driver documentation.
            </remarks>
            <lastupdated>9/19/2005 1:30:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveform.ChannelName">
            <summary>
            Gets or sets the name of the device channel from which the digital waveform was acquired.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the device channel from which the
            <see cref="T:NationalInstruments.DigitalWaveform"/> was acquired.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.DigitalWaveform.ChannelName"/> reads and writes to
            <see cref="P:NationalInstruments.DigitalWaveform.ExtendedProperties"/> using the reserved key <format type="monospace">NI_ChannelName</format>.
            </remarks>
            <lastupdated>3/16/2006 1:37:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveformFailure">
            <summary>
            Provides a class that encapsulates a test failure between two digital states.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <see cref="T:NationalInstruments.DigitalWaveformFailure"/> contains information about a test failure.
            <see cref="P:NationalInstruments.DigitalWaveformFailure.ActualState"/> returns the actual state and
            <see cref="P:NationalInstruments.DigitalWaveformFailure.ExpectedState"/> returns the state that
            was expected but failed.
            </remarks>
            <lastupdated>9/19/2005 1:40:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformFailure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DigitalWaveformFailure"/> with the specified info and context.
            </summary>
            <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
            <param name="context">
            The source and destination of a given serialized stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/7/2005 1:11:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformFailure.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the data needed to serialize the <see cref="T:NationalInstruments.DigitalWaveformFailure"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the
            <see cref="T:NationalInstruments.DigitalWaveformFailure"/>.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/7/2005 1:11:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformFailure.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformFailure.SampleIndex">
            <summary>
            Gets the sample index into the compared test waveform where the test failure occurred.
            </summary>
            <value>
            The sample index where the test failure occurred.
            </value>
            <lastupdated>10/31/2005 2:27:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformFailure.ExpectedSampleIndex">
            <summary>
            Gets the sample index into the expected test waveform where the test failure occurred.
            </summary>
            <value>
            The expected sample index where the test failure occurred.
            </value>
            <lastupdated>10/31/2005 2:26:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformFailure.SignalIndex">
            <summary>
            Gets the signal index into the compared test waveform and the expected test waveform where the test failure occurred.
            </summary>
            <value>
            The signal index where the test failure occurred.
            </value>
            <lastupdated>10/31/2005 2:27:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformFailure.ActualState">
            <summary>
            Gets the state from the compared waveform where the test failure occurred.</summary>
            <value>
            The compared <see cref="T:NationalInstruments.DigitalState"/>.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.DigitalWaveformFailure.ActualState"/> was compared against <see cref="P:NationalInstruments.DigitalWaveformFailure.ExpectedState"/>
            and failed.
            </remarks>
            <lastupdated>6/20/2006 8:22:54 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformFailure.ExpectedState">
            <summary>
            Gets the state from the expected waveform where the test failure occurred.</summary>
            <value>
            The expected <see cref="T:NationalInstruments.DigitalState"/> where the test failure occurred.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.DigitalWaveformFailure.ExpectedState"/> was compared to <see cref="P:NationalInstruments.DigitalWaveformFailure.ActualState"/>
            and failed.
            </remarks>
            <lastupdated>6/20/2006 8:23:03 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveformSample">
            <summary>
            Represents a sample of a digital waveform.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            A <see cref="T:NationalInstruments.DigitalWaveformSample"/> represents a sample of a digital waveform. A
            <see cref="T:NationalInstruments.DigitalWaveformSample"/> is a sample taken of many digital signals. Use
            <see cref="P:NationalInstruments.DigitalWaveformSample.States"/> to iterate over
            the digital states of the signals contained in the <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            Use <see cref="M:NationalInstruments.DigitalWaveformSample.TryConvert(System.Int64@)"/> to convert the sample into packed form.
            Use <see cref="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp"/> to determine if the sample has a time stamp.
            If <see cref="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp"/> is <see langword="true"/>, <see cref="P:NationalInstruments.DigitalWaveformSample.TimeStamp"/>
            returns the time stamp of the sample.
            </remarks>
            <lastupdated>6/19/2006 5:12:58 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSample.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified
            <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            </summary>
            <param name="obj">
            The <see cref="T:NationalInstruments.DigitalWaveformSample"/> to compare with this
            instance.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:NationalInstruments.DigitalWaveformSample"/> that is equal
            to this instance.
            </returns>
            <lastupdated>9/15/2005 5:52:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSample.Equals(NationalInstruments.DigitalWaveformSample)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified
            <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            </summary>
            <param name="sample">
            The <see cref="T:NationalInstruments.DigitalWaveformSample"/> to compare with this
            instance.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="sample"/> is a <see cref="T:NationalInstruments.DigitalWaveformSample"/> that is equal
            to this instance.
            </returns>
            <lastupdated>9/15/2005 5:51:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSample.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.DigitalWaveformSample"/> objects might have the same hash code even though they
            represent different values.
            </remarks>
            <seealso cref="M:System.Object.GetHashCode"/>
            <lastupdated>9/15/2005 4:57:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSample.TryConvert(System.Int64@)">
            <summary>
            Converts the <see cref="T:NationalInstruments.DigitalWaveformSample"/> to a 64-bit bus value.
            </summary>
            <param name="busValue">
            Upon return, contains the bus value of the <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            </param>
            <returns>
                <see langword="true"/> if the bus value can convert to a 64-bit bus value.
            </returns>
            <remarks>
                <para>
                    <see cref="M:NationalInstruments.DigitalWaveformSample.TryConvert(System.Int64@)"/> converts a <see cref="T:NationalInstruments.DigitalWaveformSample"/>
            into a <paramref name="busValue"/> if all the states in the sample are either <see cref="F:NationalInstruments.DigitalState.ForceUp"/>,
            <see cref="F:NationalInstruments.DigitalState.ForceDown"/>, <see cref="F:NationalInstruments.DigitalState.CompareHigh"/>, or
            <see cref="F:NationalInstruments.DigitalState.CompareLow"/> and if the number of <see cref="P:NationalInstruments.DigitalWaveformSample.States"/> in <see cref="P:NationalInstruments.DigitalWaveformSampleCollection.Count"/> is
            less than or equal to 64.</para>
            </remarks>
            <lastupdated>9/19/2005 2:06:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSample.Owner">
            <summary>
            Gets the <see cref="T:NationalInstruments.DigitalWaveform"/> that the sample came from.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.DigitalWaveform"/> of the <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            </value>
            <lastupdated>9/19/2005 2:06:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp">
            <summary>
            Gets a value indicating whether the digital sample has a <see cref="P:NationalInstruments.DigitalWaveformSample.TimeStamp"/>.
            </summary>
            <value>
                <see langword="true"/> if the digital sample has a <see cref="P:NationalInstruments.DigitalWaveformSample.TimeStamp"/>.
            </value>
            <lastupdated>9/8/2005 11:37:34 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSample.TimeStamp">
            <summary>
            The time stamp of the digital sample.
            </summary>
            <value>
            The <see cref="T:System.DateTime"/> representing the time stamp.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <seealso cref="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp"/>
            <lastupdated>6/20/2006 8:23:11 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSample.PrecisionTimeStamp">
            <summary>
            The time stamp of the digital sample.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the time stamp.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <remarks>
            Use <see cref="P:NationalInstruments.DigitalWaveformSample.PrecisionTimeStamp"/> instead of
            <see cref="P:NationalInstruments.DigitalWaveformSample.TimeStamp"/> to obtain
            a time stamp with higher precision than <see cref="T:System.DateTime"/>.
            If the timing information in the <see cref="T:NationalInstruments.DigitalWaveform"/>
            containing the <see cref="T:NationalInstruments.DigitalWaveformSample"/> was set using
            <see cref="P:NationalInstruments.DigitalWaveform.PrecisionTiming"/>, then this property
            will return a time stamp with the precision of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            If the timing information was set using <see cref="P:NationalInstruments.DigitalWaveform.Timing"/>,
            the time stamp returned will only be as precise as <see cref="T:System.DateTime"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.DigitalWaveformSample.HasTimeStamp"/>
            <seealso cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            <seealso cref="T:NationalInstruments.PrecisionDateTime"/>
            <lastupdated>10/13/2006 9:43:16 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSample.States">
            <summary>
            Gets the collection of digital states that are part of the sample.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.DigitalStateCollection"/> of digital states that are part of the
            <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            </value>
            <lastupdated>9/19/2005 9:29:27 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveformSampleCollection">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.DigitalWaveformSample"/> objects.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.DigitalWaveformSample"/> objects.
            </remarks>
            <lastupdated>6/11/2012 12:49:45 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSampleCollection.IndexOf(NationalInstruments.DigitalWaveformSample)">
            <summary>
            Searches for the <see cref="T:NationalInstruments.DigitalWaveformSample"/> and returns the zero-based index of the first
            occurrence.
            </summary>
            <param name="sample">
            The <see cref="T:NationalInstruments.DigitalWaveformSample"/> to locate.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="sample"/>.
            </returns>
            <lastupdated>9/15/2005 6:19:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSampleCollection.CopyTo(NationalInstruments.DigitalWaveformSample[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="array"/> is multidimensional.</para>
                <para>- or -</para>
                <para><paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>- or -</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="index"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>9/15/2005 6:19:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSampleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSampleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>9/15/2005 6:19:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSampleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.DigitalWaveformSample"/> at the specified index.
            </summary>
            <param name="sampleIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
            <value>The <see cref="T:NationalInstruments.DigitalWaveformSample"/> at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleIndex"/> is less than zero.
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is greater than or equal to count.</para>
            </exception>
            <lastupdated>9/15/2005 6:09:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSampleCollection.Count">
            <summary>
            Gets the number of samples in <see cref="T:NationalInstruments.DigitalWaveformSampleCollection"/>.
            </summary>
            <value>
            The number of samples in <see cref="T:NationalInstruments.DigitalWaveformSampleCollection"/>.
            </value>
            <lastupdated>9/15/2005 5:53:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSampleCollection.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 4:20:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSampleCollection.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 4:20:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveformSignal">
            <summary>
            Represents a signal of a digital waveform.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            A <see cref="T:NationalInstruments.DigitalWaveformSignal"/> represents a signal of a digital waveform. A
            <see cref="T:NationalInstruments.DigitalWaveformSignal"/> is a signal taken over many samples. Use
            <see cref="P:NationalInstruments.DigitalWaveformSignal.States"/> to iterate over
            the digital states of the samples contained in the <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </remarks>
            <lastupdated>9/19/2005 9:32:21 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignal.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified
            <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </summary>
            <param name="obj">
            The <see cref="T:NationalInstruments.DigitalWaveformSignal"/> to compare with this
            instance.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:NationalInstruments.DigitalWaveformSignal"/> that is equal
            to this instance.
            </returns>
            <lastupdated>9/16/2005 10:25:02 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignal.Equals(NationalInstruments.DigitalWaveformSignal)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified
            <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </summary>
            <param name="signal">
            The <see cref="T:NationalInstruments.DigitalWaveformSignal"/> to compare with this
            instance.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="signal"/> is a <see cref="T:NationalInstruments.DigitalWaveformSignal"/> that is equal
            to this instance.
            </returns>
            <lastupdated>9/16/2005 10:24:49 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignal.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.DigitalWaveformSignal"/> objects might have the same hash code even though they
            represent different values.
            </remarks>
            <seealso cref="M:System.Object.GetHashCode"/>
            <lastupdated>9/16/2005 10:25:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignal.Owner">
            <summary>
            Gets the <see cref="T:NationalInstruments.DigitalWaveform"/> of the sample.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.DigitalWaveform"/> of the <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </value>
            <lastupdated>9/16/2005 10:23:56 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignal.States">
            <summary>
            Gets the collection of digital states that are part of the digital waveform signal.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.DigitalStateCollection"/> of digital states that are part of the
            <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </value>
            <lastupdated>9/19/2005 9:32:44 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignal.Name">
            <summary>
            Gets and sets the name of the digital waveform signal.
            </summary>
            <value>
            The name of the <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </value>
            <remarks>
                <see cref="P:NationalInstruments.DigitalWaveformSignal.Name"/> reads and writes to
            <see cref="P:NationalInstruments.DigitalWaveform.ExtendedProperties"/> using the reserved key
            <format type="monospace">NI_LineNames</format>.
            </remarks>
            <lastupdated>9/16/2005 10:23:43 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveformSignalCollection">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.DigitalWaveformSignal"/> objects.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.DigitalWaveformSignal"/> objects.
            </remarks>
            <lastupdated>6/11/2012 12:49:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignalCollection.IndexOf(NationalInstruments.DigitalWaveformSignal)">
            <summary>
            Searches for the <see cref="T:NationalInstruments.DigitalWaveformSignal"/> and returns the zero-based index of the first
            occurrence.
            </summary>
            <param name="signal">
            The <see cref="T:NationalInstruments.DigitalWaveformSignal"/> to locate.
            </param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="signal"/>.
            </returns>
            <lastupdated>9/16/2005 10:28:53 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignalCollection.CopyTo(NationalInstruments.DigitalWaveformSignal[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="array"/> is multidimensional.</para>
                <para>- or -</para>
                <para><paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>- or -</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="index"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>9/16/2005 10:27:38 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignalCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformSignalCollection.GetEnumerator">
            <summary>
            Returns an enumerator that you use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>9/16/2005 10:27:49 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.DigitalWaveformSignal"/> at the specified index.
            </summary>
            <param name="signalIndex">
            The zero-based index of the entry to locate in the collection.
            </param>
            <value>The <see cref="T:NationalInstruments.DigitalWaveformSignal"/> at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="signalIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="signalIndex"/> is greater than or equal to count.</para>
            </exception>
            <lastupdated>9/16/2005 10:27:03 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NationalInstruments.DigitalWaveformSignal"/> with the specified signal name.
            </summary>
            <param name="signalName">
            The signal name of the <see cref="T:NationalInstruments.DigitalWaveformSignal"/>.
            </param>
            <value>The <see cref="T:NationalInstruments.DigitalWaveformSignal"/> with the signal name.</value>
            <exception cref="T:System.ArgumentException">
                <paramref name="signalName"/> was not found.
            </exception>
            <lastupdated>9/16/2005 10:27:21 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignalCollection.Count">
            <summary>
            Gets the number of samples in the <see cref="T:NationalInstruments.DigitalWaveformSignalCollection"/>.
            </summary>
            <value>
            The number of samples in the <see cref="T:NationalInstruments.DigitalWaveformSignalCollection"/>.
            </value>
            <lastupdated>9/16/2005 10:26:09 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignalCollection.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 4:21:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformSignalCollection.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 4:21:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.DigitalWaveformTestResult">
            <summary>
            Provides a test result from comparing an expected digital waveform against the compared waveform.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <see cref="T:NationalInstruments.DigitalWaveformTestResult"/> provides a test result from comparing two digital waveforms. Use
            <see cref="P:NationalInstruments.DigitalWaveformTestResult.Success"/> to determine if the test did not fail.
            <see cref="M:NationalInstruments.DigitalWaveformTestResult.GetFailures"/> returns an array of
            <see cref="T:NationalInstruments.DigitalWaveformFailure"/> objects.
            </remarks>
            <lastupdated>9/19/2005 5:48:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformTestResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.DigitalWaveformTestResult"/> with the info and context.
            </summary>
            <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
            <param name="context">
            The source and destination of a given serialized stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/15/2005 6:20:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformTestResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the data needed to serialize the <see cref="T:NationalInstruments.DigitalWaveformTestResult"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the
            <see cref="T:NationalInstruments.DigitalWaveformTestResult"/>.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/15/2005 6:20:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformTestResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.DigitalWaveformTestResult.GetFailures">
            <summary>
            Returns a <see cref="T:NationalInstruments.DigitalWaveformFailure"/> array containing failure information.
            </summary>
            <returns>
            The <see cref="T:NationalInstruments.DigitalWaveformFailure"/> array containing failure information.
            </returns>
            <lastupdated>9/15/2005 6:20:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.DigitalWaveformTestResult.Success">
            <summary>
            Returns if the test is successful.
            </summary>
            <value>
                <see langword="true"/> if the test is successful.
            </value>
            <lastupdated>9/15/2005 6:20:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.EngineeringFormatInfo">
            <summary>
            Defines a custom formatter to format numeric values with engineering notation and International
            System of Units (SI) prefixes and symbols.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
                <para>
            The format strings that you can use with <see cref="T:NationalInstruments.EngineeringFormatInfo"/>
            are specified by the following format:
            </para>
                <para>
                    <format type="monospace">
            (format string)[decimal places][literal string]
            </format>
                </para>
                <para>
            The format string section specifies how to format the numeric value and can be one of the
            following values:
            </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Format</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>
            ee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5e+3.
            </description>
                        </item>
                        <item>
                            <term>
            EE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5E+3.
            </description>
                        </item>
                        <item>
                            <term>
            eee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5e+003.
            </description>
                        </item>
                        <item>
                            <term>
            EEE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5E+003.
            </description>
                        </item>
                        <item>
                            <term>
            ss
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with no space between the number and the prefix.
            For example, 5000 becomes 5kilo.
            </description>
                        </item>
                        <item>
                            <term>
            s
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with no space between the number and the symbol.
            For example, 5000 becomes 5k.
            </description>
                        </item>
                        <item>
                            <term>
            SS
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with a space between the number and the prefix.
            For example, 5000 becomes 5 kilo.
            </description>
                        </item>
                        <item>
                            <term>
            S
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with a space between the number and the symbol.
            For example, 5000 becomes 5 k.
            </description>
                        </item>
                    </list>
                </para>
                <para>
            The decimal places section is optional and specifies the number of digits to display after
            the decimal point in the formatted numeric value.  If the decimal places section is not specified, the numeric value is formatted with three
            decimal places by default.
            </para>
                <para>
            The literal string section is optional
            and is a string enclosed in single or double quotes that specifies a string to copy
            to the formatted numeric value string literally. It does not affect formatting;
            therefore, place the literal string immediately following the formatted numeric value string.
            </para>
            </remarks>
            <example>
            The following example demonstrates using <see cref="T:NationalInstruments.EngineeringFormatInfo"/>
            with <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> with several format strings as well as the result of each
            formatting operation.
            <code lang="VB.NET">
            String.Format(EngineeringFormatInfo.Default, "{0:ee}", 12345.67)       ' Returns "12.346e+3"
            String.Format(EngineeringFormatInfo.Default, "{0:ee1}", 12345.67)      ' Returns "12.3e+3"
            String.Format(EngineeringFormatInfo.Default, "{0:ee'Hz'}", 12345.67)   ' Returns "12.346e+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:ee1'Hz'}", 12345.67)  ' Returns "12.3e+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EE}", 12345.67)       ' Returns "12.346E+3"
            String.Format(EngineeringFormatInfo.Default, "{0:EE1}", 12345.67)      ' Returns "12.3E+3"
            String.Format(EngineeringFormatInfo.Default, "{0:EE'Hz'}", 12345.67)   ' Returns "12.346E+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EE1'Hz'}", 12345.67)  ' Returns "12.3E+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:eee}", 12345.67)      ' Returns "12.346e+003"
            String.Format(EngineeringFormatInfo.Default, "{0:eee1}", 12345.67)     ' Returns "12.3e+003"
            String.Format(EngineeringFormatInfo.Default, "{0:eee'Hz'}", 12345.67)  ' Returns "12.346e+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:eee1'Hz'}", 12345.67) ' Returns "12.3e+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE}", 12345.67)      ' Returns "12.346E+003"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE1}", 12345.67)     ' Returns "12.3E+003"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE'Hz'}", 12345.67)  ' Returns "12.346E+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE1'Hz'}", 12345.67) ' Returns "12.3E+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:ss}", 12345.67)       ' Returns "12.346kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:ss1}", 12345.67)      ' Returns "12.3kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:ss'Hz'}", 12345.67)   ' Returns "12.346kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:ss1'Hz'}", 12345.67)  ' Returns "12.3kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:s}", 12345.67)        ' Returns "12.346k"
            String.Format(EngineeringFormatInfo.Default, "{0:s1}", 12345.67)       ' Returns "12.3k"
            String.Format(EngineeringFormatInfo.Default, "{0:s'Hz'}", 12345.67)    ' Returns "12.346kHz"
            String.Format(EngineeringFormatInfo.Default, "{0:s1'Hz'}", 12345.67)   ' Returns "12.3kHz"
            String.Format(EngineeringFormatInfo.Default, "{0:SS}", 12345.67)       ' Returns "12.346 kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:SS1}", 12345.67)      ' Returns "12.3 kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:SS'Hz'}", 12345.67)   ' Returns "12.346 kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:SS1'Hz'}", 12345.67)  ' Returns "12.3 kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:S}", 12345.67)        ' Returns "12.346 k"
            String.Format(EngineeringFormatInfo.Default, "{0:S1}", 12345.67)       ' Returns "12.3 k"
            String.Format(EngineeringFormatInfo.Default, "{0:S'Hz'}", 12345.67)    ' Returns "12.346 kHz"
            String.Format(EngineeringFormatInfo.Default, "{0:S1'Hz'}", 12345.67)   ' Returns "12.3 kHz"
            </code>
            </example>
            <example>
            <code lang="C#">
            String.Format(EngineeringFormatInfo.Default, "{0:ee}", 12345.67);       // Returns "12.346e+3"
            String.Format(EngineeringFormatInfo.Default, "{0:ee1}", 12345.67);      // Returns "12.3e+3"
            String.Format(EngineeringFormatInfo.Default, "{0:ee'Hz'}", 12345.67);   // Returns "12.346e+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:ee1'Hz'}", 12345.67);  // Returns "12.3e+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EE}", 12345.67);       // Returns "12.346E+3"
            String.Format(EngineeringFormatInfo.Default, "{0:EE1}", 12345.67);      // Returns "12.3E+3"
            String.Format(EngineeringFormatInfo.Default, "{0:EE'Hz'}", 12345.67);   // Returns "12.346E+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EE1'Hz'}", 12345.67);  // Returns "12.3E+3Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:eee}", 12345.67);      // Returns "12.346e+003"
            String.Format(EngineeringFormatInfo.Default, "{0:eee1}", 12345.67);     // Returns "12.3e+003"
            String.Format(EngineeringFormatInfo.Default, "{0:eee'Hz'}", 12345.67);  // Returns "12.346e+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:eee1'Hz'}", 12345.67); // Returns "12.3e+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE}", 12345.67);      // Returns "12.346E+003"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE1}", 12345.67);     // Returns "12.3E+003"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE'Hz'}", 12345.67);  // Returns "12.346E+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:EEE1'Hz'}", 12345.67); // Returns "12.3E+003Hz"
            String.Format(EngineeringFormatInfo.Default, "{0:ss}", 12345.67);       // Returns "12.346kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:ss1}", 12345.67);      // Returns "12.3kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:ss'Hz'}", 12345.67);   // Returns "12.346kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:ss1'Hz'}", 12345.67);  // Returns "12.3kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:s}", 12345.67);        // Returns "12.346k"
            String.Format(EngineeringFormatInfo.Default, "{0:s1}", 12345.67);       // Returns "12.3k"
            String.Format(EngineeringFormatInfo.Default, "{0:s'Hz'}", 12345.67);    // Returns "12.346kHz"
            String.Format(EngineeringFormatInfo.Default, "{0:s1'Hz'}", 12345.67);   // Returns "12.3kHz"
            String.Format(EngineeringFormatInfo.Default, "{0:SS}", 12345.67);       // Returns "12.346 kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:SS1}", 12345.67);      // Returns "12.3 kilo"
            String.Format(EngineeringFormatInfo.Default, "{0:SS'Hz'}", 12345.67);   // Returns "12.346 kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:SS1'Hz'}", 12345.67);  // Returns "12.3 kiloHz"
            String.Format(EngineeringFormatInfo.Default, "{0:S}", 12345.67);        // Returns "12.346 k"
            String.Format(EngineeringFormatInfo.Default, "{0:S1}", 12345.67);       // Returns "12.3 k"
            String.Format(EngineeringFormatInfo.Default, "{0:S'Hz'}", 12345.67);    // Returns "12.346 kHz"
            String.Format(EngineeringFormatInfo.Default, "{0:S1'Hz'}", 12345.67);   // Returns "12.3 kHz"
            </code>
            </example>
            <lastupdated>5/25/2004 11:50:37 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.EngineeringFormatInfo"/> class.
            </summary>
            <lastupdated>11/14/2003 4:53:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.GetInstance(System.IFormatProvider)">
            <summary>
            Gets <see cref="T:NationalInstruments.EngineeringFormatInfo"/> associated with the specified
            <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="provider">
            The <see cref="T:System.IFormatProvider"/> used to get <see cref="T:NationalInstruments.EngineeringFormatInfo"/>.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.EngineeringFormatInfo"/> associated with the specified
            <see cref="T:System.IFormatProvider"/>.
            </returns>
            <lastupdated>11/14/2003 4:54:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.ReadOnly(NationalInstruments.EngineeringFormatInfo)">
            <summary>
            Returns a read-only copy of the specified <see cref="T:NationalInstruments.EngineeringFormatInfo"/>.
            </summary>
            <param name="efi">
            The <see cref="T:NationalInstruments.EngineeringFormatInfo"/> from which to create a read-only copy.
            </param>
            <returns>
            Attempting to perform an assignment to a property of a read-only
            <see cref="T:NationalInstruments.EngineeringFormatInfo"/> causes an
            <see cref="T:System.InvalidOperationException"/>.
            </returns>
            <lastupdated>11/14/2003 4:54:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.GetFormat(System.Type)">
            <summary>
            Gets an object of the specified type that provides a numeric formatting service.
            </summary>
            <param name="formatType">
            The <see cref="T:System.Type"/> of the required formatting service.
            </param>
            <returns>
            The current <see cref="T:NationalInstruments.EngineeringFormatInfo"/>, if <paramref name="formatType"/>
            is the same as the type of the current <see cref="T:NationalInstruments.EngineeringFormatInfo"/>;
            otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            The Format methods supported by the base types that accept an
            <see cref="T:System.IFormatProvider"/> parameter invoke this method when the current
            <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is passed as the
            <see cref="T:System.IFormatProvider"/> parameter.  This method implements
            <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/>.
            </remarks>
            <lastupdated>11/14/2003 4:54:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.Clone">
            <summary>
            Creates a copy of <see cref="T:NationalInstruments.EngineeringFormatInfo"/>.
            </summary>
            <returns>
            A new <see cref="T:NationalInstruments.EngineeringFormatInfo"/> copied from the original
            <see cref="T:NationalInstruments.EngineeringFormatInfo"/>.
            </returns>
            <remarks>
            The clone is writable even if the original <see cref="T:NationalInstruments.EngineeringFormatInfo"/>
            is read-only; therefore, the properties of the clone can be modified with user-defined settings.
            </remarks>
            <lastupdated>11/14/2003 4:52:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.TryParse(System.String,System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Converts the engineering string representation of a number to its double-precision floating-point number equivalent
            based on the format specified.
            </summary>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="s">
            The formatted string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> object that supplies format information about the
            current instance.
            </param>
            <param name="value">
            Upon return, contains the parsed value.
            </param>
            <returns>
                <see langword="true"/> if the string is parsed successfully.
            </returns>
            <remarks>
            Use this method to parse an engineering string representation of a value to obtain the actual value.
            <para>
            The format strings that you can use with <paramref name="format"/>
            are specified by the following format:
            </para>
                <para>
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Format</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>
            ee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5e+3.
            </description>
                        </item>
                        <item>
                            <term>
            EE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5E+3.
            </description>
                        </item>
                        <item>
                            <term>
            eee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5e+003.
            </description>
                        </item>
                        <item>
                            <term>
            EEE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5E+003.
            </description>
                        </item>
                        <item>
                            <term>
            ss
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with no space between the number and the prefix.
            For example, 5000 becomes 5kilo.
            </description>
                        </item>
                        <item>
                            <term>
            s
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with no space between the number and the symbol.
            For example, 5000 becomes 5k.
            </description>
                        </item>
                        <item>
                            <term>
            SS
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with a space between the number and the prefix.
            For example, 5000 becomes 5 kilo.
            </description>
                        </item>
                        <item>
                            <term>
            S
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with a space between the number and the symbol.
            For example, 5000 becomes 5 k.
            </description>
                        </item>
                    </list>
                    <para>
            For more information about how to format strings, refer to <see cref="T:NationalInstruments.EngineeringFormatInfo" crefType="Unqualified"/>.</para>
                </para>
            </remarks>
            <example>
                <para>The following example shows how to parse a string formatted with <format type="bold">S</format>.</para>
            <code lang="VB.NET">
            Dim s As String = "9.50"
            Dim x As Double
            Dim info As EngineeringFormatInfo = New EngineeringFormatInfo()
            Dim success As Boolean = info.TryParse("S", s, CultureInfo.CurrentCulture, x)
            </code>
            </example>
            <example>
            <code lang="C#">
            string s = "9.50";
            double x;
            EngineeringFormatInfo info = new EngineeringFormatInfo();
            bool success = info.TryParse("S", s, CultureInfo.CurrentCulture, out x);
            </code>
            </example>
            <lastupdated>12/17/2008 1:50:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.Parse(System.String,System.String)">
            <summary>
            Converts the engineering string representation of a number to its double-precision floating-point number equivalent
            based on the format specified.
            </summary>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="s">
            The formatted string to parse.
            </param>
            <returns>
            The parsed value.
            </returns>
            <remarks>
            Use this method to parse an engineering string representation of a value to obtain the actual value.
            <para>
            The format strings that you can use with <paramref name="format"/>
            are specified by the following format:
            </para>
                <para>
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Format</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>
            ee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5e+3.
            </description>
                        </item>
                        <item>
                            <term>
            EE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5E+3.
            </description>
                        </item>
                        <item>
                            <term>
            eee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5e+003.
            </description>
                        </item>
                        <item>
                            <term>
            EEE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5E+003.
            </description>
                        </item>
                        <item>
                            <term>
            ss
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with no space between the number and the prefix.
            For example, 5000 becomes 5kilo.
            </description>
                        </item>
                        <item>
                            <term>
            s
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with no space between the number and the symbol.
            For example, 5000 becomes 5k.
            </description>
                        </item>
                        <item>
                            <term>
            SS
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with a space between the number and the prefix.
            For example, 5000 becomes 5 kilo.
            </description>
                        </item>
                        <item>
                            <term>
            S
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with a space between the number and the symbol.
            For example, 5000 becomes 5 k.
            </description>
                        </item>
                    </list>
                    <para>
            For more information about how to format strings, refer to <see cref="T:NationalInstruments.EngineeringFormatInfo" crefType="Unqualified"/>.</para>
                </para>
            </remarks>
            <example>
                <para>The following example shows how to parse a string formatted with <format type="bold">S</format>.</para>
            <code lang="VB.NET">
            Dim s As String = "9.50"
            Dim info As EngineeringFormatInfo = New EngineeringFormatInfo()
            Dim x As Double = info.Parse("S", s)
            </code>
            </example>
            <example>
            <code lang="C#">
            string s = "9.50";
            EngineeringFormatInfo info = new EngineeringFormatInfo();
            double x = info.Parse("S", s);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="format"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="s"/> is <see langword="null"/></para>
            </exception>
            <exception cref="T:System.FormatException">
                <para><paramref name="format"/> is not a valid engineering format.</para>
                <para>-or-</para>
                <para>The format of <paramref name="s"/> does not match the format specified by <paramref name="format"/>.</para>
            </exception>
            <lastupdated>12/17/2008 1:36:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.Parse(System.String,System.String,System.IFormatProvider)">
            <summary>
            Converts the engineering string representation of a number to its double-precision floating-point number equivalent
            based on the specified format and format provider.
            </summary>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="s">
            The formatted string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> object that supplies format information about the
            current instance.
            </param>
            <returns>
            The parsed value.
            </returns>
            <remarks>
            Use this method to parse an engineering string representation of a value to obtain the actual value.
            <para>
            The format strings that you can use with <paramref name="format"/>
            are specified by the following format:
            </para>
                <para>
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Format</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>
            ee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5e+3.
            </description>
                        </item>
                        <item>
                            <term>
            EE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with as few characters as possible.  For example,
            5000 becomes 5E+3.
            </description>
                        </item>
                        <item>
                            <term>
            eee
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'e' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5e+003.
            </description>
                        </item>
                        <item>
                            <term>
            EEE
            </term>
                            <description>
            Formats the numeric value into engineering notation with an 'E' inserted between the number
            and the exponent, and the exponent formatted with three characters.  For example,
            5000 becomes 5E+003.
            </description>
                        </item>
                        <item>
                            <term>
            ss
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with no space between the number and the prefix.
            For example, 5000 becomes 5kilo.
            </description>
                        </item>
                        <item>
                            <term>
            s
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with no space between the number and the symbol.
            For example, 5000 becomes 5k.
            </description>
                        </item>
                        <item>
                            <term>
            SS
            </term>
                            <description>
            Formats the numeric value with an SI prefix, with a space between the number and the prefix.
            For example, 5000 becomes 5 kilo.
            </description>
                        </item>
                        <item>
                            <term>
            S
            </term>
                            <description>
            Formats the numeric value with an SI symbol, with a space between the number and the symbol.
            For example, 5000 becomes 5 k.
            </description>
                        </item>
                    </list>
                    <para>
            For more information about how to format strings, refer to <see cref="T:NationalInstruments.EngineeringFormatInfo" crefType="Unqualified"/>.</para>
                </para>
            </remarks>
            <example>
                <para>The following example shows how to parse a string formatted with <format type="bold">S</format>.</para>
            <code lang="VB.NET">
            Dim s As String = "9.50"
            Dim info As EngineeringFormatInfo = New EngineeringFormatInfo()
            Dim x As Double = info.Parse("S", s, CultureInfo.CurrentCulture)
            </code>
            </example>
            <example>
            <code lang="C#">
            string s = "9.50";
            EngineeringFormatInfo info = new EngineeringFormatInfo();
            double x = info.Parse("S", s, CultureInfo.CurrentCulture);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="format"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="s"/> is <see langword="null"/></para>
            </exception>
            <exception cref="T:System.FormatException">
                <para><paramref name="format"/> is not a valid engineering format.</para>
                <para>-or-</para>
                <para>The format of <paramref name="s"/> does not match the format specified by <paramref name="format"/>.</para>
            </exception>
            <lastupdated>12/17/2008 1:39:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EngineeringFormatInfo.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using
            specified formatting information.
            </summary>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="arg">
            An object to format.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> object that supplies format information about the
            current instance.
            </param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified
            by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <lastupdated>11/14/2003 4:53:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.IsReadOnly">
            <summary>
            Gets a value that indicates if <see cref="T:NationalInstruments.EngineeringFormatInfo"/>
            is read-only.
            </summary>
            <value>
                <see langword="true"/> if <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is
            read-only.
            </value>
            <lastupdated>11/14/2003 4:46:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.YottaPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">24</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">24</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:51:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.YottaSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">24</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">24</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:51:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.ZettaPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">21</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">21</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:52:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.ZettaSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">21</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">21</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:52:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.ExaPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">18</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">18</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:24:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.ExaSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">18</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">18</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:24:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.PetaPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">15</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">15</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:50:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.PetaSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">15</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">15</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:50:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.TeraPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">12</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">12</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:50:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.TeraSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">12</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">12</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:50:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.GigaPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">9</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">9</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:45:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.GigaSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">9</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">9</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:45:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.MegaPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">6</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">6</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:48:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.MegaSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">6</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">6</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:48:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.KiloPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript">3</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript">3</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:48:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.KiloSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript">3</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript">3</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:48:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.MilliPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>3</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>3</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:49:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.MilliSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>3</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>3</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:49:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.MicroPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>6</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>6</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:48:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.MicroSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>6</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>6</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:48:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.NanoPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>9</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>9</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:49:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.NanoSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>9</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>9</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:49:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.PicoPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>12</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>12</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:50:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.PicoSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>12</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>12</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:50:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.FemtoPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>15</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>15</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:25:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.FemtoSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>15</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>15</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:45:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.AttoPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>18</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>18</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:23:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.AttoSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>18</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>18</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:23:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.ZeptoPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>21</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>21</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:51:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.ZeptoSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>21</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>21</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:52:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.YoctoPrefix">
            <summary>
            Gets or sets the SI prefix string to use for 10<format type="superscript"><entity value="ndash"/>24</format>.
            </summary>
            <value>
            The SI prefix string that is displayed for 10<format type="superscript"><entity value="ndash"/>24</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:51:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.YoctoSymbol">
            <summary>
            Gets or sets the SI symbol string to use for 10<format type="superscript"><entity value="ndash"/>24</format>.
            </summary>
            <value>
            The SI symbol string that is displayed for 10<format type="superscript"><entity value="ndash"/>24</format>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The property is being set and <see cref="T:NationalInstruments.EngineeringFormatInfo"/> is read-only.
            </exception>
            <lastupdated>11/14/2003 4:51:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EngineeringFormatInfo.Default">
            <summary>
            Gets a read-only <see cref="T:NationalInstruments.EngineeringFormatInfo"/> whose properties are
            set to the default values.
            </summary>
            <value>
            A read-only <see cref="T:NationalInstruments.EngineeringFormatInfo"/> with all of its properties
            set to their default values.
            </value>
            <remarks>
            The <see cref="P:NationalInstruments.EngineeringFormatInfo.Default"/> property provides a
            convenient way to use <see cref="T:NationalInstruments.EngineeringFormatInfo"/> with base type
            Format methods that accept an <see cref="T:System.IFormatProvider"/> parameter, such as
            <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.  If you want to use <see cref="T:NationalInstruments.EngineeringFormatInfo"/>
            with all of its properties set to their default values and do not wish to customize any of
            the formatted values, you can pass <see cref="P:NationalInstruments.EngineeringFormatInfo.Default"/>
            as the <see cref="T:System.IFormatProvider"/> parameter value instead of creating a new <see cref="T:NationalInstruments.EngineeringFormatInfo"/>.
            </remarks>
            <lastupdated>7/26/2004 9:30:51 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.EnumObject">
            <summary>
            Provides the base class for enumeration-like objects that are based on extensible types.
            </summary>
            <threadsafety safety="safe"/>
            <remarks>
            An <see cref="T:NationalInstruments.EnumObject"/> is similar to an <see cref="T:System.Enum"/> in
            that it provides a fixed set of values that are valid for a specific type.  However, the
            underlying type of an <see cref="T:NationalInstruments.EnumObject"/> is an extensible type rather
            than an integral type, so you can define new values to create customized behavior.
            </remarks>
            <example>
            The following example demonstrates how to add the values of an
            <see cref="T:NationalInstruments.EnumObject"/>-derived type to a Windows Forms ComboBox.
            <code lang="VB.NET">
            ' The styles variable is a ComboBox control.  FillStyle is a type that
            ' derives from EnumObject.
            For Each style As FillStyle In EnumObject.GetValues(GetType(FillStyle))
                styles.Items.Add(style)
            Next
            </code>
            </example>
            <example>
            <code lang="C#">
            // The styles variable is a ComboBox control.  FillStyle is a type that
            // derives from EnumObject.
            foreach (FillStyle style in EnumObject.GetValues(typeof(FillStyle)))
                styles.Items.Add(style);
            </code>
            </example>
            <lastupdated>9/15/2005 5:30:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.EnumObject"/> class.
            </summary>
            <lastupdated>7/1/2003 11:45:02 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of the object.
            </returns>
            <lastupdated>6/7/2012 4:23:35 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj">
            An object to compare, or <see langword="null"/>.
            </param>
            <returns>
            <para>
            A signed number indicating the relative values of this instance and <paramref name="obj"/>.
            </para>
            <list type="table">
                <listheader>
                    <term>Return Value</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>Less than zero</term>
                    <description>This instance is less than <paramref name="obj"/>.</description>
                </item>
                <item>
                    <term>Zero</term>
                    <description>This instance is equal to <paramref name="obj"/>.</description>
                </item>
                <item>
                    <term>Greater than zero</term>
                    <description>
                        <para>This instance is greater than <paramref name="obj"/></para>
                        <para>-or-</para>
                        <para><paramref name="obj"/> is <see langword="null"/>.</para>
                    </description>
                </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="obj"/> is not an <see cref="T:NationalInstruments.EnumObject"/>.
            </exception>
            <lastupdated>7/1/2003 11:44:58 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.CompareParameters(NationalInstruments.EnumObject)">
            <inheritdoc cref="M:NationalInstruments.EnumObject.CompareTo(System.Object)"/>
            <summary>
            Compares the parameters on this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="other">The object to compare.</param>
            <lastupdated>6/7/2012 4:23:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            <lastupdated>2012-09-07 4:43:59 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            <lastupdated>2012-09-07 4:43:59 PM</lastupdated>
            <updatedby>Paul Hansen</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.GetNames(System.Type)">
            <summary>
            Gets an array of the names of the values in a specified <see cref="T:NationalInstruments.EnumObject"/>.
            </summary>
            <param name="type">
            An <see cref="T:NationalInstruments.EnumObject"/> type.
            </param>
            <returns>
            A string array of the names of the default values that are provided by the
            <see cref="T:NationalInstruments.EnumObject"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="type"/> is not an <see cref="T:NationalInstruments.EnumObject"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <lastupdated>7/1/2003 11:45:24 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.GetValues(System.Type)">
            <summary>
            Gets an array of the values in a specified <see cref="T:NationalInstruments.EnumObject"/>.
            </summary>
            <param name="type">
            An <see cref="T:NationalInstruments.EnumObject"/> type.
            </param>
            <returns>
            A <see cref="T:System.Array"/> of the default values that are provided by the
            <see cref="T:NationalInstruments.EnumObject"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="type"/> is not an <see cref="T:NationalInstruments.EnumObject"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <lastupdated>7/1/2003 11:45:34 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name to an equivalent <see cref="T:NationalInstruments.EnumObject"/> instance.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the <see cref="T:NationalInstruments.EnumObject"/>.
            </param>
            <param name="value">
            A string that contains the name to convert.
            </param>
            <returns>
            An object which has a type that is specified by <paramref name="type"/> and has a value that is represented
            by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="type"/> is not an <see cref="T:NationalInstruments.EnumObject"/>.
                </para>
                <para>-or-</para>
                <para>
                    <paramref name="value"/> is not one of the default values that is defined by the
                    <see cref="T:NationalInstruments.EnumObject"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <lastupdated>7/30/2007 5:01:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.EnumObject.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name to an equivalent <see cref="T:NationalInstruments.EnumObject"/> instance.
            You can specify if the operation is case-sensitive.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the <see cref="T:NationalInstruments.EnumObject"/>.
            </param>
            <param name="value">
            A string that contains the name to convert.
            </param>
            <param name="ignoreCase">
            Ignores case sensitivity if <see langword="true"/>.
            </param>
            <returns>
            An object which has a type that is specified by <paramref name="type"/> and has a value that is represented
            by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="type"/> is not an <see cref="T:NationalInstruments.EnumObject"/>.
                </para>
                <para>-or-</para>
                <para>
                    <paramref name="value"/> is not one of the default values that is defined by the
                    <see cref="T:NationalInstruments.EnumObject"/>.
                </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <lastupdated>7/30/2007 5:06:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EnumObject.UnderlyingType">
            <summary>
            Gets the underlying type of an <see cref="T:NationalInstruments.EnumObject"/> value.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that represents the underlying type of the value.
            </value>
            <lastupdated>7/1/2003 11:44:30 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.EnumObject.Name">
            <summary>
            Gets the name of an <see cref="T:NationalInstruments.EnumObject"/> value.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the value.
            </value>
            <lastupdated>7/1/2003 11:44:27 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.EnumObject.EnumObjectMemberContainer">
            <exclude/>
            <summary>Represents a collection of members on an EnumObject type.</summary>
        </member>
        <member name="T:NationalInstruments.EnumObject.EnumObjectMember">
            <exclude/>
            <summary>Represents a member on an EnumObject type.</summary>
        </member>
        <member name="T:NationalInstruments.EnumObject.ParameterlessMember">
            <exclude/>
            <summary>Represents a parameterless member on an EnumObject type, accessed through a static property or field.</summary>
        </member>
        <member name="T:NationalInstruments.EnumObject.ParameterizedMember">
            <exclude/>
            <summary>Represents a parameterized member on an EnumObject type, accessed through a static creation method.</summary>
        </member>
        <member name="T:NationalInstruments.EventSynchronizationCallback`1">
            <summary>
            Represents a method that is called to raise an event.
            </summary>
            <typeparam name="TEventArgs">
            An <see cref="T:System.EventArgs"/>-derived type that specifies the type of the arguments
            of the event.
            </typeparam>
            <param name="e">
            The event arguments to use to raise the event.
            </param>
            <remarks>
            Use <see cref="T:NationalInstruments.EventSynchronizationCallback`1"/>
            with
            <see cref="M:NationalInstruments.ComponentBase.RaiseGenericEvent``1(System.Object,``0)"/>
            and
            <see cref="M:NationalInstruments.ComponentBase.RaiseGenericEventAsync``1(System.Object,``0)"/>
            to marshal a call to a method that raises an event through a specified
            synchronization context.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>6/2/2006 11:33:57 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.ExtendedPropertyDictionary">
            <summary>
            Represents a dictionary of extended properties.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Represents a dictionary of extended properties.
            </remarks>
            <lastupdated>6/11/2012 12:50:06 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/>.
            </summary>
            <lastupdated>9/16/2005 10:34:05 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/> with the specified info and context.
            </summary>
            <param name="info">
            The data needed to serialize or deserialize an object.
            </param>
            <param name="context">
            The source and destination of a given serialized stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/16/2005 10:34:47 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the data needed to serialize the <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the
            <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/>.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/16/2005 10:35:47 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.Clear">
            <summary>
            Removes all elements from the extended properties.
            </summary>
            <lastupdated>9/16/2005 10:32:32 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> that iterates through the extended properties.
            </summary>
            <returns>
            an <see cref="T:System.Collections.IDictionaryEnumerator"/> for the extended properties.
            </returns>
            <lastupdated>9/16/2005 10:34:33 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element with the specified key and value to the extended properties.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key of the element to add.
            </param>
            <param name="value">
            The value of the element to add. The value can be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same <paramref name="key"/> already exists in the extended properties.
            </exception>
            <lastupdated>9/16/2005 10:32:16 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.Contains(System.String)">
            <summary>
            Determines whether the extended properties contains the specific key.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key to locate in the extended properties.
            </param>
            <returns>
                <see langword="true"/> if the extended properties contains an element with the specified <paramref name="key"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/16/2005 10:33:13 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the extended properties.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key of the element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/16/2005 10:35:56 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.Clone">
            <summary>
            Creates a shallow copy of the extended properties.
            </summary>
            <returns>
            A shallow copy of the extended properties.
            </returns>
            <lastupdated>9/16/2005 10:32:35 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#ICloneable#Clone">
            <exclude/>
            <lastupdated>1/23/2009 4:20:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>1/23/2009 4:20:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the extended properties.
            </summary>
            <value>
            The number of key-and-value pairs contained in the extended properties.
            </value>
            <lastupdated>9/16/2005 10:29:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">
            The <see cref="T:System.String"/> key value.
            </param>
            <value>
            The <see cref="T:System.Object"/> value associated with <paramref name="key"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is <see langword="null"/>.
            </exception>
            <lastupdated>9/16/2005 10:31:49 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#Item(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the keys of the extended properties.
            </summary>
            <value>
            An <see cref="T:System.Collections.ICollection"/> containing the keys of the extended properties.
            </value>
            <lastupdated>9/16/2005 10:29:20 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values of the extended properties.
            </summary>
            <value>
            An <see cref="T:System.Collections.ICollection"/> containing the values of the extended properties.
            </value>
            <lastupdated>9/15/2005 5:43:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 4:20:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 4:20:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#IsFixedSize">
            <exclude/>
            <lastupdated>1/23/2009 4:20:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.ExtendedPropertyDictionary.System#Collections#IDictionary#IsReadOnly">
            <exclude/>
            <lastupdated>1/23/2009 4:20:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.PrecisionDateTime">
            <summary>
            Represents an instance in time, typically expressed as a date and time of day.
            This type has higher precision than <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
              <para>
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> value type represents
            dates and times with values starting at 12:00:00 midnight, January 1, 0001.
            The value of a <see cref="T:NationalInstruments.PrecisionDateTime"/> is the number of
            whole seconds and fractional second ticks that represent the time since 12:00:00
            midnight, January 1, 0001.  <see cref="P:NationalInstruments.PrecisionDateTime.WholeSeconds"/>
            is a 64-bit number that represents the number of whole seconds
            in the <see cref="T:NationalInstruments.PrecisionDateTime"/> without a fractional portion.
            <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>
            is a 64-bit number that represents the number of 2^(-64) seconds
            after the whole seconds. Each fractional second tick represents 0.05421010862427522170...
            attoseconds. Use <see cref="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks"/>
            to convert <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/> to
            its fractional seconds equivalent or use the <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSeconds"/>
            property. When using the <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSeconds"/>
            property or converting <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>
            to fractional seconds, some rounding errors may occur.
              </para>
              <para>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> object can be created from a
            <see cref="T:System.DateTime"/> object using <see cref="M:NationalInstruments.PrecisionDateTime.FromDateTime(System.DateTime)"/>
            and can be converted to a <see cref="T:System.DateTime"/> object using
            <see cref="M:NationalInstruments.PrecisionDateTime.ToDateTime"/>. Some precision may be lost when converting a
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object to a <see cref="T:System.DateTime"/>
            object because a <see cref="T:System.DateTime"/> object is only accurate to the nearest
            100-nanosecond tick, while a <see cref="T:NationalInstruments.PrecisionDateTime"/> object is accurate
            to the nearest 2^(-64) second.
            </para>
              <para>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> value can be expressed as a local time,
            a Coordinated Universal Time (UTC), or neither, specified by the
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property.  UTC time is the
            name for Greenwich Mean Time (GMT), which is measured at zero degrees longitude, the
            UTC origin point.  Local time is relative to a particular time zone.  A time zone is associated
            with a time zone offset, which is the displacement of the time zone measured in hours from
            the UTC origin point.  Local time is adjusted by daylight saving time if necessary, while UTC
            time is not.  For more information about UTC time and local time, see
            <see cref="T:System.DateTime"/>.
            </para>
              <para>
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> and
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value types differ in that a
            <see cref="T:NationalInstruments.PrecisionDateTime"/> represents an instance in time,
            whereas a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> represents a time interval.
            This means, for example, that you can subtract one instance of
            <see cref="T:NationalInstruments.PrecisionDateTime"/> from another to obtain the time
            interval between them. Or you could add a positive
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to the current
            <see cref="T:NationalInstruments.PrecisionDateTime"/> to calculate a future date.
            </para>
              <para>
            Use the <see cref="M:NationalInstruments.PrecisionDateTime.Parse(System.String)"/>, <see cref="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,NationalInstruments.PrecisionDateTime@)"/>,
            and <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> methods for formatting time values.
            <see cref="T:NationalInstruments.PrecisionDateTime"/> calls these methods on a
            <see cref="T:System.DateTime"/> object, so some precision may be lost.
            </para>
              <para>
            This type implements interfaces <see cref="T:System.Runtime.Serialization.ISerializable"/>,
            <see cref="T:System.IComparable"/>, <see cref="T:System.IComparable`1"/>,
            <see cref="T:System.IFormattable"/>, <see cref="T:System.IConvertible"/>, and
            <see cref="T:System.IEquatable`1"/>.
            </para>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>10/4/2006 9:38:25 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks">
            <summary>
            Represents the number of seconds for each fractional second tick. This field is read-only.
            </summary>
            <remarks>
              <para>
            The value of this constant is 2^(-64).
            Fractional seconds are stored as <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>.
            Use this field to convert between <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>
            and <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSeconds"/>.
            </para>
            </remarks>
            <lastupdated>10/4/2006 9:38:54 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure with the specified whole seconds and fractional second ticks.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
            <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. This value cannot be
            less than zero.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wholeSeconds"/> is less than zero.
            </exception>
            <remarks>
              <para>
            The <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.
            </para>
            </remarks>
            <lastupdated>10/4/2006 2:11:22 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.UInt64,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure with the specified whole seconds and fractional second ticks, expressed as
            either a local time, a UTC time, or neither.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
            <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. This value cannot be
            less than zero.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wholeSeconds"/> is less than zero.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <remarks>
              <para>
            The <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is initialized to
            the value of the <paramref name="kind"/> parameter.
            </para>
            </remarks>
            <lastupdated>10/4/2006 10:56:58 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure with the specified whole seconds and fractional second ticks.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
            <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. Values less than zero are wrapped around
            as per .NET rules for casting <see cref="T:System.Int64"/> to <see cref="T:System.UInt64"/>.
            For instance, -1 becomes  <see cref="F:System.UInt64.MaxValue"/>.
            </param>
            <remarks>
            <para>
            The <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.
            </para>
            <para>
            This constructor is provided for CLS compliance. The
            <see cref="T:NationalInstruments.PrecisionDateTime"/> constructor is preferred for
            any <paramref name="fractionalSecondTicks"/> over <see cref="F:System.Int64.MaxValue"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wholeSeconds"/> is less than zero.
            </exception>
            <lastupdated>8/26/2014 4:22:04 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Int64,System.Int64,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure with the specified whole seconds and fractional second ticks, expressed as
            either a local time, a UTC time, or neither.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 0001.
            This value cannot be less than zero.
            </param>
            <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed since midnight, January 1, 0001. Values less than zero are wrapped around
            as per .NET rules for casting <see cref="T:System.Int64"/> to <see cref="T:System.UInt64"/>.
            For instance, -1 becomes  <see cref="F:System.UInt64.MaxValue"/>.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <remarks>
            <para>
            The <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is initialized to
            the value of the <paramref name="kind"/> parameter.
            </para>
            <para>
            This constructor is provided for CLS compliance. The
            <see cref="T:NationalInstruments.PrecisionDateTime"/> constructor is preferred for
            any <paramref name="fractionalSecondTicks"/> over <see cref="F:System.Int64.MaxValue"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="wholeSeconds"/> is less than zero.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <lastupdated>8/26/2014 4:21:06 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure to the specified date and time represented by a
            <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">
            A <see cref="T:System.DateTime"/> which represents the date and time information to
            initialize the <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <remarks>
            A <see cref="T:System.DateTime"/> stores timing information in 100-nanosecond ticks.
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> stores timing information
            in whole seconds and fractional second ticks (2^(-64) seconds).  The date and time
            represented by the <paramref name="dateTime"/> parameter is converted to whole
            seconds and fractional second ticks in the new <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Therefore, some rounding errors may occur.
            </remarks>
            <lastupdated>10/4/2006 10:54:01 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure with the specified number of seconds.
            </summary>
            <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 0001. This value
            must be less than or equal to <see cref="F:System.Int64.MaxValue"/> and cannot be less
            than zero.
            </param>
            <remarks>
              <para>
            The <paramref name="seconds"/> parameter represents whole and fractional seconds. Since
            <see cref="T:NationalInstruments.PrecisionDateTime"/> stores fractional seconds as
            fractional second ticks (2^(-64) seconds), some rounding may occur when initializing
            the new <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </para>
              <para>
            The <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="seconds"/> is <see cref="F:System.Double.NaN"/>.</para>
              <para>-or-</para>
              <para><paramref name="seconds"/> is greater than <see cref="F:System.Int64.MaxValue"/> or less than zero.</para>
            </exception>
            <lastupdated>10/4/2006 2:09:43 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.#ctor(System.Double,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            structure with the specified number of seconds expressed as either a local time,
            a UTC time, or neither.
            </summary>
            <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 0001. This value
            must be less than or equal to <see cref="F:System.Int64.MaxValue"/> and cannot be less
            than zero.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <remarks>
              <para>
            The <paramref name="seconds"/> parameter represents whole and fractional seconds. Since
            <see cref="T:NationalInstruments.PrecisionDateTime"/> stores fractional seconds as
            fractional second ticks (2^(-64) seconds), some rounding may occur when initializing
            the new <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </para>
              <para>
            The <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is initialized to
            the value of the <paramref name="kind"/> parameter.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="seconds"/> is <see cref="F:System.Double.NaN"/>.</para>
              <para>-or-</para>
              <para><paramref name="seconds"/> is greater than <see cref="F:System.Int64.MaxValue"/> or less than zero.</para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <lastupdated>10/4/2006 2:08:23 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.UInt64)">
            <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time
            to an equivalent local time.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds represented by the LabVIEW time.
            </param>
            <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds represented by the LabVIEW time.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that represents a local
            time that is equivalent to the date and time represented by the LabVIEW whole
            seconds and fractional second ticks.
            </returns>
            <remarks>
              <para>
            A LabVIEW time represents the elapsed time since 01/01/1904 00:00:00.00. This
            method converts the <paramref name="wholeSeconds"/> and <paramref name="fractionalSecondTicks"/>
            to a <see cref="T:NationalInstruments.PrecisionDateTime"/>, which represents the
            time that has elapsed since 01/01/0001 00:00:00.00.
            </para>
              <para>
            The return value is a <see cref="T:NationalInstruments.PrecisionDateTime"/> whose
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property returns <see cref="F:System.DateTimeKind.Local"/>.
            </para>
              <note type="note">
            LabVIEW time stamps are expressed in Coordinated Universal Time (UTC). For compatibility with LabVIEW,
            use the overload that takes a <see cref="T:System.DateTimeKind" crefType="Unqualified"/> as a parameter and
            pass in <see cref="F:System.DateTimeKind.Utc" crefType="Unqualified"/>.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <lastupdated>10/19/2009 4:34:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.UInt64,System.DateTimeKind)">
            <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time
            to an equivalent local time, UTC time, or neither.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            This value cannot be less than zero.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that is
            equivalent to the date and time specified by <paramref name="wholeSeconds"/> and
            <paramref name="fractionalSecondTicks"/> and which is expressed as either a
            local time, a UTC time, or neither.
            </returns>
            <remarks>
            <para>
            A LabVIEW time represents the elapsed time since 01/01/1904 00:00:00.00. This
            method converts the <paramref name="wholeSeconds"/> and <paramref name="fractionalSecondTicks"/>
            to a <see cref="T:NationalInstruments.PrecisionDateTime"/>, which represents the
            time that has elapsed since 01/01/0001 00:00:00.00.
            </para>
            <note type="note">
            LabVIEW time stamps are expressed in Coordinated Universal Time (UTC). For compatibility with
            LabVIEW, pass in <see cref="F:System.DateTimeKind.Utc" crefType="Unqualified"/> for the
            <paramref name="kind"/> parameter.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <lastupdated>11/14/2013 9:52:22 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.Int64)">
            <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time
            to an equivalent local time.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            This value cannot be less than zero.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that represents a local
            time that is equivalent to the date and time represented by the LabVIEW whole
            seconds and fractional second ticks.
            </returns>
            <remarks>
              <para>
            A LabVIEW time represents the elapsed time since 01/01/1904 00:00:00.00. This
            method converts the <paramref name="wholeSeconds"/> and <paramref name="fractionalSecondTicks"/>
            to a <see cref="T:NationalInstruments.PrecisionDateTime"/>, which represents the
            time that has elapsed since 01/01/0001 00:00:00.00.
            </para>
              <para>
            The return value is a <see cref="T:NationalInstruments.PrecisionDateTime"/> whose
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property returns <see cref="F:System.DateTimeKind.Local"/>.
            </para>
              <para>
            This method is provided for CLS compliance. The overload which takes a
            <format type="bold">ulong</format>
            for the fractional second ticks provides more precision.
            </para>
              <note type="note">
            LabVIEW time stamps are expressed in Coordinated Universal Time (UTC). For compatibility with LabVIEW,
            use the overload that takes a <see cref="T:System.DateTimeKind" crefType="Unqualified"/> as a parameter and
            pass in <see cref="F:System.DateTimeKind.Utc" crefType="Unqualified"/>.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="fractionalSecondTicks"/> is less than zero.</para>
              <para>-or-</para>
              <para>
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </para>
            </exception>
            <lastupdated>10/19/2009 4:34:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromLabViewTime(System.Int64,System.Int64,System.DateTimeKind)">
            <summary>
            Converts the whole seconds and fractional second ticks of a LabVIEW time
            to an equivalent local time, UTC time, or neither.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <param name="fractionalSecondTicks">
            The number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            This value cannot be less than zero.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that is
            equivalent to the date and time specified by <paramref name="wholeSeconds"/> and
            <paramref name="fractionalSecondTicks"/> and which is expressed as either a
            local time, a UTC time, or neither.
            </returns>
            <remarks>
              <para>
            A LabVIEW time represents the elapsed time since 01/01/1904 00:00:00.00. This
            method converts the <paramref name="wholeSeconds"/> and <paramref name="fractionalSecondTicks"/>
            to a <see cref="T:NationalInstruments.PrecisionDateTime"/>, which represents the
            time that has elapsed since 01/01/0001 00:00:00.00.
            </para>
              <para>
            This method is provided for CLS compliance. The overload which takes a
            <format type="bold">ulong</format>
            for the fractional second ticks provides more precision.
            </para>
              <note type="note">
            LabVIEW time stamps are expressed in Coordinated Universal Time (UTC). For compatibility with
            LabVIEW, pass in <see cref="F:System.DateTimeKind.Utc" crefType="Unqualified"/> for the
            <paramref name="kind"/> parameter.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para><paramref name="fractionalSecondTicks"/> is less than zero.</para>
              <para>-or-</para>
              <para>
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <lastupdated>10/19/2009 4:34:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromFileTime(System.Int64)">
            <summary>
            Converts the specified Windows file time to an equivalent local time.
            </summary>
            <param name="fileTime">
            A Windows file time expressed in ticks.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that represents a local
            time equivalent to the date and time represented by the <paramref name="fileTime"/>
            parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="fileTime"/> represents a time less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater
            than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that
            have elapsed since 12:00 midnight, January 1, 1601 Coordinated Universal Time (UTC).
            Windows uses a file time to record when an application creates, accesses, or writes to a file.
            </para>
              <para>
            The <paramref name="fileTime"/> parameter specifies a file time expressed in 100-nanosecond
            ticks. This value is converted to whole seconds and fractional second ticks (2^(-64) seconds)
            in the resulting <see cref="T:NationalInstruments.PrecisionDateTime"/>;
            rounding errors may occur.
            </para>
              <para>
            The return value is a <see cref="T:NationalInstruments.PrecisionDateTime"/> whose
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property returns <see cref="F:System.DateTimeKind.Local"/>.
            </para>
            </remarks>
            <lastupdated>10/4/2006 10:14:52 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromFileTime(System.Int64,System.DateTimeKind)">
            <summary>
            Converts the specified Windows file time to an equivalent local time, UTC time,
            or neither.
            </summary>
            <param name="fileTime">
            A Windows file time expressed in ticks.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that is
            equivalent to the date and time specified by <paramref name="fileTime"/> and
            which is expressed as either a local time, a UTC time, or neither.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="fileTime"/> represents a time less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater
            than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <remarks>
              <para>
            A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that
            have elapsed since 12:00 midnight, January 1, 1601, Coordinated Universal Time (UTC).
            Windows uses a file time to record when an application creates, accesses, or writes to a file.
            </para>
              <para>
            The <paramref name="fileTime"/> parameter specifies a file time expressed in 100-nanosecond
            ticks. This value is converted to whole seconds and fractional second ticks (2^(-64) seconds)
            in the resulting <see cref="T:NationalInstruments.PrecisionDateTime"/>;
            rounding errors may occur.
            </para>
            </remarks>
            <lastupdated>10/4/2006 10:35:23 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromCTime(System.Int64)">
            <summary>
            Converts the specified ANSI C time to an equivalent local time.
            </summary>
            <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 1970.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that represents a local time specified
            by <paramref name="seconds"/>.
            </returns>
            <remarks>
              <para>
            ANSI C library timing functions can return the time in terms of seconds since midnight, January 1, 1970.
            Use <see cref="M:NationalInstruments.PrecisionDateTime.FromCTime(System.Int64)"/> to convert this value
            to a <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </para>
              <para>
            The return value is a <see cref="T:NationalInstruments.PrecisionDateTime"/> whose
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property returns <see cref="F:System.DateTimeKind.Local"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="seconds"/> represents a time less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <lastupdated>10/4/2006 10:12:39 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromCTime(System.Int64,System.DateTimeKind)">
            <summary>
            Converts the specified ANSI C time to the equivalent local time,
            UTC time, or neither.
            </summary>
            <param name="seconds">
            The number of seconds that have elapsed since midnight, January 1, 1970.
            </param>
            <param name="kind">
            A <see cref="T:System.DateTimeKind"/> value which specifies whether the time is expressed
            as a local time, a UTC time, or neither.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that is
            equivalent to the date and time specified by <paramref name="seconds"/> and
            which is expressed as either a local time, a UTC time, or neither.
            </returns>
            <remarks>
              <para>
            ANSI C library timing functions can return the time in terms of seconds since midnight,
            January 1, 1970. Use <see cref="M:NationalInstruments.PrecisionDateTime.FromCTime(System.Int64)"/>
            to convert this value to a <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="seconds"/> represents a time less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
              <paramref name="kind"/> is not a valid <see cref="T:System.DateTimeKind"/> value.
            </exception>
            <lastupdated>10/4/2006 10:13:24 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.FromDateTime(System.DateTime)">
            <summary>
            Returns a new <see cref="T:NationalInstruments.PrecisionDateTime"/> instance that
            represents the date and time specified by a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">
            A <see cref="T:System.DateTime"/> which represents the date and time information to
            initialize the new <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that represents the
            date and time specified by <paramref name="dateTime"/>.
            </returns>
            <remarks>
            A <see cref="T:System.DateTime"/> stores timing information in 100-nanosecond ticks.
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> stores timing information
            in whole seconds and fractional second ticks (2^(-64) seconds).  The date and time
            represented by the <paramref name="dateTime"/> parameter is converted to whole
            seconds and fractional second ticks in the new <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Therefore, some rounding errors may occur.
            </remarks>
            <lastupdated>10/4/2006 10:14:02 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToLabViewTime(System.Int64@,System.Int64@)">
            <summary>
            Converts the whole seconds and fractional second ticks of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            to an equivalent LabVIEW time.
            </summary>
            <param name="wholeSeconds">
            Upon return, contains the number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <param name="fractionalSecondTicks">
            Upon return, contains the number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <remarks>
              <para>
            A LabVIEW time represents the elapsed time since 01/01/1904 00:00:00.00. This
            method converts the <see cref="T:NationalInstruments.PrecisionDateTime"/> which represents
            the time that has elapsed since 01/01/0001 00:00:00.00 to the
            <paramref name="wholeSeconds"/> and <paramref name="fractionalSecondTicks"/>
            which represent a LabVIEW time.
            </para>
              <para>
            This method is provided for CLS compliance. The overload which takes a
            <format type="bold">ulong</format>
            for the fractional second ticks provides more precision.
            </para>
              <note type="note">
            LabVIEW time stamps are expressed in Coordinated Universal Time (UTC). If this
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> is expressed
            in local time, convert it to UTC using <see cref="M:NationalInstruments.PrecisionDateTime.ToUniversalTime" crefType="Unqualified"/>
            before calling this method for compatibility with LabVIEW.
            </note>
            </remarks>
            <lastupdated>10/19/2009 4:34:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToLabViewTime(System.Int64@,System.UInt64@)">
            <summary>
            Converts the whole seconds and fractional second ticks of the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            to an equivalent LabVIEW time.
            </summary>
            <param name="wholeSeconds">
            Upon return, contains the number of whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <param name="fractionalSecondTicks">
            Upon return, contains the number of 2^(-64) seconds after the whole seconds that have elapsed since midnight, January 1, 1904.
            </param>
            <remarks>
              <para>
            A LabVIEW time represents the elapsed time since 01/01/1904 00:00:00.00. This
            method converts the <see cref="T:NationalInstruments.PrecisionDateTime"/> which represents
            the time that has elapsed since 01/01/0001 00:00:00.00 to the
            <paramref name="wholeSeconds"/> and <paramref name="fractionalSecondTicks"/>
            which represent a LabVIEW time.
            </para>
              <note type="note">
            LabVIEW time stamps are expressed in Coordinated Universal Time (UTC). If this
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> is expressed
            in local time, convert it to UTC using <see cref="M:NationalInstruments.PrecisionDateTime.ToUniversalTime" crefType="Unqualified"/>
            before calling this method for compatibility with LabVIEW.
            </note>
            </remarks>
            <lastupdated>10/19/2009 4:34:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToFileTime">
            <summary>
            Converts the <see cref="T:NationalInstruments.PrecisionDateTime"/> to an equivalent local Windows file time.
            </summary>
            <returns>
            An <see cref="T:System.Int64"/> that represents a Windows file time expressed in ticks.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The resulting number of ticks is greater than <see cref="F:System.Int64.MaxValue"/>.
            </exception>
            <remarks>
            <para>
            A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that
            have elapsed since 12:00 midnight, January 1, 1601.
            Windows uses a file time to record when an application creates, accesses, or writes to a file.
            </para>
            The return value represents a Windows file time expressed in 100-nanosecond
            ticks.
            <note type="note">
            Using <see cref="M:NationalInstruments.PrecisionDateTime.ToFileTime"/> can
            result in a loss of precision.
            </note>
            </remarks>
            <lastupdated>8/27/2014 10:58:48 AM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToCTime">
            <summary>
            Converts the <see cref="T:NationalInstruments.PrecisionDateTime"/> to an equivalent ANSI C time.
            </summary>
            <returns>
            An <see cref="T:System.Int64"/> that represents the number of seconds that have elapsed since midnight,
            January 1, 1970.
            </returns>
            <remarks>
            ANSI C library timing functions return the time in terms of seconds since midnight, January 1, 1970.
            Use <see cref="M:NationalInstruments.PrecisionDateTime.ToCTime"/> to convert this
            <see cref="T:NationalInstruments.PrecisionDateTime"/> to an equivalent ANSI C time.
            <note type="note">
            Using
            <see cref="M:NationalInstruments.PrecisionDateTime.ToCTime"/> can result in a loss of precision.
            </note>
            </remarks>
            <lastupdated>2/13/2008 4:18:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToDateTime">
            <summary>
            Converts the current <see cref="T:NationalInstruments.PrecisionDateTime"/> to a
            <see cref="T:System.DateTime"/> object.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> object which represents the date and time of
            the current <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </returns>
            <remarks>
              <para>
            Since the <see cref="T:NationalInstruments.PrecisionDateTime"/> structure has a higher
            precision than <see cref="T:System.DateTime"/>, some precision may be lost
            when performing this conversion.
            </para>
            </remarks>
            <lastupdated>10/4/2006 10:57:42 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToLocalTime">
            <summary>
            Converts the value of the current <see cref="T:NationalInstruments.PrecisionDateTime"/>
            object to local time.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> object whose
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is
            <see cref="F:System.DateTimeKind.Local"/> and whose value is the local
            time equivalent to the value of the current
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object, or
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/> if the
            converted value is too large to be represented by a
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object, or
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> if the
            converted value is too small to be represented as a
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object.
            </returns>
            <remarks>
              <para>
            The local time is equal to the UTC time plus the UTC offset. For more information
            about the UTC offset, see <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)"/>. The
            conversion also takes into account the daylight saving time rule that applies
            to the time represented by the current <see cref="T:NationalInstruments.PrecisionDateTime"/>
            object.
            </para>
              <para>
            The value returned by the <see cref="M:NationalInstruments.PrecisionDateTime.ToLocalTime"/>
            method is determined by the <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/>
            property of the current <see cref="T:NationalInstruments.PrecisionDateTime"/> object.
            The following table describes the possible results.
            </para>
            <list type="table">
              <listheader>
                <term>Kind</term>
                <description>Results</description>
              </listheader>
              <item>
                <term><see cref="F:System.DateTimeKind.Utc"/></term>
                <description>The current <see cref="T:NationalInstruments.PrecisionDateTime"/> object is converted to local time.</description>
              </item>
              <item>
                <term><see cref="F:System.DateTimeKind.Local"/></term>
                <description>No conversion is performed.</description>
              </item>
              <item>
                <term><see cref="F:System.DateTimeKind.Unspecified"/></term>
                <description>
                  The current <see cref="T:NationalInstruments.PrecisionDateTime"/> object is assumed to be a UTC time,
                  and the conversion is performed as if <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> were <see cref="F:System.DateTimeKind.Utc"/>.
                </description>
              </item>
            </list>
              <para>
            The value returned by the conversion is a <see cref="T:NationalInstruments.PrecisionDateTime"/>
            whose <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property returns
            <see cref="F:System.DateTimeKind.Local"/>. Consequently, a valid result is returned
            even if <see cref="M:NationalInstruments.PrecisionDateTime.ToUniversalTime"/> is applied
            repeatedly to the same <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </para>
              <para>
            This method always uses the local time zone when making calculations.
            </para>
            </remarks>
            <lastupdated>10/12/2006 12:19:08 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToUniversalTime">
            <summary>
            Converts the value of the current <see cref="T:NationalInstruments.PrecisionDateTime"/>
            object to Coordinated Universal Time (UTC).
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> object whose
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property is
            <see cref="F:System.DateTimeKind.Utc"/> and whose value is the UTC
            equivalent to the value of the current
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object, or
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/> if the
            converted value is too large to be represented by a
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object, or
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> if the
            converted value is too small to be represented as a
            <see cref="T:NationalInstruments.PrecisionDateTime"/> object.
            </returns>
            <remarks>
              <para>
            The UTC time is equal to the local time minus the UTC offset. For more information
            about the UTC offset, see <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)"/>. The
            conversion also takes into account the daylight saving time rule that applies
            to the time represented by the current <see cref="T:NationalInstruments.PrecisionDateTime"/>
            object.
            </para>
              <para>
            The value returned by the <see cref="M:NationalInstruments.PrecisionDateTime.ToLocalTime"/>
            method is determined by the <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/>
            property of the current <see cref="T:NationalInstruments.PrecisionDateTime"/> object.
            The following table describes the possible results.
            </para>
            <list type="table">
              <listheader>
                <term>Kind</term>
                <description>Results</description>
              </listheader>
              <item>
                <term><see cref="F:System.DateTimeKind.Utc"/></term>
                <description>No conversion is performed.</description>
              </item>
              <item>
                <term><see cref="F:System.DateTimeKind.Local"/></term>
                <description>The current <see cref="T:NationalInstruments.PrecisionDateTime"/> object is converted to UTC.</description>
              </item>
              <item>
                <term><see cref="F:System.DateTimeKind.Unspecified"/></term>
                <description>
                  The current <see cref="T:NationalInstruments.PrecisionDateTime"/> object is assumed to be a local time,
                  and the conversion is performed as if <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> were <see cref="F:System.DateTimeKind.Local"/>.
                </description>
              </item>
            </list>
              <para>
            The value returned by the conversion is a <see cref="T:NationalInstruments.PrecisionDateTime"/>
            whose <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/> property always returns
            <see cref="F:System.DateTimeKind.Utc"/>. Consequently, a valid result is returned
            even if <see cref="M:NationalInstruments.PrecisionDateTime.ToLocalTime"/> is applied
            repeatedly to the same <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </para>
              <para>
            This method always uses the local time zone when making calculations.
            </para>
            </remarks>
            <lastupdated>10/12/2006 12:19:31 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToDateTimeKind(System.DateTimeKind,System.TimeZoneInfo)">
            <exclude/>
            <summary>--- INTERNAL FOR TESTING ---</summary>
        </member>
        <member name="F:NationalInstruments.PrecisionDateTime.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:NationalInstruments.PrecisionDateTime"/>. This field is read-only.
            </summary>
            <lastupdated>10/4/2006 9:38:32 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionDateTime.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:NationalInstruments.PrecisionDateTime"/>. This field is read-only.
            </summary>
            <lastupdated>10/4/2006 9:38:39 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="year">
            The year.
            </param>
            <param name="month">
            The month (a number ranging from 1 to 12).
            </param>
            <returns>
            The number of days in <paramref name="month"/> for the specified <paramref name="year"/>. For example, if
            <paramref name="month"/> equals 2 for February, the return value is 28 or 29 depending upon whether
            <paramref name="year"/> is a leap year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="month"/> is less than 1 or greater than 12.</para>
                <para>-or-</para>
                <para><paramref name="year"/> is less than 1.</para>
            </exception>
            <lastupdated>11/20/2013 1:39:50 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddYears(System.Int32)">
            <summary>
            Adds the specified number of years  to the value of this instance.
            </summary>
            <param name="value">
            A number of years. The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by this instance and
            the number of years represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 10:08:33 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddMonths(System.Int32)">
            <summary>
            Adds the specified number of months to the value of this instance.
            </summary>
            <param name="value">
            A number of months. The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by this instance and <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </para>
              <para>-or-</para>
              <para><paramref name="value"/> is less than -120,000 or greater than 120,000.</para>
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 10:07:20 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddDays(System.Double)">
            <summary>
            Adds the specified number of days to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional days.  The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by this
            instance and the number of days represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
              <para>
            The fractional part of <paramref name="value"/> is the fractional part of a day.
            For example, 4.5 is equivalent to 4 days, 12 hours, 0 minutes, 0 seconds,
            and 0 milliseconds.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/7/2012 4:28:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddHours(System.Double)">
            <summary>
            Adds the specified number of hours to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional hours. The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
              <para>
            The fractional part of <paramref name="value"/> is the fractional part of an hour.
            For example, 4.5 is equivalent to 4 hours, 30 minutes, 0 seconds,
            and 0 milliseconds.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/7/2012 4:28:44 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddMinutes(System.Double)">
            <summary>
            Adds the specified number of minutes to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional minutes. The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
              <para>
            The fractional part of <paramref name="value"/> is the fractional part of a minute.
            For example, 4.5 is equivalent to 4 minutes, 30 seconds,
            and 0 milliseconds.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/7/2012 4:29:46 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddSeconds(System.Double)">
            <summary>
            Adds the specified number of seconds  to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional seconds. The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by this instance
            and the number of seconds represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
              <para>
            The fractional part of <paramref name="value"/> is the fractional part of a second.
            For example, 4.5 is equivalent to 4 seconds
            and 500 milliseconds.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/7/2012 4:30:12 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.AddMilliseconds(System.Double)">
            <summary>
            Adds the specified number of milliseconds to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional milliseconds. The <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time represented by
            this instance and the number of milliseconds represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </para>
              <para>
            The fractional part of <paramref name="value"/> is the fractional part of a millisecond.
            For example, 4.5 is equivalent to 4 milliseconds and 500 microseconds.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>6/7/2012 4:29:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.SpecifyKind(NationalInstruments.PrecisionDateTime,System.DateTimeKind)">
            <summary>
            Creates a new <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> object that
            represents the same time as the specified <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/>,
            but is designated in either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified
            <see cref="T:System.DateTimeKind" crefType="Unqualified"/> value.
            </summary>
            <param name="value">
            A <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> object.
            </param>
            <param name="kind">
            The <see cref="T:System.DateTimeKind" crefType="Unqualified"/> value you would like to designate for the new
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/>.
            </param>
            <returns>
            A new <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> object consisting of the
            same time represented by the <paramref name="value"/> parameter and the <see cref="T:System.DateTimeKind" crefType="Unqualified"/>
            value specified by the <paramref name="kind"/> parameter.
            </returns>
            <remarks>
              <para>
            A <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> object consists of a
            <see cref="P:NationalInstruments.PrecisionDateTime.Kind" crefType="Unqualified"/> field that indicates whether the
            time value is based on local time, Coordinated Universal Time (UTC), or neither, and the
            <see cref="P:NationalInstruments.PrecisionDateTime.WholeSeconds" crefType="Unqualified"/> and
            <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks" crefType="Unqualified"/> fields that
            together represent the time since 12:00:00 midnight, January 1, 0001.  The
            <see cref="M:NationalInstruments.PrecisionDateTime.SpecifyKind(NationalInstruments.PrecisionDateTime,System.DateTimeKind)" crefType="Unqualified"/> method creates a new
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> object using the specified
            <paramref name="kind"/> parameter and the original time value in whole seconds and fractional second ticks.
            </para>
              <para>
            The <see cref="M:NationalInstruments.PrecisionDateTime.SpecifyKind(NationalInstruments.PrecisionDateTime,System.DateTimeKind)" crefType="Unqualified"/> method is useful
            in interoperability scenarios where you receive a <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/>
            object with an unspecified <see cref="P:NationalInstruments.PrecisionDateTime.Kind" crefType="Unqualified"/> field,
            but can determine by independent means that the <see cref="P:NationalInstruments.PrecisionDateTime.WholeSeconds" crefType="Unqualified"/>
            and <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks" crefType="Unqualified"/> fields represent
            local time or UTC.
            </para>
            </remarks>
            <lastupdated>10/19/2009 4:34:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">
            An object to compare to this instance.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="T:NationalInstruments.PrecisionDateTime"/>
            and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:11:26 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Equals(NationalInstruments.PrecisionDateTime)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified <see cref="T:NationalInstruments.PrecisionDateTime"/>
            instance.
            </summary>
            <param name="other">
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> instance to compare to this instance.
            </param>
            <returns>
              <see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method implements the <see cref="T:System.IEquatable`1"/> interface, and performs slightly better than the
            <see cref="M:NationalInstruments.PrecisionDateTime.Equals(System.Object)"/> overload which takes an object as a parameter because
            the <paramref name="other"/> parameter does not have to be converted to an object.
            </remarks>
            <lastupdated>10/4/2006 10:11:48 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Equals(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:NationalInstruments.PrecisionDateTime"/> are equal.
            </summary>
            <param name="t1">
            the first <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </param>
            <returns>
              <see langword="true"/> if the two <see cref="T:NationalInstruments.PrecisionDateTime"/> values are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:12:06 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.PrecisionDateTime"/> objects might have the same hash
            code even though they represent different values.
            </remarks>
            <lastupdated>2/13/2008 4:19:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </summary>
            <returns>
            The enumerated constant, <see cref="F:System.TypeCode.DateTime"/>.
            </returns>
            <lastupdated>10/4/2006 10:42:01 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Add(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Adds the value of the specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to the value of this instance.
            </summary>
            <param name="value">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that contains the interval to add.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the sum of the date and time
            represented by this instance and the time interval represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <remarks>
            This method does not change the value of this <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Instead, a new <see cref="T:NationalInstruments.PrecisionDateTime"/> is returned whose
            value is the result of this operation.
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 9:47:13 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Subtract(NationalInstruments.PrecisionDateTime)">
            <summary>
            Subtracts the specified date and time from this instance.
            </summary>
            <param name="value">
            An instance of <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> interval equal to the date and time
            represented by this instance minus the date and time represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or
            greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 10:57:08 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Subtract(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Subtracts the specified duration from this instance.
            </summary>
            <param name="value">
            An instance of <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equal to the date and time
            represented by this instance minus the time interval represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or
            greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 10:57:25 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_Addition(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Adds a specified time interval to a specified date and time, yielding a new date and time.
            </summary>
            <param name="precisionDateTime">
            A <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionTimeSpan">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that is the sum of the values
            <paramref name="precisionDateTime"/> and <paramref name="precisionTimeSpan"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <lastupdated>10/4/2006 10:43:31 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_Subtraction(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Subtracts a specified date and time from another specified date and time, yielding a time interval.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that is the time interval between
            <paramref name="precisionDateTime1"/> and <paramref name="precisionDateTime2"/>; that is,
            <paramref name="precisionDateTime1"/> minus <paramref name="precisionDateTime2"/>.
            </returns>
            <remarks>
              <para>
            Before subtracting <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/>
            objects, insure that the objects represent times in the same time zone. Otherwise, the
            result will include the difference between time zones.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <lastupdated>10/19/2009 4:34:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_Subtraction(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Subtracts a specified time interval from a specified date and time, yielding a new date and time.
            </summary>
            <param name="precisionDateTime">
            A <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionTimeSpan">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the value of
            <paramref name="precisionDateTime"/> minus the value of <paramref name="precisionTimeSpan"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.
            </exception>
            <lastupdated>10/4/2006 10:43:13 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_Equality(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:NationalInstruments.PrecisionDateTime"/>
            are equal.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="precisionDateTime1"/> and <paramref name="precisionDateTime2"/>
            represent the same date and time; otherwise <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:44:08 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_GreaterThan(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Determines whether one specified <see cref="T:NationalInstruments.PrecisionDateTime"/> is greater than
            another specified <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="precisionDateTime1"/> is greater than <paramref name="precisionDateTime2"/>;
            otherwise <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:44:17 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_GreaterThanOrEqual(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Determines whether one specified <see cref="T:NationalInstruments.PrecisionDateTime"/> is greater than
            or equal to another specified <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="precisionDateTime1"/> is greater than or equal to <paramref name="precisionDateTime2"/>;
            otherwise <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:44:28 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_Inequality(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Determines whether two specified instances of <see cref="T:NationalInstruments.PrecisionDateTime"/> are not equal.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="precisionDateTime1"/> and <paramref name="precisionDateTime2"/> do not represent the same
            date and time; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:42:25 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_LessThan(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Determines whether one specified <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            another specified <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="precisionDateTime1"/> is less than
            <paramref name="precisionDateTime2"/>; otherwise <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:43:43 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.op_LessThanOrEqual(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Determines whether one specified <see cref="T:NationalInstruments.PrecisionDateTime"/> is less than
            or equal to another specified <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="precisionDateTime1"/> is less than or equal to <paramref name="precisionDateTime2"/>;
            otherwise <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 10:43:58 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Compare(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionDateTime)">
            <summary>
            Compares two instances of <see cref="T:NationalInstruments.PrecisionDateTime"/> and returns
            an indication of their relative values.
            </summary>
            <param name="precisionDateTime1">
            The first <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <param name="precisionDateTime2">
            The second <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </param>
            <returns>
            A signed number indicating the relative values of <paramref name="precisionDateTime1"/> and <paramref name="precisionDateTime2"/>.
            <list type="table">
              <listheader>
                <term>Value Type</term>
                <description>Condition</description>
              </listheader>
              <item>
              <term>Less than zero</term>
                <description><paramref name="precisionDateTime1"/> is less than <paramref name="precisionDateTime2"/>.</description>
              </item>
              <item>
                <term>Zero</term>
                <description><paramref name="precisionDateTime1"/> equals <paramref name="precisionDateTime2"/>.</description>
              </item>
              <item>
                <term>Greater than zero</term>
                <description><paramref name="precisionDateTime1"/> is greater than <paramref name="precisionDateTime2"/>.</description>
              </item>
            </list>
            </returns>
            <lastupdated>10/4/2006 10:09:26 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj">
            A boxed <see cref="T:NationalInstruments.PrecisionDateTime"/> object to compare, or <see langword="null"/>.
            </param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="obj"/>.
            <list type="table">
              <listheader>
                <term>Value</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="obj"/>.</description>
              </item>
              <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="obj"/>.</description>
              </item>
              <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="obj"/>, or <paramref name="obj"/> is <see langword="null"/>.</description>
              </item>
            </list>
            </returns>
            <remarks>
            Any instance of <see cref="T:NationalInstruments.PrecisionDateTime"/>, regardless of its value, is considered
            greater than <see langword="null"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
              <paramref name="obj"/> is not a <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            </exception>
            <lastupdated>10/4/2006 10:10:17 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.CompareTo(NationalInstruments.PrecisionDateTime)">
            <summary>
            Compares this instance to a specified <see cref="T:NationalInstruments.PrecisionDateTime"/> object and
            returns an indication of their relative values.
            </summary>
            <param name="other">
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> object to compare.
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the <paramref name="other"/> parameter.
            <list type="table">
              <listheader>
                <term>Value</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>Less than zero</term>
                <description>This instance is less than <paramref name="other"/>.</description>
              </item>
              <item>
                <term>Zero</term>
                <description>This instance is equal to <paramref name="other"/>.</description>
              </item>
              <item>
                <term>Greater than zero</term>
                <description>This instance is greater than <paramref name="other"/>.</description>
              </item>
            </list>
            </returns>
            <remarks>
            This method implements the <see cref="T:System.IComparable"/> interface and performs slightly better than the
            <see cref="M:NationalInstruments.PrecisionDateTime.CompareTo(System.Object)"/> overload which takes an object
            as a parameter because it does not have to convert the <paramref name="other"/> parameter to an object.
            </remarks>
            <lastupdated>10/4/2006 10:10:45 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats">
            <summary>
            Converts the value of this instance to all the string representations supported by the standard
            <see cref="T:System.DateTime"/> format specifiers.
            </summary>
            <returns>
            A string array where each element is the representation of the value of this instance formatted with one of the standard
            <see cref="T:System.DateTime"/> formatting specifiers.
            </returns>
            <remarks>
              <para>This method calls <see cref="M:System.DateTime.GetDateTimeFormats"/> to format the return value.</para>
              <para>
            Each element of the return value is formatted using information from the current culture. For more information about culture-specific
            formatting information for the current culture, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
              <para>For more information about the standard formatting specifiers, see <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.GetDateTimeFormats" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:42:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats(System.Char)">
            <summary>
            Converts the value of this instance to all the string representations supported by the specified
            standard <see cref="T:System.DateTime"/> format specifier.
            </summary>
            <param name="format">
            A unicode character containing a format specifier.
            </param>
            <returns>
            A string array where each element is the representation of the value of this instance formatted with the
            <paramref name="format"/> standard <see cref="T:System.DateTime"/> formatting specifier.
            </returns>
            <remarks>
              <para>This method calls <see cref="M:System.DateTime.GetDateTimeFormats"/> to format the return value.</para>
              <para>
            Each element of the return value is formatted using information from the current culture. For more information about culture-specific
            formatting information for the current culture, see <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
              <para>For more information about the standard formatting specifiers, see <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.GetDateTimeFormats" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:42:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to all the string representations supported by the standard
            <see cref="T:System.DateTime"/> format specifier and the specified culture-specific formatting
            information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about this instance.
            </param>
            <returns>
            A string array where each element is the representation of the value of this instance formatted with one of the
            standard <see cref="T:System.DateTime"/> formatting specifiers.
            </returns>
            <remarks>
              <para>This method calls <see cref="M:System.DateTime.GetDateTimeFormats"/> to format the return value.</para>
              <para>
            Each element of the return value is formatted using culture-specific information supplied by <paramref name="provider"/>.
            </para>
              <para>For more information about the standard formatting specifiers, see <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.GetDateTimeFormats" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:43:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to all the string representations supported by the standard
            <see cref="T:System.DateTime"/> format specifier and culture-specific formatting
            information.
            </summary>
            <param name="format">
            A Unicode character containing a format specifier.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about this instance.
            </param>
            <returns>
            A string array where each element is the representation of the value of this instance formatted with one of the
            standard <see cref="T:System.DateTime"/> formatting specifiers.
            </returns>
            <remarks>
              <para>This method calls <see cref="M:System.DateTime.GetDateTimeFormats"/> to format the return value.</para>
              <para>
            Each element of the return value is formatted using culture-specific information supplied by <paramref name="provider"/>.
            </para>
              <para>For more information about the standard formatting specifiers, see <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.GetDateTimeFormats" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.GetDateTimeFormats" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:42:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:NationalInstruments.PrecisionDateTime"/>
            equivalent.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent to the date and time contained in
            <paramref name="dateTime"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dateTime"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
              <para><paramref name="dateTime"/> does not contain a valid string representation of a date and time.</para>
              <para>-or-</para>
              <para><paramref name="dateTime"/> represents a date and time greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.</para>
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.Parse(System.String)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The string <paramref name="dateTime"/> is parsed using the formatting information in a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object initialized for the
            current culture.
            </para>
              <para>
            This method attempts to ignore unrecognized data and parse <paramref name="dateTime"/>
            completely. It ignores unrecognized data if possible and fills in missing
            month, day, and year information with the current time. If <paramref name="dateTime"/>
            contains only a date and no time, this method assumes the time is 12:00 midnight.
            Any leading, inner, or trailing white space character in <paramref name="dateTime"/>
            is ignored. The date and time can be bracketed with a pair of leading and trailing
            NUMBER SIGN characters ('#', U+0023), and can be trailed with one or more
            NULL characters (U+0000).
            </para>
              <para>
            The <paramref name="dateTime"/> parameter must contain the representation of a date and time
            in one of the formats described in the <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            class.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.Parse(System.String)"/>
            <lastupdated>2/28/2011 2:43:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent using the specified
            culture-specific format information.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific format information about <paramref name="dateTime"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent to the date and time contained in
            <paramref name="dateTime"/> as specified by <paramref name="provider"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dateTime"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
              <para><paramref name="dateTime"/> does not contain a valid string representation of a date and time.</para>
              <para>-or-</para>
              <para><paramref name="dateTime"/> represents a date and time greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.</para>
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The string <paramref name="dateTime"/> is parsed using the formatting information in a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object supplied by the
            <paramref name="provider"/> parameter.
            </para>
              <para>
            This method attempts to ignore unrecognized data and parse <paramref name="dateTime"/>
            completely. It ignores unrecognized data if possible and fills in missing
            month, day, and year information with the current time. If <paramref name="dateTime"/>
            contains only a date and no time, this method assumes the time is 12:00 midnight.
            Any leading, inner, or trailing white space character in <paramref name="dateTime"/>
            is ignored. The date and time can be bracketed with a pair of leading and trailing
            NUMBER SIGN characters ('#', U+0023), and can be trailed with one or more
            NULL characters (U+0000).
            </para>
              <para>
            The <paramref name="dateTime"/> parameter must contain the representation of a date and
            time in one of the formats described in the <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            topic.
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time
            formatting information. For example, it might supply the names of the days of the
            week in a particular language, or the preferred order of presentation for the month,
            day, and year. If <paramref name="provider"/> is <see langword="null"/>, the
            current culture is used.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.Parse(System.String,System.IFormatProvider)"/>
            <lastupdated>2/28/2011 2:43:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent using the specified
            culture-specific format information and formatting style.
            </summary>
            <param name="dateTime">
            A string containing and date and time to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information
            about <paramref name="dateTime"/>.
            </param>
            <param name="styles">
            A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles"/> values that indicates the
            permitted format of <paramref name="dateTime"/>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent to the date and time contained in
            <paramref name="dateTime"/> as specified by <paramref name="provider"/> and <paramref name="styles"/>.
            </returns>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The string <paramref name="dateTime"/> is parsed using the formatting information in a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object supplied by the
            <paramref name="provider"/> parameter.
            </para>
              <para>
            This method attempts to ignore unrecognized data and parse <paramref name="dateTime"/>
            completely. It ignores unrecognized data if possible and fills in missing
            month, day, and year information with the current time. If <paramref name="dateTime"/>
            contains only a date and no time, this method assumes the time is 12:00 midnight.
            Any leading, inner, or trailing white space character in <paramref name="dateTime"/>
            is ignored. The date and time can be bracketed with a pair of leading and trailing
            NUMBER SIGN characters ('#', U+0023), and can be trailed with one or more
            NULL characters (U+0000).
            </para>
              <para>
            The <paramref name="dateTime"/> parameter must contain the representation of a date and
            time in one of the formats described in the <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            topic.
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time
            formatting information. For example, it might supply the names of the days of the
            week in a particular language, or the preferred order of presentation for the month,
            day, and year. If <paramref name="provider"/> is <see langword="null"/>, the
            current culture is used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dateTime"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
              <para><paramref name="dateTime"/> does not contain a valid string representation of a date and time.</para>
              <para>-or-</para>
              <para><paramref name="dateTime"/> represents a date and time greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="styles"/> contains an invalid combination of
            <see cref="T:System.Globalization.DateTimeStyles"/> values. For example, both
            <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and
            <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>.
            </exception>
            <seealso cref="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/>
            <lastupdated>2/28/2011 2:43:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent using the specified format
            and culture-specific format information. The format of the string representation must
            match the specified format exactly.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <param name="format">
            The expected format of <paramref name="dateTime"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific format
            information about <paramref name="dateTime"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent to the date and time
            contained in <paramref name="dateTime"/> as specified by <paramref name="format"/> and
            <paramref name="provider"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dateTime"/> or <paramref name="format"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
              <para><paramref name="dateTime"/> or <paramref name="format"/> is an empty string.</para>
              <para>-or</para>
              <para><paramref name="dateTime"/> does not contain a date and time that corresponds to the
            pattern specified in <paramref name="format"/>.</para>
              <para>-or-</para>
              <para><paramref name="dateTime"/> represents a date and time greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.</para>
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The <paramref name="dateTime"/> parameter contains the date and time to parse. If the
            <paramref name="dateTime"/> parameter contains only a time and no date, the current date is used.
            If the <paramref name="dateTime"/> parameter contains only a date and no time, midnight
            (00:00:00) is used. The <paramref name="dateTime"/> parameter cannot contain leading, inner, or
            trailing white space characters.
            </para>
              <para>
            The <paramref name="format"/> parameter contains a pattern that corresponds to the expected
            format of the <paramref name="dateTime"/> parameter. The pattern in the <paramref name="format"/>
            parameter consists of one or more custom format specifiers from the
            <see keyword="98b374e3-0cc2-4c78-ab44-efb671d7198" keywordType="msdn">Custom DateTime Format Strings</see>
            table, or a single standard format specifier, which identifies a predefined pattern,
            from the <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see>
            table.
            </para>
              <para>
            If you do not use date or time separators in a custom format pattern, use the invariant
            culture for the <paramref name="provider"/> parameter and the widest form or each
            custom format specifier. For example, if you want to specify hours in the pattern, specify
            the wider form, "HH", instead of the narrower form, "H".
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time formatting
            information, such as the names of the days of the week in a particular language, or
            the preferred presentation order of the month, day, and year. The <paramref name="format"/>
            parameter is typically a culture represented by a <see cref="T:System.Globalization.CultureInfo"/>
            object. If <paramref name="provider"/> is <see langword="null"/>, the current culture is
            used.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)"/>
            <lastupdated>2/28/2011 2:43:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:NationalInstruments.PrecisionDateTime"/>
            equivalent using the specified format, culture-specific format information, and style. The format
            of the string representation must match the specified format exactly.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <param name="format">
            The expected format of <paramref name="dateTime"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="dateTime"/>.
            </param>
            <param name="style">
            A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles"/> values that indicates the permitted
            format of <paramref name="dateTime"/>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent to the date and time contained in
            <paramref name="dateTime"/> as specified by <paramref name="format"/>, <paramref name="provider"/>,
            and <paramref name="style"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dateTime"/> or <paramref name="format"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
              <para><paramref name="dateTime"/> or <paramref name="format"/> is an empty string.</para>
              <para>-or</para>
              <para><paramref name="dateTime"/> does not contain a date and time that corresponds to the pattern
            specified in <paramref name="format"/>.</para>
              <para>-or-</para>
              <para><paramref name="dateTime"/> represents a date and time greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="style"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/>
            values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and
            <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>.
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The <paramref name="dateTime"/> parameter contains the date and time to parse. If the
            <paramref name="dateTime"/> parameter contains only a time and no date, the current date is used.
            If the <paramref name="dateTime"/> parameter contains only a date and no time, midnight
            (00:00:00) is used. The <paramref name="dateTime"/> parameter cannot contain leading, inner, or
            trailing white space characters.
            </para>
              <para>
            The <paramref name="format"/> parameter contains a pattern that corresponds to the expected
            format of the <paramref name="dateTime"/> parameter. The pattern in the <paramref name="format"/>
            parameter consists of one or more custom format specifiers from the
            <see keyword="98b374e3-0cc2-4c78-ab44-efb671d7198" keywordType="msdn">Custom DateTime Format Strings</see>
            table, or a single standard format specifier, which identifies a predefined pattern,
            from the <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see>
            table.
            </para>
              <para>
            If you do not use date or time separators in a custom format pattern, use the invariant
            culture for the <paramref name="provider"/> parameter and the widest form or each
            custom format specifier. For example, if you want to specify hours in the pattern, specify
            the wider form, "HH", instead of the narrower form, "H".
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time formatting
            information, such as the names of the days of the week in a particular language, or
            the preferred presentation order of the month, day, and year. The <paramref name="format"/>
            parameter is typically a culture represented by a <see cref="T:System.Globalization.CultureInfo"/>
            object. If <paramref name="provider"/> is <see langword="null"/>, the current culture is
            used.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/>
            <lastupdated>2/28/2011 2:43:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:NationalInstruments.PrecisionDateTime"/>
            equivalent using the specified array of formats, culture-specific format information, and style. The format
            of the string representation must match at least one of the specified formats exactly.
            </summary>
            <param name="dateTime">
            A string containing one or more dates and times to convert.
            </param>
            <param name="formats">
            An array of expected formats of <paramref name="dateTime"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="dateTime"/>.
            </param>
            <param name="style">
            A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles"/> values that indicates the permitted
            format of <paramref name="dateTime"/>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent to the date and time contained in
            <paramref name="dateTime"/> as specified by <paramref name="formats"/>, <paramref name="provider"/>,
            and <paramref name="style"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="dateTime"/> or <paramref name="formats"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
              <para><paramref name="dateTime"/> is an empty string.</para>
              <para>-or</para>
              <para>an element of <paramref name="formats"/> is an empty string.</para>
              <para>-or</para>
              <para><paramref name="dateTime"/> does not contain a date and time that corresponds to any element of
            specified in <paramref name="formats"/>.</para>
              <para>-or-</para>
              <para><paramref name="dateTime"/> represents a date and time greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="style"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/>
            values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and
            <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>.
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The <paramref name="dateTime"/> parameter contains the date and time to parse. If the
            <paramref name="dateTime"/> parameter contains only a time and no date, the current date is used.
            If the <paramref name="dateTime"/> parameter contains only a date and no time, midnight
            (00:00:00) is used. The <paramref name="dateTime"/> parameter cannot contain leading, inner, or
            trailing white space characters.
            </para>
              <para>
            The <paramref name="formats"/> parameter contains an array of patterns that correspond to the expected
            format of the <paramref name="dateTime"/> parameter. The patterns in the <paramref name="formats"/>
            parameter consist of one or more custom format specifiers from the
            <see keyword="98b374e3-0cc2-4c78-ab44-efb671d7198" keywordType="msdn">Custom DateTime Format Strings</see>
            table, or a single standard format specifier, which identifies a predefined pattern,
            from the <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see>
            table.
            </para>
              <para>
            If you do not use date or time separators in a custom format pattern, use the invariant
            culture for the <paramref name="provider"/> parameter and the widest form or each
            custom format specifier. For example, if you want to specify hours in the pattern, specify
            the wider form, "HH", instead of the narrower form, "H".
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time formatting
            information, such as the names of the days of the week in a particular language, or
            the preferred presentation order of the month, day, and year. The <paramref name="formats"/>
            parameter is typically a culture represented by a <see cref="T:System.Globalization.CultureInfo"/>
            object. If <paramref name="provider"/> is <see langword="null"/>, the current culture is
            used.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)"/>
            <lastupdated>2/28/2011 2:44:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,NationalInstruments.PrecisionDateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            value equivalent to the date and time contained in <paramref name="dateTime"/>, if the
            conversion succeeded, or <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            if the conversion failed. The conversion fails if the <paramref name="dateTime"/> parameter
            is <see langword="null"/>, does not contain a valid string representation of a
            date and time, or contains a string representation of a date and time greater than
            <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>. This parameter is passed uninitialized.
            </param>
            <returns>
              <see langword="true"/> if the <paramref name="dateTime"/> parameter was converted
            successfully; otherwise <see langword="false"/>.
            </returns>
            <remarks>
              <para>
            This method calls <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/> to format the value. Some
            precision may be lost.
              </para>
              <para>
            The <see cref="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,NationalInstruments.PrecisionDateTime@)"/> method is similar to
            the <see cref="M:NationalInstruments.PrecisionDateTime.Parse(System.String)"/> method, except that this
            method does not throw an exception if the conversion fails.
            </para>
              <para>
            The string <paramref name="dateTime"/> is parsed using the formatting information in a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object initialized for the
            current culture.
            </para>
              <para>
            This method attempts to ignore unrecognized data and parse <paramref name="dateTime"/>
            completely. It ignores unrecognized data if possible and fills in missing
            month, day, and year information with the current time. If <paramref name="dateTime"/>
            contains only a date and no time, this method assumes the time is 12:00 midnight.
            Any leading, inner, or trailing white space character in <paramref name="dateTime"/>
            is ignored. The date and time can be bracketed with a pair of leading and trailing
            NUMBER SIGN characters ('#', U+0023), and can be trailed with one or more
            NULL characters (U+0000).
            </para>
              <para>
            The <paramref name="dateTime"/> parameter must contain the representation of a date and time
            in one of the formats described in the <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            class.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/>
            <lastupdated>2/28/2011 2:48:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent using
            the specified culture-specific format information and formatting style.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> object that supplies culture-specific formatting
            information about <paramref name="dateTime"/>.
            </param>
            <param name="styles">
            A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles"/> values that
            indicates the permitted format of <paramref name="dateTime"/>. A typical value to specify is
            <see cref="F:System.Globalization.DateTimeStyles.None"/>.
            </param>
            <param name="result">
            When this method returns, it contains the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            value equivalent to the date and time contained in <paramref name="dateTime"/>, if the
            conversion succeeded, or <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            if the conversion failed. The conversion fails if the <paramref name="dateTime"/> parameter
            is <see langword="null"/>, does not contain a valid string representation of a
            date and time, or contains a string representation of a date and time greater than
            <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>. This parameter is passed uninitialized.
            </param>
            <returns>
              <see langword="true"/> if the <paramref name="dateTime"/> parameter was converted
            successfully; otherwise <see langword="false"/>.
            </returns>
            <remarks>
              <para>
            This method calls <see cref="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> to format the value. Some
            precision may be lost.
              </para>
              <para>
            The <see cref="M:NationalInstruments.PrecisionDateTime.TryParse(System.String,NationalInstruments.PrecisionDateTime@)"/> method is similar to
            the <see cref="M:NationalInstruments.PrecisionDateTime.Parse(System.String)"/> method, except that this
            method does not throw an exception if the conversion fails.
            </para>
              <para>
            The string <paramref name="dateTime"/> is parsed using the formatting information in a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object supplied by the
            <paramref name="provider"/> parameter.
            </para>
              <para>
            This method attempts to ignore unrecognized data and parse <paramref name="dateTime"/>
            completely. It ignores unrecognized data if possible and fills in missing
            month, day, and year information with the current time. If <paramref name="dateTime"/>
            contains only a date and no time, this method assumes the time is 12:00 midnight.
            Any leading, inner, or trailing white space character in <paramref name="dateTime"/>
            is ignored. The date and time can be bracketed with a pair of leading and trailing
            NUMBER SIGN characters ('#', U+0023), and can be trailed with one or more
            NULL characters (U+0000).
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time
            formatting information. For example, it might supply the names of the days of the
            week in a particular language, or the preferred order of presentation for the month,
            day, and year. If <paramref name="provider"/> is <see langword="null"/>, the
            current culture is used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <para><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.</para>
              <para>-or-</para>
              <para>
                <paramref name="styles"/> contains an invalid combination of
            <see cref="T:System.Globalization.DateTimeStyles"/> values (for example, both
            <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and
            <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>.
            </para>
            </exception>
            <seealso cref="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/>
            <lastupdated>2/28/2011 2:47:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent using the
            specified format, culture-specific format information, and style. The
            format of the string representation must match the specified format exactly.
            </summary>
            <param name="dateTime">
            A string containing a date and time to convert.
            </param>
            <param name="format">
            The expected format of <paramref name="dateTime"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> object that supplies culture-specific
            formatting information about <paramref name="dateTime"/>.
            </param>
            <param name="styles">
            A bitwise combination of one or more <see cref="T:System.Globalization.DateTimeStyles"/>
            values that indicate the permitted format of <paramref name="dateTime"/>.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            value equivalent to the date and time contained in <paramref name="dateTime"/>, if the
            conversion succeeded, or <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            if the conversion failed. The conversion fails if either the <paramref name="dateTime"/> or
            <paramref name="format"/> parameter is <see langword="null"/>, is an empty string,
            does not contain a date and time that correspond to the pattern specified in
            <paramref name="format"/>, or contains a string representation of a date and time greater than
            <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>. This parameter is passed uninitialized.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="dateTime"/> was converted successfully;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              <para><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.</para>
              <para>-or-</para>
              <para>
                <paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/>
            values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/>
            and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).
            </para>
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The <see cref="M:NationalInstruments.PrecisionDateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)"/> method is like
            the <see cref="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)"/> method, except this
            method does not throw an exception if the conversion fails.
            </para>
              <para>
            The <paramref name="dateTime"/> parameter contains the date and time to parse. If the
            <paramref name="dateTime"/> parameter contains only a time and no date, the <paramref name="styles"/>
            parameter determines whether the current date or a default date is used. If the
            <paramref name="dateTime"/> parameter contains only a date and no time, midnight
            (00:00:00) is used. The <paramref name="styles"/> parameter also determines whether the
            <paramref name="dateTime"/> parameter can contain leading, inner, or
            trailing white space characters.
            </para>
              <para>
            The <paramref name="format"/> parameter contains a pattern that corresponds to the expected
            format of the <paramref name="dateTime"/> parameter. The pattern in the <paramref name="format"/>
            parameter consists of one or more custom format specifiers from the
            <see keyword="98b374e3-0cc2-4c78-ab44-efb671d7198" keywordType="msdn">Custom DateTime Format Strings</see>
            table, or a single standard format specifier, which identifies a predefined pattern,
            from the <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see>
            table.
            </para>
              <para>
            If you do not use date or time separators in a custom format pattern, use the invariant
            culture for the <paramref name="provider"/> parameter and the widest form or each
            custom format specifier. For example, if you want to specify hours in the pattern, specify
            the wider form, "HH", instead of the narrower form, "H".
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time formatting
            information, such as the names of the days of the week in a particular language, or
            the preferred presentation order of the month, day, and year. The <paramref name="format"/>
            parameter is typically a culture represented by a <see cref="T:System.Globalization.CultureInfo"/>
            object. If <paramref name="provider"/> is <see langword="null"/>, the current culture is
            used.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/>
            <lastupdated>2/28/2011 2:48:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its
            <see cref="T:NationalInstruments.PrecisionDateTime"/> equivalent using the
            specified array of formats, culture-specific format information, and style. The
            format of the string representation must match at least one of the specified
            formats exactly.
            </summary>
            <param name="dateTime">
            A string containing one or more dates and times to convert.
            </param>
            <param name="formats">
            An array of expected formats of <paramref name="dateTime"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> object that supplies culture-specific
            formatting information about <paramref name="dateTime"/>.
            </param>
            <param name="styles">
            A bitwise combination of one or more <see cref="T:System.Globalization.DateTimeStyles"/>
            values that indicates the permitted format of <paramref name="dateTime"/>.
            </param>
            <param name="result">
            When this method returns, contains the <see cref="T:NationalInstruments.PrecisionDateTime"/>
            value equivalent to the date and time contained in <paramref name="dateTime"/>, if the
            conversion succeeded, or <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>
            if the conversion failed. The conversion fails if <paramref name="dateTime"/> or
            <paramref name="formats"/> is <see langword="null"/>, <paramref name="dateTime"/> or
            an element of <paramref name="formats"/> is an empty string, the format of
            <paramref name="dateTime"/> is not exactly as specified by at least one of the format
            patterns in <paramref name="formats"/>, or <paramref name="dateTime"/> contains a string representation of a date and time greater than
            <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>. This parameter is passed uninitialized.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="dateTime"/> was converted successfully;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              <para><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.</para>
              <para>-or-</para>
              <para>
                <paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/>
            values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/>
            and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).
            </para>
            </exception>
            <remarks>
              <para>
                This method calls <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> to parse
            <paramref name="dateTime"/> and obtain the resulting date and time. Some precision may be lost.
            </para>
              <para>
            The <see cref="M:NationalInstruments.PrecisionDateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,NationalInstruments.PrecisionDateTime@)"/> method is like
            the <see cref="M:NationalInstruments.PrecisionDateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)"/> method, except this
            method does not throw an exception if the conversion fails.
            </para>
              <para>
            The <paramref name="dateTime"/> parameter contains the date and time to parse. If the
            <paramref name="dateTime"/> parameter contains only a time and no date, the <paramref name="styles"/>
            parameter determines whether the current date or a default date is used. If the
            <paramref name="dateTime"/> parameter contains only a date and no time, midnight
            (00:00:00) is used. The <paramref name="styles"/> parameter also determines whether the
            <paramref name="dateTime"/> parameter can contain leading, inner, or
            trailing white space characters.
            </para>
              <para>
            The <paramref name="formats"/> parameter contains an array of patterns that correspond to the expected
            format of the <paramref name="dateTime"/> parameter. The patterns in the <paramref name="formats"/>
            parameter consist of one or more custom format specifiers from the
            <see keyword="98b374e3-0cc2-4c78-ab44-efb671d7198" keywordType="msdn">Custom DateTime Format Strings</see>
            table, or a single standard format specifier, which identifies a predefined pattern,
            from the <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see>
            table.
            </para>
              <para>
            If you do not use date or time separators in a custom format pattern, use the invariant
            culture for the <paramref name="provider"/> parameter and the widest form or each
            custom format specifier. For example, if you want to specify hours in the pattern, specify
            the wider form, "HH", instead of the narrower form, "H".
            </para>
              <para>
            The <paramref name="provider"/> parameter supplies culture-specific date and time formatting
            information, such as the names of the days of the week in a particular language, or
            the preferred presentation order of the month, day, and year. The <paramref name="provider"/>
            parameter is typically a culture represented by a <see cref="T:System.Globalization.CultureInfo"/>
            object. If <paramref name="provider"/> is <see langword="null"/>, the current culture is
            used.
            </para>
            </remarks>
            <seealso cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/>
            <lastupdated>2/28/2011 2:48:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToLongDateString">
            <summary>
            Converts the value of this instance to its equivalent long date string representation.
            </summary>
            <returns>
            A string containing the name of the day of the week, the name of the month, the numeric
            day of the month, and the year equivalent to the date value of this instance.
            </returns>
            <remarks>
              <para>
                This method calls
            <see cref="M:System.DateTime.ToLongDateString"/> to format the return value. Some precision
            may be lost.
            </para>
              <para>
            The value of this instance is formatted using the long date format character, 'D'. The return value
            is identical to the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> ("D", null).
            </para>
              <para>
            For more information about format characters, format patterns, and the output they produce, see the
            <see keyword="0D1364DA-5B30-4D42-8E6B-03378343343F" keywordType="msdn">Formatting Overview</see> topic.
            For more information about changing the format pattern associated with a format character see the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> class.
            </para>
              <para>
            This method uses formatting information derived from the current culture. For more information about the
            current culture, see the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> class. You can use
            the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/> property to obtain the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the current culture.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToLongDateString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToLongDateString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToLongDateString" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <seealso cref="M:System.DateTime.ToLongDateString"/>
            <lastupdated>2/28/2011 2:44:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToLongTimeString">
            <summary>
            Converts the value of this instance to its equivalent long time  string representation.
            </summary>
            <returns>
            A string containing the hours, minutes, and seconds equivalent to the time value
            of this instance.
            </returns>
            <remarks>
              <para>
                This method calls
            <see cref="M:System.DateTime.ToLongTimeString"/> to format the return value. Some precision
            may be lost.
            </para>
              <para>
            The value of this instance is formatted using the long time format character, 'T'. The return value
            is identical to the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> ("T", null).
            </para>
              <para>
            For more information about format characters, format patterns, and the output they produce, see the
            <see keyword="0D1364DA-5B30-4D42-8E6B-03378343343F" keywordType="msdn">Formatting Overview</see> topic.
            For more information about changing the format pattern associated with a format character see the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> class.
            </para>
              <para>
            This method uses formatting information derived from the current culture. For more information about the
            current culture, see the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> class. You can use
            the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/> property to obtain the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the current culture.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToLongTimeString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToLongTimeString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToLongTimeString" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <seealso cref="M:System.DateTime.ToLongTimeString"/>
            <lastupdated>2/28/2011 2:44:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToShortDateString">
            <summary>
            Converts the value of this instance to its equivalent short date string representation.
            </summary>
            <returns>
            A string containing the numeric month, the numeric day of the month, and the year
            equivalent to the date value of this instance.
            </returns>
            <remarks>
              <para>
                This method calls
            <see cref="M:System.DateTime.ToShortDateString"/> to format the return value. Some precision
            may be lost.
            </para>
              <para>
            The value of this instance is formatted using the short date format character, 'd'. The return value
            is identical to the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> ("d", null).
            </para>
              <para>
            For more information about format characters, format patterns, and the output they produce, see the
            <see keyword="0D1364DA-5B30-4D42-8E6B-03378343343F" keywordType="msdn">Formatting Overview</see> topic.
            For more information about changing the format pattern associated with a format character see the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> class.
            </para>
              <para>
            This method uses formatting information derived from the current culture. For more information about the
            current culture, see the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> class. You can use
            the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/> property to obtain the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the current culture.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToShortDateString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToShortDateString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToShortDateString" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <seealso cref="M:System.DateTime.ToShortDateString"/>
            <lastupdated>2/28/2011 2:44:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToShortTimeString">
            <summary>
            Converts the value of this instance to its equivalent short time  string representation.
            </summary>
            <returns>
            A string containing the hours, minutes, and seconds equivalent to the time value
            of this instance.
            </returns>
            <remarks>
              <para>
                This method calls
            <see cref="M:System.DateTime.ToShortTimeString"/> to format the return value. Some precision
            may be lost.
            </para>
              <para>
            The value of this instance is formatted using the long time format character, 't'. The return value
            is identical to the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> ("t", null).
            </para>
              <para>
            For more information about format characters, format patterns, and the output they produce, see the
            <see keyword="0D1364DA-5B30-4D42-8E6B-03378343343F" keywordType="msdn">Formatting Overview</see> topic.
            For more information about changing the format pattern associated with a format character see the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> class.
            </para>
              <para>
            This method uses formatting information derived from the current culture. For more information about the
            current culture, see the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> class. You can use
            the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/> property to obtain the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> for the current culture.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToShortTimeString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToShortTimeString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToShortTimeString" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <seealso cref="M:System.DateTime.ToShortTimeString"/>
            <lastupdated>2/28/2011 2:44:54 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
            <remarks>
              <para>
            This method calls <see cref="M:System.DateTime.ToString"/> to format the return value. Some precision may be lost.
            </para>
              <para>
            The value of this instance is formatted using the general format specifier, 'G', as described in the
            <see keyword="0D1364DA-5B30-4D42-8E6B-03378343343F" keywordType="msdn">Formatting Overview</see> topic.
            The return value is identical to the value returned by
            <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> ("G", null).
            </para>
              <para>
            This method uses formatting information derived from the current culture. For more information, see
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToString" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <seealso cref="M:System.DateTime.ToString"/>
            <lastupdated>2/28/2011 2:45:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation of the value of this instance as specified by <paramref name="provider"/>.
            </returns>
            <remarks>
              <para>
            This method calls <see cref="M:System.DateTime.ToString(System.IFormatProvider)"/> to format the return value. Some precision may be lost.
            </para>
              <para>
            The value of this instance is formatted using the general format specifier, 'G', as described in the
            <see keyword="0D1364DA-5B30-4D42-8E6B-03378343343F" keywordType="msdn">Formatting Overview</see> topic.
            The return value is identical to the value returned by
            <see cref="M:NationalInstruments.PrecisionDateTime.ToString"/> ("G", null).
            </para>
              <para>
            The <paramref name="provider"/> parameter is typically a <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            object or an instance of <see cref="T:System.Globalization.CultureInfo"/>, which contains a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object. If <paramref name="provider"/>
            is <see langword="null"/>, the <see cref="T:System.Globalization.DateTimeFormatInfo"/> associated
            with the current culture is used. For more information, see
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToString(System.IFormatProvider)" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <seealso cref="M:System.DateTime.ToString(System.IFormatProvider)"/>
            <lastupdated>2/28/2011 2:45:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format.
            </summary>
            <param name="format">
            A format string.
            </param>
            <returns>
            A string representation of the value of this instance as specified by <paramref name="format"/>.
            </returns>
            <remarks>
              <para>
            This method calls <see cref="M:System.DateTime.ToString(System.String)"/> to format the return value. Some precision may be lost.
            </para>
              <para>
            The <paramref name="format"/> parameter should contain either a format specifier character or
            a custom format pattern. For more information, see the summary page for
            <see cref="T:System.Globalization.DateTimeFormatInfo"/>.
            </para>
              <para>
            If <paramref name="format"/> is <see langword="null"/> or an empty string, the general format
            specifier, 'G' is used.
            </para>
              <para>
            This method uses formatting information derived from the current culture. For more information, see
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToString(System.String)" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <exception cref="T:System.FormatException">
              <para>
            The length of <paramref name="format"/> is 1, and it is not one of the format specifier characters
            defined for <see cref="T:System.Globalization.DateTimeFormatInfo"/>.
            </para>
              <para>-or-</para>
              <para><paramref name="format"/> does not contain a valid custom format pattern.</para>
            </exception>
            <seealso cref="M:System.DateTime.ToString(System.String)"/>
            <lastupdated>2/28/2011 2:45:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">
            A format string.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation of the value of this instance as specified by <paramref name="format"/>
            and <paramref name="formatProvider"/>.
            </returns>
            <remarks>
              <para>
            This method calls <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)"/> to format the return value. Some precision may be lost.
            </para>
              <para>
            The <paramref name="format"/> parameter should contain either a format specifier character or
            a custom format pattern. For more information, see the summary page for
            <see cref="T:System.Globalization.DateTimeFormatInfo"/>.
            </para>
              <para>
            If <paramref name="format"/> is <see langword="null"/> or an empty string, the general format
            specifier, 'G' is used.
            </para>
              <para>
            The <paramref name="formatProvider"/> parameter is typically a <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            object or an instance of <see cref="T:System.Globalization.CultureInfo"/>, which contains a
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object. If <paramref name="formatProvider"/>
            is <see langword="null"/>, the <see cref="T:System.Globalization.DateTimeFormatInfo"/> associated
            with the current culture is used. For more information, see
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionDateTime.ToString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" crefType="Unqualified"/> method of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note></remarks>
            <exception cref="T:System.FormatException">
              <para>
            The length of <paramref name="format"/> is 1, and it is not one of the format specifier characters
            defined for <see cref="T:System.Globalization.DateTimeFormatInfo"/>.
            </para>
              <para>-or-</para>
              <para><paramref name="format"/> does not contain a valid custom format pattern.</para>
            </exception>
            <seealso cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)"/>
            <lastupdated>2/28/2011 2:45:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToByte(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToChar(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the current <see cref="T:NationalInstruments.PrecisionDateTime"/> to a <see cref="T:System.DateTime"/>
            instance.
            </summary>
            <param name="provider">
            An object that implements the <see cref="T:System.IFormatProvider"/> interface. (This parameter is
            not used; specify <see langword="null"/>.)
            </param>
            <returns>
            The current <see cref="T:NationalInstruments.PrecisionDateTime"/> converted to a <see cref="T:System.DateTime"/>
            object.
            </returns>
            <lastupdated>1/26/2009 12:10:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionDateTime.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.WholeSeconds">
            <summary>
            Gets the date and time of this instance expressed as the total number of whole seconds.
            This property is read-only.
            </summary>
            <value>
            The total number of whole seconds represented by the <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </value>
            <remarks>
            This property returns only whole seconds. For example, if the current
            <see cref="T:NationalInstruments.PrecisionDateTime"/> represents 4.5 seconds (4 seconds
            and 500 milliseconds), this property returns 4.
            </remarks>
            <lastupdated>10/4/2006 9:46:35 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.FractionalSeconds">
            <summary>
            Gets the number of fractional seconds represented by the current
            <see cref="T:NationalInstruments.PrecisionDateTime"/> instance. This property is read-only.
            </summary>
            <value>
            The number of seconds after the whole seconds represented by this instance.
            </value>
            <remarks>
              <para>
            This property returns the number of fractional seconds after the whole seconds
            represented by the current <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            For example, if the current <see cref="T:NationalInstruments.PrecisionDateTime"/>
            represented 4.5 seconds, this property returns 0.5.
            </para>
              <para>
            This property converts <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>
            to fractional seconds by multiplying
            <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>
            by <see cref="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks"/>.
            Therefore, some rounding errors may occur when using this property instead of
            <see cref="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks"/>
            to obtain the fractional seconds represented by this instance.
            </para>
            </remarks>
            <seealso cref="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks"/>
            <lastupdated>10/4/2006 9:41:03 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.FractionalSecondTicks">
            <summary>
            Gets the number of fractional second ticks represented by the current
            <see cref="T:NationalInstruments.PrecisionDateTime"/> instance. This property is read-only.
            </summary>
            <value>
            The number of 2^(-64) seconds after the whole seconds represented by this instance.
            </value>
            <remarks>
              <para>
            This property is always zero or positive. It returns the number of positive 2^(-64) seconds after
            the whole seconds of the current <see cref="T:NationalInstruments.PrecisionDateTime"/>.
            Each tick of this value represents 0.05421010862427522170... attoseconds. For example,
            if the time represented by the current <see cref="T:NationalInstruments.PrecisionDateTime"/>
            is 4.8 seconds, this property returns 14757395258967641293 (0.8 represented by 2^(-64) seconds).
            </para>
              <para>
            To convert this value to fractional seconds, multiply
            it by <see cref="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks"/>.
            Rounding errors may occur.
            </para>
            </remarks>
            <seealso cref="F:NationalInstruments.PrecisionDateTime.SecondsPerFractionalTicks"/>
            <lastupdated>10/4/2006 9:41:36 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Millisecond">
            <summary>
            Gets the millisecond component of the date represented by this instance. This property is read-only.
            </summary>
            <value>
            The milliseconds component, expressed as a value between 0 and 999.
            </value>
            <lastupdated>10/4/2006 9:44:03 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Second">
            <summary>
            Gets the seconds component of the date represented by this instance. This property is read-only.
            </summary>
            <value>
            The seconds component, expressed as a value between 0 and 59.
            </value>
            <lastupdated>10/4/2006 9:45:25 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Minute">
            <summary>
            Gets the minute component of the date represented by this instance. This property is read-only.
            </summary>
            <value>
            The minute component, expressed as a value between 0 and 59.
            </value>
            <lastupdated>10/4/2006 9:44:11 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Hour">
            <summary>
            Gets the hour component of the day represented by this instance. This property is read-only.
            </summary>
            <value>
            The hour component, expressed as a value between 0 and 23.
            </value>
            <lastupdated>10/4/2006 9:41:47 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Day">
            <summary>
            Gets the day of the month represented by this instance. This property is read-only.
            </summary>
            <value>
            The day component, expressed as a value between 1 and 31.
            </value>
            <lastupdated>11/20/2013 12:32:36 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Month">
            <summary>
            Gets the month component of the date represented by this instance. This property is read-only.
            </summary>
            <value>
            The month component, expressed as a value between 1 and 12.
            </value>
            <lastupdated>11/20/2013 12:32:29 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Year">
            <summary>
            Gets the year component of the date represented by this instance. This property is read-only.
            </summary>
            <value>
            The year, between 1 and <see cref="F:System.Int32.MaxValue" crefType="PartiallyQualified"/>.
            </value>
            <remarks>
            The maximum value of this property is <see cref="F:System.Int32.MaxValue" crefType="PartiallyQualified"/>.
            Use <see cref="P:NationalInstruments.PrecisionDateTime.YearLong"/> to get the year for
            <see cref="T:NationalInstruments.PrecisionDateTime"/> values with a year greater than
            <see cref="F:System.Int32.MaxValue" crefType="PartiallyQualified"/>.
            </remarks>
            <lastupdated>11/21/2013 9:20:49 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.YearLong">
            <summary>
            Gets the year component of the date represented by this instance. This property is read-only.
            </summary>
            <value>
            The year, between 1 and 292277024627.
            </value>
            <lastupdated>11/21/2013 8:58:18 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Kind">
            <summary>
            Gets a value that indicates whether the time represented by this instance is based on local time,
            Coordinated Universal Time (UTC), or neither.
            </summary>
            <value>
            One of the <see cref="T:System.DateTimeKind"/> values. The default is
            <see cref="F:System.DateTimeKind.Unspecified"/>.
            </value>
            <lastupdated>10/4/2006 9:43:50 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Date">
            <summary>
            Gets the date component of this instance. This property is read-only.
            </summary>
            <value>
            A new <see cref="T:NationalInstruments.PrecisionDateTime"/> with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).
            </value>
            <remarks>
              <note type="note">
            The value of <see cref="P:NationalInstruments.PrecisionDateTime.Date" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="P:NationalInstruments.PrecisionDateTime.Date" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="P:System.DateTime.Date" crefType="Unqualified"/> property of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:39:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.TimeOfDay">
            <summary>
            Gets the time of day for this instance. This property is read-only.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents the fraction of the day that has elapsed since midnight.
            </value>
            <remarks>
              <note type="note">
            The value of <see cref="P:NationalInstruments.PrecisionDateTime.TimeOfDay" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="P:NationalInstruments.PrecisionDateTime.TimeOfDay" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="P:System.DateTime.TimeOfDay" crefType="Unqualified"/> property of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:42:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.DayOfWeek">
            <summary>
            Gets the day of the week represented by this instance. This property is read-only.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek"/> enumerated constant that indicates the day of the week. This property value ranges from zero, indicating Sunday, to six, indicating Saturday.
            </value>
            <lastupdated>11/20/2013 12:48:59 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.DayOfYear">
            <summary>
            Gets the day of the year represented by this instance. This property is read-only.
            </summary>
            <value>
            The day of the year, expressed as a value between 1 and 366.
            </value>
            <remarks>
              <note type="note">
            The value of <see cref="P:NationalInstruments.PrecisionDateTime.DayOfYear" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values less than or equal to <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionDateTime" crefType="Unqualified"/> values greater than <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="P:NationalInstruments.PrecisionDateTime.DayOfYear" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="P:System.DateTime.DayOfYear" crefType="Unqualified"/> property of <see cref="F:System.DateTime.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:41:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Now">
            <summary>
            Gets a <see cref="T:NationalInstruments.PrecisionDateTime"/> object that is set to the current
            date and time on this computer, expressed as the local time. This property is read-only.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose
            value is the current local date and time. This property uses
            <see cref="P:System.DateTime.Now"/> to get the current date and time.
            </value>
            <remarks>
            The resolution of this property depends on the system timer.
            <list type="table">
              <listheader>
                <term>System</term>
                <description>Approximate Resolution</description>
              </listheader>
              <item>
                <term>Windows NT 3.5 and later</term>
                <description>10 milliseconds</description>
              </item>
              <item>
                <term>Windows 98</term>
                <description>55 milliseconds</description>
              </item>
            </list>
            </remarks>
            <lastupdated>10/13/2006 11:16:14 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.UtcNow">
            <summary>
            Gets a <see cref="T:NationalInstruments.PrecisionDateTime"/> object that is set to
            the current date and time on this computer, expressed as the Coordinated
            Universal Time (UTC).
            </summary>
            <value>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> whose value is the current
            UTC date and time and whose <see cref="P:NationalInstruments.PrecisionDateTime.Kind"/>
            property returns <see cref="F:System.DateTimeKind.Utc"/>. This property uses <see cref="P:System.DateTime.UtcNow"/> to get the current UTC date and time.
            </value>
            <remarks>
            The resolution of this property depends on the system timer.
            <list type="table">
              <listheader>
                <term>System</term>
                <description>Approximate Resolution</description>
              </listheader>
              <item>
                <term>Windows NT 3.5 and later</term>
                <description>10 milliseconds</description>
              </item>
              <item>
                <term>Windows 98</term>
                <description>55 milliseconds</description>
              </item>
            </list>
            </remarks>
            <lastupdated>10/13/2006 11:16:50 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionDateTime.Today">
            <summary>
            Gets the current date. This property is read-only.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> set to today's date, with the time component set to 00:00:00.
            </value>
            <lastupdated>10/4/2006 9:45:46 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.PrecisionTimeSpan">
             <summary>
             Represents a time interval with a higher precision than <see cref="T:System.TimeSpan"/>.
             </summary>
             <threadsafety safety="unsafe"/>
             <remarks>
               <para>
             A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object represents a time interval,
             or duration of time, measured as a positive or negative number of days, hours, minutes,
             seconds, and fractions of a second. The largest unit of time used to measure duration
             is a day. Time intervals are measured in days for consistency because the number of
             days in larger units of time, such as months and years, varies.
             </para>
               <para>
             The value of a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object is the number
             of whole seconds and fractional second ticks that equal the represented time interval.
             <see cref="P:NationalInstruments.PrecisionTimeSpan.WholeSeconds"/>
             is a 64-bit number that represents the number of whole seconds
             in the <see cref="T:NationalInstruments.PrecisionTimeSpan"/> without a fractional portion.
             <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>
             is a 64-bit number that represents the number of 2^(-64) seconds
             after the whole seconds. Each fractional second tick represents 0.05421010862427522170...
             attoseconds. Use <see cref="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks"/>
             to convert <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/> to
             its fractional seconds equivalent or use the <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSeconds"/>
             property. When using the <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSeconds"/>
             property or converting <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>
             to fractional seconds, some rounding errors may occur.
             </para>
               <para>
             A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object can be created from a
             <see cref="T:System.TimeSpan"/> object using <see cref="M:NationalInstruments.PrecisionTimeSpan.FromTimeSpan(System.TimeSpan)"/>
             and can be converted to a <see cref="T:System.TimeSpan"/> object using
             <see cref="M:NationalInstruments.PrecisionTimeSpan.ToTimeSpan"/>. Some precision may be lost when converting a
             <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object to a <see cref="T:System.TimeSpan"/>
             object.
             </para>
               <para>
             Use the <see cref="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String)"/>, <see cref="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)"/>,
             and <see cref="M:NationalInstruments.PrecisionTimeSpan.ToString"/> methods for formatting time values.
             <see cref="T:NationalInstruments.PrecisionTimeSpan"/> calls these methods on a
             <see cref="T:System.TimeSpan"/> object, so some precision may be lost.
             </para>
               <para>
             The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> type implements the
             <see cref="T:System.Runtime.Serialization.ISerializable"/>, <see cref="T:System.IComparable"/>,
             <see cref="T:System.IComparable`1"/>, and <see cref="T:System.IEquatable`1"/>
             interfaces.
             </para>
             </remarks>
             <seealso cref="T:System.TimeSpan"/>
             <example>
               <para>The following code example creates several
             <see cref="T:NationalInstruments.PrecisionTimeSpan"/> objects and displays the
             properties of each.</para>
               <code lang="VB.NET">
             ' Example of the PrecisionTimeSpan properties.
             Imports NationalInstruments
            
             Module PrecisionTimeSpanDemo
            
                 Const headerFormat As String = vbCrLf &amp; "{0,-45}"
                 Const dataFormat As String = "{0,-12}{1,8}       {2,-18}{3,21}"
            
                 ' Display the properties of the PrecisionTimeSpan parameter.
                 Sub ShowPrecisionTimeSpanProperties(ByVal interval As PrecisionTimeSpan)
            
                     Console.WriteLine("{0,21}", interval)
                     Console.WriteLine(dataFormat, _
                         "Days", interval.Days, "TotalDays", interval.TotalDays)
                     Console.WriteLine(dataFormat, "Hours", interval.Hours, _
                         "TotalHours", interval.TotalHours)
                     Console.WriteLine(dataFormat, "Minutes", interval.Minutes, _
                         "TotalMinutes", interval.TotalMinutes)
                     Console.WriteLine(dataFormat, "Seconds", interval.Seconds, _
                         "TotalSeconds", interval.TotalSeconds)
                     Console.WriteLine(dataFormat, _
                         "Milliseconds", interval.Milliseconds, _
                         "TotalMilliseconds", interval.TotalMilliseconds)
                     Console.WriteLine(dataFormat, _
                         Nothing, Nothing, "FractionalSecondTicks", interval.FractionalSecondTicks)
                     Console.WriteLine(dataFormat, _
                         Nothing, Nothing, "FractionalSeconds", interval.FractionalSeconds)
                 End Sub
            
                 Sub Main()
                     Console.WriteLine( _
                         "This example of the PrecisionTimeSpan class generates " &amp; vbCrLf &amp; _
                         "the following output. It creates several PrecisionTimeSpan " &amp; vbCrLf &amp; _
                         "objects and displays the values of the properties for each")
            
                     ' Create and display a PrecisionTimeSpan value of 1 fractional second tick.
                     Console.Write(headerFormat, "PrecisionTimeSpan( 0, 1 )")
                     ShowPrecisionTimeSpanProperties(New PrecisionTimeSpan(0, 1))
            
                     ' Create a PrecisionTimeSpan value with both whole seconds and fractional second ticks.
                     Console.Write(headerFormat, "PrecisionTimeSpan( 123456, 111222333444555 )")
                     ShowPrecisionTimeSpanProperties(New PrecisionTimeSpan(123456, 111222333444555))
            
                     ' Create a PrecisionTimeSpan value from 1.5 seconds.
                     Console.Write(headerFormat, "PrecisionTimeSpan( 1.5 )")
                     ShowPrecisionTimeSpanProperties(New PrecisionTimeSpan(1.5))
            
                     ' This TimeSpan is based on a number of days.
                     Console.Write(headerFormat, "FromDays( 20.84745602 )")
                     ShowPrecisionTimeSpanProperties(PrecisionTimeSpan.FromDays(20.84745602))
            
                     ' Create a PrecisionTimeSpan value from a TimeSpan object.
                     Console.Write(headerFormat, "FromTimeSpan(new TimeSpan( 10, 20, 30, 40, 50 ))")
                     ShowPrecisionTimeSpanProperties(PrecisionTimeSpan.FromTimeSpan(New TimeSpan(10, 20, 30, 40, 50)))
                 End Sub
             End Module
            
             ' This example of the PrecisionTimeSpan class generates
             ' the following output. It creates several PrecisionTimeSpan
             ' objects and displays the values of the properties for each
             '
             ' PrecisionTimeSpan( 0, 1 )                                    00:00:00
             ' Days               0       TotalDays             6.27431812780963E-25
             ' Hours              0       TotalHours            1.50583635067431E-23
             ' Minutes            0       TotalMinutes          9.03501810404587E-22
             ' Seconds            0       TotalSeconds          5.42101086242752E-20
             ' Milliseconds       0       TotalMilliseconds     5.42101086242752E-17
             '                            FractionalSecondTicks                    1
             '                            FractionalSeconds     5.42101086242752E-20
             '
             ' PrecisionTimeSpan( 123456, 111222333444555 )       1.10:17:36.0000060
             ' Days               1       TotalDays                 1.42888888895867
             ' Hours             10       TotalHours                34.2933333350082
             ' Minutes           17       TotalMinutes              2057.60000010049
             ' Seconds           36       TotalSeconds              123456.000006029
             ' Milliseconds       0       TotalMilliseconds         123456000.006029
             '                            FractionalSecondTicks      111222333444555
             '                            FractionalSeconds     6.02937477747469E-06
             '
             ' PrecisionTimeSpan( 1.5 )                             00:00:01.5000000
             ' Days               0       TotalDays             1.73611111111111E-05
             ' Hours              0       TotalHours            0.000416666666666667
             ' Minutes            0       TotalMinutes                         0.025
             ' Seconds            1       TotalSeconds                           1.5
             ' Milliseconds     500       TotalMilliseconds                     1500
             '                            FractionalSecondTicks  9223372036854775808
             '                            FractionalSeconds                      0.5
             '
             ' FromDays( 20.84745602 )                           20.20:20:20.2001280
             ' Days              20       TotalDays                      20.84745602
             ' Hours             20       TotalHours                    500.33894448
             ' Minutes           20       TotalMinutes                 30020.3366688
             ' Seconds           20       TotalSeconds                1801220.200128
             ' Milliseconds     200       TotalMilliseconds           1801220200.128
             '                            FractionalSecondTicks  3691709997923696640
             '                            FractionalSeconds        0.200127999996766
             '
             ' FromTimeSpan(new TimeSpan( 10, 20, 30, 40, 50 ))  10.20:30:40.0500000
             ' Days              10       TotalDays                 10.8546302083333
             ' Hours             20       TotalHours                      260.511125
             ' Minutes           30       TotalMinutes                    15630.6675
             ' Seconds           40       TotalSeconds                     937840.05
             ' Milliseconds      49       TotalMilliseconds                937840050
             '                            FractionalSecondTicks   922337203685477580
             '                            FractionalSeconds                     0.05
               </code>
             </example>
             <example>
               <code lang="C#">
             // Example of the PrecisionTimeSpan properties.
             using System;
             using NationalInstruments;
            
             public class PrecisionTimeSpanDemo
             {
                 const string headerFormat = "\n{0,-48}";
                 const string dataFormat = "{0,-12}{1,8}       {2,-21}{3,21}";
            
                 // Display the properties of the TimeSpan parameter.
                 static void ShowPrecisionTimeSpanProperties(PrecisionTimeSpan interval)
                 {
                     Console.WriteLine("{0,21}", interval);
                     Console.WriteLine(dataFormat, "Days", interval.Days,
                         "TotalDays", interval.TotalDays);
                     Console.WriteLine(dataFormat, "Hours", interval.Hours,
                         "TotalHours", interval.TotalHours);
                     Console.WriteLine(dataFormat, "Minutes", interval.Minutes,
                         "TotalMinutes", interval.TotalMinutes);
                     Console.WriteLine(dataFormat, "Seconds", interval.Seconds,
                         "TotalSeconds", interval.TotalSeconds);
                     Console.WriteLine(dataFormat, "Milliseconds",
                         interval.Milliseconds, "TotalMilliseconds",
                         interval.TotalMilliseconds);
                     Console.WriteLine(dataFormat, null, null,
                         "FractionalSecondTicks", interval.FractionalSecondTicks);
                     Console.WriteLine(dataFormat, null, null,
                         "FractionalSeconds", interval.FractionalSeconds);
                 }
            
                 static void Main()
                 {
                     Console.WriteLine(
                         "This example of the PrecisionTimeSpan class generates\n" +
                         "the following output. It creates several PrecisionTimeSpan\n" +
                         "objects and displays the values of the properties for each.");
            
                     // Create and display a PrecisionTimeSpan value of 1 fractional second tick.
                     Console.Write(headerFormat, "PrecisionTimeSpan( 0, 1 )");
                     ShowPrecisionTimeSpanProperties(new PrecisionTimeSpan(0, 1));
            
                     // Create a PrecisionTimeSpan value with both whole seconds and fractional second ticks.
                     Console.Write(headerFormat, "PrecisionTimeSpan( 123456, 111222333444555 )");
                     ShowPrecisionTimeSpanProperties(new PrecisionTimeSpan(123456, 111222333444555));
            
                     // Create a PrecisionTimeSpan value from 1.5 seconds.
                     Console.Write(headerFormat, "PrecisionTimeSpan( 1.5 )");
                     ShowPrecisionTimeSpanProperties(new PrecisionTimeSpan(1.5));
            
                     // This PrecisionTimeSpan is based on a number of days.
                     Console.Write(headerFormat, "FromDays( 20.84745602 )");
                     ShowPrecisionTimeSpanProperties(PrecisionTimeSpan.FromDays(20.84745602));
            
                     // Create a PrecisionTimeSpan value from a TimeSpan object.
                     Console.Write(headerFormat, "FromTimeSpan(new TimeSpan(10, 20, 30, 40, 50))");
                     ShowPrecisionTimeSpanProperties(PrecisionTimeSpan.FromTimeSpan(new TimeSpan(10, 20, 30, 40, 50)));
                 }
             }
            
             /*
             This example of the PrecisionTimeSpan class generates
             the following output. It creates several PrecisionTimeSpan
             objects and displays the values of the properties for each.
            
             PrecisionTimeSpan( 0, 1 )                                    00:00:00
             Days               0       TotalDays             6.27431812780963E-25
             Hours              0       TotalHours            1.50583635067431E-23
             Minutes            0       TotalMinutes          9.03501810404587E-22
             Seconds            0       TotalSeconds          5.42101086242752E-20
             Milliseconds       0       TotalMilliseconds     5.42101086242752E-17
                                        FractionalSecondTicks                    1
                                        FractionalSeconds     5.42101086242752E-20
            
             PrecisionTimeSpan( 123456, 111222333444555 )       1.10:17:36.0000060
             Days               1       TotalDays                 1.42888888895867
             Hours             10       TotalHours                34.2933333350082
             Minutes           17       TotalMinutes              2057.60000010049
             Seconds           36       TotalSeconds              123456.000006029
             Milliseconds       0       TotalMilliseconds         123456000.006029
                                        FractionalSecondTicks      111222333444555
                                        FractionalSeconds     6.02937477747469E-06
            
             PrecisionTimeSpan( 1.5 )                             00:00:01.5000000
             Days               0       TotalDays             1.73611111111111E-05
             Hours              0       TotalHours            0.000416666666666667
             Minutes            0       TotalMinutes                         0.025
             Seconds            1       TotalSeconds                           1.5
             Milliseconds     500       TotalMilliseconds                     1500
                                        FractionalSecondTicks  9223372036854775808
                                        FractionalSeconds                      0.5
            
             FromDays( 20.84745602 )                           20.20:20:20.2001280
             Days              20       TotalDays                      20.84745602
             Hours             20       TotalHours                    500.33894448
             Minutes           20       TotalMinutes                 30020.3366688
             Seconds           20       TotalSeconds                1801220.200128
             Milliseconds     200       TotalMilliseconds           1801220200.128
                                        FractionalSecondTicks  3691709997923696640
                                        FractionalSeconds        0.200127999996766
            
             FromTimeSpan(new TimeSpan(10, 20, 30, 40, 50))    10.20:30:40.0500000
             Days              10       TotalDays                 10.8546302083333
             Hours             20       TotalHours                      260.511125
             Minutes           30       TotalMinutes                    15630.6675
             Seconds           40       TotalSeconds                     937840.05
             Milliseconds      49       TotalMilliseconds                937840050
                                        FractionalSecondTicks   922337203685477580
                                        FractionalSeconds                     0.05
             */
             </code>
             </example>
             <lastupdated>10/4/2006 12:58:57 PM</lastupdated>
             <updatedby>Staci McCormick</updatedby>
             <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks">
            <summary>
            Represents the number of seconds for each fractional second tick. This field is read-only.
            </summary>
            <remarks>
              <para>
            The value of this constant is 2^(-64).
            Fractional seconds are stored as <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>.
            Use this field to convert between <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>
            and <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSeconds"/>.
            </para>
            </remarks>
            <lastupdated>10/4/2006 12:59:36 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionTimeSpan.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:NationalInstruments.PrecisionTimeSpan"/>. This field is read-only.
            </summary>
            <lastupdated>10/4/2006 12:59:18 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionTimeSpan.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:NationalInstruments.PrecisionTimeSpan"/>. This field is read-only.
            </summary>
            <lastupdated>10/4/2006 12:59:26 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionTimeSpan.Zero">
            <summary>
            Represents the zero <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value.
            This field is read-only.
            </summary>
            <remarks>
            This constant provides a convenient source for zero in time calculations.
            </remarks>
            <lastupdated>10/4/2006 12:59:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.Int64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure with the specified whole seconds and fractional second ticks.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds to represent.
            </param>
            <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed.
            </param>
            <lastupdated>11/14/2013 9:42:41 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure with the specified whole seconds and fractional second ticks.
            </summary>
            <param name="wholeSeconds">
            The number of whole seconds to represent.
            </param>
            <param name="fractionalSecondTicks">
            The number of fractional second ticks (2^(-64) seconds) after the whole seconds
            that have elapsed. Values less than zero are wrapped around as per .NET rules for
            casting <see cref="T:System.Int64"/> to <see cref="T:System.UInt64"/>. For instance,
            -1 becomes  <see cref="F:System.UInt64.MaxValue"/>.
            </param>
            <remarks>
            This constructor is provided for CLS compliance. The
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> constructor which
            takes the fractional second ticks as an <format type="bold">ulong</format>
            is preferred for any <paramref name="fractionalSecondTicks"/> over
            <see cref="F:System.Int64.MaxValue"/>.
            </remarks>
            <lastupdated>8/26/2014 4:07:59 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure to the specified date and time represented by a
            <see cref="T:System.TimeSpan"/> object.
            </summary>
            <param name="timeSpan">
            A <see cref="T:System.TimeSpan"/> which represents the time information to
            initialize the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <remarks>
            A <see cref="T:System.TimeSpan"/> stores timing information in 100-nanosecond ticks.
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> stores timing information
            in whole seconds and fractional second ticks (2^(-64) seconds).  The date and time
            represented by the <paramref name="timeSpan"/> parameter is converted to whole
            seconds and fractional second ticks in the new <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            Therefore, some rounding errors may occur.
            </remarks>
            <lastupdated>10/4/2006 1:15:52 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure with the specified number of seconds.
            </summary>
            <param name="seconds">
            The number of seconds to represent.
            </param>
            <remarks>
            The <paramref name="seconds"/> parameter represents whole and fractional seconds. Since
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> stores fractional seconds as
            fractional second ticks (2^(-64) seconds), some rounding may occur when initializing
            the new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="seconds"/> is <see cref="F:System.Double.NaN"/>.</para>
                <para>-or-</para>
                <para><paramref name="seconds"/> is greater than <see cref="F:System.Int64.MaxValue"/> or less than <see cref="F:System.Int64.MinValue"/>.</para>
            </exception>
            <lastupdated>10/4/2006 1:14:18 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.ToTimeSpan">
            <summary>
            Converts the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to a
            <see cref="T:System.TimeSpan"/> object.
            </summary>
            <returns>
            A <see cref="T:System.TimeSpan"/> object which represents the time of
            the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance.
            </returns>
            <remarks>
              <para>
            Since the <see cref="T:NationalInstruments.PrecisionTimeSpan"/> structure has a higher
            precision than <see cref="T:System.TimeSpan"/>, some precision may be lost
            when performing this conversion.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 1:16:50 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.FromTimeSpan(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance that
            represents the value of a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="timeSpan">
            A <see cref="T:System.TimeSpan"/> which contains the time information to initialize
            the new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents the time
            specified by <paramref name="timeSpan"/>.
            </returns>
            <remarks>
            A <see cref="T:System.TimeSpan"/> stores timing information in 100-nanosecond
            ticks. A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> stores timing
            information in whole seconds and fractional second ticks (2^(-64) seconds).
            The time represented by the <paramref name="timeSpan"/> parameter is converted
            to whole seconds and fractional second ticks in the new
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/>. Therefore, some rounding
            errors may occur.
            </remarks>
            <lastupdated>10/4/2006 1:09:50 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.FromDays(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents a
            specified number of days.
            </summary>
            <param name="value">
            A number of days.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
              <paramref name="value"/> is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
            If <paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/> is returned. If
            <paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> is returned.
            </remarks>
            <lastupdated>10/4/2006 1:08:21 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.FromHours(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents a
            specified number of hours.
            </summary>
            <param name="value">
            A number of hours.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
              <paramref name="value"/> is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
            If <paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/> is returned. If
            <paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> is returned.
            </remarks>
            <lastupdated>10/4/2006 1:08:29 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.FromMinutes(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents a
            specified number of minutes.
            </summary>
            <param name="value">
            A number of minutes.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
              <paramref name="value"/> is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
            If <paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/> is returned. If
            <paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> is returned.
            </remarks>
            <lastupdated>10/4/2006 1:09:01 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.FromSeconds(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents a
            specified number of seconds.
            </summary>
            <param name="value">
            A number of seconds.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
              <paramref name="value"/> is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
            If <paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/> is returned. If
            <paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> is returned.
            </remarks>
            <lastupdated>10/4/2006 1:09:15 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.FromMilliseconds(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents a
            specified number of milliseconds.
            </summary>
            <param name="value">
            A number of milliseconds.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
              <paramref name="value"/> is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
            If <paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/> is returned. If
            <paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>,
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> is returned.
            </remarks>
            <lastupdated>10/4/2006 1:08:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="obj"/> is a
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object that
            represents the same time interval as the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> structure;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:07:54 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Equals(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object.
            </summary>
            <param name="other">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object to compare with
            this instance.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="other"/> represents the same time
            interval as this instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This method implements the <see cref="T:System.IEquatable`1"/> interface, and
            performs slightly better than the <see cref="M:NationalInstruments.PrecisionTimeSpan.Equals(System.Object)"/>
            overload which takes an object as a parameter because it does not have to convert
            the <paramref name="other"/> parameter to an object.
            </remarks>
            <lastupdated>10/4/2006 1:08:06 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Equals(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Returns a value indicating whether two specified instances of
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> are equal.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the values of <paramref name="t1"/> and
            <paramref name="t2"/> are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:08:16 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.PrecisionTimeSpan"/> objects might have the same
            hash code even though they represent different time values.
            </remarks>
            <lastupdated>10/4/2006 1:10:05 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Duration">
            <summary>
            Returns a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object whose
            value is the absolute value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            object.
            </summary>
            <returns>
            A new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is the absolute
            value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The value of this instance is <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>.
            </exception>
            <lastupdated>10/4/2006 1:07:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is the negated
            value of this instance.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> which has the same numeric value as
            this instance, but with the opposite sign.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The negated value of this instance cannot be represented by a <see cref="T:NationalInstruments.PrecisionTimeSpan"/>;
            that is, the value of this instance is <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 1:10:20 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Add(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Adds the specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to this
            instance.
            </summary>
            <param name="ts">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to add to the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents the value
            of this instance plus the value of <paramref name="ts"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            The return value must be between <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            and <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>; otherwise, an
            exception is thrown.
            </para>
              <para>
            The return value is a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/>; the
            original <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is not modified.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 1:06:31 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Subtract(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Subtracts the specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> from this instance.
            </summary>
            <param name="ts">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to subtract.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is the result of the value
            of this instance minus the value of <paramref name="ts"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <remarks>
              <para>
            The return value must be between <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            and <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>; otherwise, an
            exception is thrown.
            </para>
              <para>
            The return value is a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/>; the
            original <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is not modified.
            </para>
            </remarks>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/4/2006 1:16:17 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_Addition(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Adds two specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instances.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is the sum of
            <paramref name="t1"/> and <paramref name="t2"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <lastupdated>10/4/2006 1:11:23 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_Subtraction(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> from another
            specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is the result
            of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The return value is less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <lastupdated>10/4/2006 1:10:58 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_UnaryPlus(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Returns the specified instance of <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </summary>
            <param name="ts">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            Returns <paramref name="ts"/>.
            </returns>
            <lastupdated>10/4/2006 1:11:05 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_UnaryNegation(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Returns a <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is
            the negated value of the specified instance.
            </summary>
            <param name="ts">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to negate.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> with the same numeric value
            as this instance, but the opposite sign.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The negated value of this instance cannot be represented by a
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/>; that is, the value of this
            instance is <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>.
            </exception>
            <lastupdated>11/14/2013 9:31:32 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_Multiply(NationalInstruments.PrecisionTimeSpan,System.Int64)">
            <summary>
            Multiples a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance by a value.
            </summary>
            <param name="ts">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance to multiply.
            </param>
            <param name="value">
            The value to multiply <paramref name="ts"/> by.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is <paramref name="ts"/>
            multiplied by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <lastupdated>3/6/2007 5:16:02 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Multiply(System.Int64)">
            <summary>
            Multiples this instance by a specified value.
            </summary>
            <param name="value">
            The value to multiply this instance by.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is this instance
            multiplied by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/19/2009 4:35:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_Division(NationalInstruments.PrecisionTimeSpan,System.Int64)">
            <summary>
            Divides a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance by a value.
            </summary>
            <param name="ts">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance to divide.
            </param>
            <param name="value">
            The value to divide <paramref name="ts"/> by.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is <paramref name="ts"/>
            divided by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            If <paramref name="value"/>/&gt; is zero.
            </exception>
            <lastupdated>8/25/2014 3:11:45 PM</lastupdated>
            <updatedby>Aaron Cederquist</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Divide(System.Int64)">
            <summary>
            Divides this instance by a specified value.
            </summary>
            <param name="value">
            The value to divide this instance by.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> whose value is this instance
            divided by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.OverflowException">
            The resulting <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/> or greater than
            <see cref="F:NationalInstruments.PrecisionTimeSpan.MaxValue"/>.
            </exception>
            <attribute ctor="M:NationalInstruments.Restricted.PureAttribute.#ctor"/>
            <lastupdated>10/19/2009 4:34:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_Equality(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Indicates whether two <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instances
            are equal.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the values of <paramref name="t1"/> and
            <paramref name="t2"/> are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:11:52 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_Inequality(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Indicates whether two <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instances
            are not equal.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the values of <paramref name="t1"/> and <paramref name="t2"/>
            are not equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:10:28 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_LessThan(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            another specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the value of <paramref name="t1"/> is less than the
            value of <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:11:34 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_GreaterThan(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is greater than
            another specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the value of <paramref name="t1"/> is greater than the
            value of <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:12:02 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_LessThanOrEqual(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is less than
            or equal to another specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the value of <paramref name="t1"/> is less than
            or equal to the value of <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:11:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.op_GreaterThanOrEqual(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/> is greater than
            or equal to another specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
              <see langword="true"/> if the value of <paramref name="t1"/> is greater than
            or equal to the value of <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>10/4/2006 1:12:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Compare(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Compares two <see cref="T:NationalInstruments.PrecisionTimeSpan"/> values and returns
            an integer that indicates their relationship.
            </summary>
            <param name="t1">
            The first <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <param name="t2">
            The second <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </param>
            <returns>
            A signed number indicating the relative values of <paramref name="t1"/> and <paramref name="t2"/>.
            <list type="table">
              <listheader>
                <term>Value Type</term>
                <description>Condition</description>
              </listheader>
              <item>
                <term>-1</term>
                <description><paramref name="t1"/> is less than <paramref name="t2"/>.</description>
              </item>
              <item>
                <term>0</term>
                <description><paramref name="t1"/> is equal to <paramref name="t2"/>.</description>
              </item>
              <item>
                <term>1</term>
                <description><paramref name="t1"/> is greater than <paramref name="t2"/>.</description>
              </item>
            </list>
            </returns>
            <lastupdated>10/4/2006 1:06:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their
            relative values.
            </summary>
            <param name="obj">
            An object to compare, or <see langword="null"/>.
            </param>
            <returns>
            A signed number indicating the relative values of the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance
            and <paramref name="obj"/>.
            <list type="table">
              <listheader>
                <term>Value Type</term>
                <description>Condition</description>
              </listheader>
              <item>
                <term>-1</term>
                <description>The value of this instance is less than the value of <paramref name="obj"/>.</description>
              </item>
              <item>
                <term>0</term>
                <description>The value of this instance is equal to the value of <paramref name="obj"/>.</description>
              </item>
              <item>
                <term>1</term>
                <description>
                  <para>The value of this instance is greater than the value of <paramref name="obj"/>.</para>
                  <para>-or-</para>
                  <para><paramref name="obj"/> is <see langword="null"/>.</para>
                </description>
              </item>
            </list>
            </returns>
            <remarks>
              <para>
            Any instance of <see cref="T:NationalInstruments.PrecisionTimeSpan"/>, regardless of
            its value, is considered greater than <see langword="null"/>.
            </para>
              <para>
            The <paramref name="obj"/> parameter must be an instance of
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> or <see langword="null"/>;
            otherwise, an exception is thrown.
            </para>
            </remarks>
            <lastupdated>10/4/2006 1:07:08 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.CompareTo(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Compares this instance to a specified <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            and returns an indication of their relative values.
            </summary>
            <param name="other">
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> to compare to this instance.
            </param>
            <returns>
            A signed number indicating the relative values of the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance
            and <paramref name="other"/>.
            <list type="table">
              <listheader>
                <term>Value Type</term>
                <description>Condition</description>
              </listheader>
              <item>
                <term>-1</term>
                <description>The value of this instance is less than the value of <paramref name="other"/>.</description>
              </item>
              <item>
                <term>0</term>
                <description>The value of this instance is equal to the value of <paramref name="other"/>.</description>
              </item>
              <item>
                <term>1</term>
                <description>The value of this instance is greater than the value of <paramref name="other"/>.</description>
              </item>
            </list>
            </returns>
            <remarks>
              <para>
            This method implements the <see cref="T:System.IComparable"/> interface and
            performs slightly better than the <see cref="M:NationalInstruments.PrecisionTimeSpan.CompareTo(System.Object)"/>
            method which takes an object as a parameter because it does not have to convert the
            <paramref name="other"/> parameter to an object.
            </para>
            </remarks>
            <lastupdated>10/4/2006 1:07:32 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object from
            a time interval specified in a string.
            </summary>
            <param name="timeSpan">
            A string that specifies a time interval.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that corresponds to <paramref name="timeSpan"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeSpan"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="timeSpan"/> has an invalid format.
            </exception>
            <exception cref="T:System.OverflowException">
                <para>
                <paramref name="timeSpan"/> represents a number less than
                <see cref="F:System.TimeSpan.MinValue" crefType="PartiallyQualified"/> or greater than
                <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
                </para>
                <para>-or-</para>
                <para>At least one of the days, hours, minutes, or seconds components is outside its valid range.</para>
            </exception>
            <remarks>
            <para>
            The <paramref name="timeSpan"/> parameter contains a time interval specification of the form:
            </para>
            <para>
            [ws][-]{ d | [d.]hh:mm[:ss[.ff]] }[ws]
            </para>
            <para>
            Items in square brackets ([ and ]) are optional. One selection from the list of alternatives
            enclosed in braces ({ and }) and separated by vertical bars (|) is required.
            Colons and period (: and .) are literal culture-sensitive characters and required. Other items are as follows.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Item</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>
            ws
            </term>
            <description>
            optional white space
            </description>
            </item>
            <item>
            <term>
            "-"
            </term>
            <description>
            optional minus sign indicating a negative <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            </description>
            </item>
            <item>
            <term>
            d
            </term>
            <description>
            days, ranging from 0 to 10675199
            </description>
            </item>
            <item>
            <term>
            hh
            </term>
            <description>
            hours, ranging from 0 to 23
            </description>
            </item>
            <item>
            <term>
            mm
            </term>
            <description>
            minutes, ranging from 0 to 59
            </description>
            </item>
            <item>
            <term>
            ss
            </term>
            <description>
            optional seconds, ranging from 0 to 59
            </description>
            </item>
            <item>
            <term>
            ff
            </term>
            <description>
            optional fractional seconds, consisting of at least 1 decimal digit
            </description>
            </item>
            </list>
            </para>
            <para>
            The components of <paramref name="timeSpan"/> must collectively specify a time interval
            greater than or equal to <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            and less than or equal to <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
            </para>
            </remarks>
            <lastupdated>3/3/2014 10:52:58 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String,System.IFormatProvider)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object from
            a time interval specified in a string using
            the specified culture-specific format information and formatting style.
            </summary>
            <param name="timeSpan">
            A string that specifies a time interval.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific format information about <paramref name="timeSpan"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that corresponds to <paramref name="timeSpan"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="timeSpan"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="timeSpan"/> has an invalid format.
            </exception>
            <exception cref="T:System.OverflowException">
                <para>
                <paramref name="timeSpan"/> represents a number less than
                <see cref="F:System.TimeSpan.MinValue" crefType="PartiallyQualified"/> or greater than
                <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
                </para>
                <para>-or-</para>
                <para>At least one of the days, hours, minutes, or seconds components is outside its valid range.</para>
            </exception>
            <remarks>
            <para>
            The <paramref name="timeSpan"/> parameter contains a time interval specification of the form:
            </para>
            <para>
            [ws][-]{ d | [d.]hh:mm[:ss[.ff]] }[ws]
            </para>
            <para>
            Items in square brackets ([ and ]) are optional. One selection from the list of alternatives
            enclosed in braces ({ and }) and separated by vertical bars (|) is required.
            Colons and period (: and .) are literal culture-sensitive characters and required. Other items are as follows.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Item</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>
            ws
            </term>
            <description>
            optional white space
            </description>
            </item>
            <item>
            <term>
            "-"
            </term>
            <description>
            optional minus sign indicating a negative <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            </description>
            </item>
            <item>
            <term>
            d
            </term>
            <description>
            days, ranging from 0 to 10675199
            </description>
            </item>
            <item>
            <term>
            hh
            </term>
            <description>
            hours, ranging from 0 to 23
            </description>
            </item>
            <item>
            <term>
            mm
            </term>
            <description>
            minutes, ranging from 0 to 59
            </description>
            </item>
            <item>
            <term>
            ss
            </term>
            <description>
            optional seconds, ranging from 0 to 59
            </description>
            </item>
            <item>
            <term>
            ff
            </term>
            <description>
            optional fractional seconds, consisting of at least 1 decimal digit
            </description>
            </item>
            </list>
            </para>
            <para>
            The components of <paramref name="timeSpan"/> must collectively specify a time interval
            greater than or equal to <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            and less than or equal to <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
            </para>
            </remarks>
            <lastupdated>3/3/2014 10:53:19 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object from
            a time interval specified in a string. Parameters specify the time interval
            and the variable where the new <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            object is returned.
            </summary>
            <param name="timeSpan">
            A string that specifies a time interval.
            </param>
            <param name="result">
            When this method returns, it contains an object that represents the time interval
            specified by <paramref name="timeSpan"/>, or <see cref="F:NationalInstruments.PrecisionTimeSpan.Zero"/>
            if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="timeSpan"/> was converted successfully;
            otherwise, <see langword="false"/>. This operation returns <see langword="false"/>
            if the <paramref name="timeSpan"/> parameter is <see langword="null"/>, has an invalid
            format, represents a time interval less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>, or has
            at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
            <remarks>
            <para>
            The <see cref="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)"/> method is like the
            <see cref="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String)"/> method, except the
            <see cref="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)"/> method does not throw an
            exception if the conversion fails.
            </para>
            <para>
            The <paramref name="timeSpan"/> parameter contains a time interval specification of the form:
            </para>
            <para>
            [ws][-]{ d | d.hh:mm[:ss[.ff]] | hh.mm[:ss[.ff]] }[ws]
            </para>
            <para>
            Items in square brackets ([ and ]) are optional. One selection from the list of alternatives
            enclosed in braces ({ and }) and separated by vertical bars (|) is required.
            Colons and period (: and .) are literal culture-sensitive characters and required. Other items are as follows.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Item</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>ws</term>
            <description>optional white space</description>
            </item>
            <item>
            <term>"-"</term>
            <description>optional minus sign indicating a negative <see cref="T:NationalInstruments.PrecisionTimeSpan"/></description>
            </item>
            <item>
            <term>d</term>
            <description>days, ranging from 0 to 10675199</description>
            </item>
            <item>
            <term>hh</term>
            <description>hours, ranging from 0 to 23</description>
            </item>
            <item>
            <term>mm</term>
            <description>minutes, ranging from 0 to 59</description>
            </item>
            <item>
            <term>ss</term>
            <description>optional seconds, ranging from 0 to 59</description>
            </item>
            <item>
            <term>ff</term>
            <description>optional fractional seconds, consisting of at least 1 decimal digit</description>
            </item>
            </list>
            </para>
            <para>
            The components of <paramref name="timeSpan"/> must collectively specify a time interval
            greater than or equal to <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            and less than or equal to <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
            </para>
            </remarks>
            <lastupdated>3/3/2014 10:54:15 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,System.IFormatProvider,NationalInstruments.PrecisionTimeSpan@)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.PrecisionTimeSpan"/> object from
            a time interval specified in a string. Parameters specify the time interval, an
            <see cref="T:System.IFormatProvider"/> that specifies culture-specific format information and formatting style,
            and the variable where the new <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            object is returned.
            </summary>
            <param name="timeSpan">
            A string that specifies a time interval.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific format information about <paramref name="timeSpan"/>.
            </param>
            <param name="result">
            When this method returns, it contains an object that represents the time interval
            specified by <paramref name="timeSpan"/>, or <see cref="F:NationalInstruments.PrecisionTimeSpan.Zero"/>
            if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="timeSpan"/> was converted successfully;
            otherwise, <see langword="false"/>. This operation returns <see langword="false"/>
            if the <paramref name="timeSpan"/> parameter is <see langword="null"/>, has an invalid
            format, represents a time interval less than <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            or greater than <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>, or has
            at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
            <remarks>
            <para>
            The <see cref="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)"/> method is like the
            <see cref="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String)"/> method, except the
            <see cref="M:NationalInstruments.PrecisionTimeSpan.TryParse(System.String,NationalInstruments.PrecisionTimeSpan@)"/> method does not throw an
            exception if the conversion fails.
            </para>
            <para>
            The <paramref name="timeSpan"/> parameter contains a time interval specification of the form:
            </para>
            <para>
            [ws][-]{ d | d.hh:mm[:ss[.ff]] | hh.mm[:ss[.ff]] }[ws]
            </para>
            <para>
            Items in square brackets ([ and ]) are optional. One selection from the list of alternatives
            enclosed in braces ({ and }) and separated by vertical bars (|) is required.
            Colons and period (: and .) are literal culture-sensitive characters and required. Other items are as follows.
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Item</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>ws</term>
            <description>optional white space</description>
            </item>
            <item>
            <term>"-"</term>
            <description>optional minus sign indicating a negative <see cref="T:NationalInstruments.PrecisionTimeSpan"/></description>
            </item>
            <item>
            <term>d</term>
            <description>days, ranging from 0 to 10675199</description>
            </item>
            <item>
            <term>hh</term>
            <description>hours, ranging from 0 to 23</description>
            </item>
            <item>
            <term>mm</term>
            <description>minutes, ranging from 0 to 59</description>
            </item>
            <item>
            <term>ss</term>
            <description>optional seconds, ranging from 0 to 59</description>
            </item>
            <item>
            <term>ff</term>
            <description>optional fractional seconds, consisting of at least 1 decimal digit</description>
            </item>
            </list>
            </para>
            <para>
            The components of <paramref name="timeSpan"/> must collectively specify a time interval
            greater than or equal to <see cref="F:NationalInstruments.PrecisionTimeSpan.MinValue"/>
            and less than or equal to <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
            </para>
            </remarks>
            <lastupdated>3/3/2014 10:56:19 AM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
              <para>
            A string that represents the value of this instance. The return value is of the
            form:
            </para>
              <para>[0][d.]hh:mm:ss[.ff]
            </para>
              <para>Items in square brackets ([ and ]) are optional,
            colons and periods (: and .) are literal characters; and the other items are
            as follows.
            </para>
              <para>
                <list type="table">
                  <listheader>
                    <term>Item</term>
                    <description>Description</description>
                  </listheader>
                  <item>
                    <term>"-"</term>
                    <description>optional minus sign indicating a negative time</description>
                  </item>
                  <item>
                    <term>d</term>
                    <description>optional days</description>
                  </item>
                  <item>
                    <term>hh</term>
                    <description>hours, ranging from 0 to 23</description>
                  </item>
                  <item>
                    <term>mm</term>
                    <description>minutes, ranging from 0 to 59</description>
                  </item>
                  <item>
                    <term>ss</term>
                    <description>seconds, ranging from 9 to 59</description>
                  </item>
                  <item>
                    <term>ff</term>
                    <description>optional fractional seconds, from 1 to 7 decimal digits</description>
                  </item>
                </list>
              </para>
            </returns>
            <remarks>
              <para>
            The return value of this method can be consumed by <see cref="M:NationalInstruments.PrecisionTimeSpan.Parse(System.String)"/>.
            </para>
              <para>This method calls <see cref="M:System.TimeSpan.ToString"/> to obtain the string representation of this instance.  Some precision may be lost.
            </para>
              <note type="note">
            The value returned by <see cref="M:NationalInstruments.PrecisionTimeSpan.ToString" crefType="Unqualified"/> is only accurate for
            <see cref="T:NationalInstruments.PrecisionTimeSpan" crefType="Unqualified"/> values less than or equal to <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
            For <see cref="T:NationalInstruments.PrecisionTimeSpan" crefType="Unqualified"/> values greater than <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>,
            the value returned by <see cref="M:NationalInstruments.PrecisionTimeSpan.ToString" crefType="Unqualified"/> is always equal
            to the value returned by the <see cref="M:System.TimeSpan.ToString" crefType="Unqualified"/> method of <see cref="F:System.TimeSpan.MaxValue" crefType="PartiallyQualified"/>.
            </note>
            </remarks>
            <lastupdated>2/28/2011 2:46:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.ToString(System.String)">
            <summary>
            Returns the string representation of the value of this instance using the specified format.
            </summary>
            <param name="format">
            A standard or custom <see cref="T:System.TimeSpan"/> format string.
            </param>
            <returns>
            A string that represents the value of this instance.  The value is formatted similarly to
            how <see cref="M:System.TimeSpan.ToString(System.String)" crefType="PartiallyQualified"/> formats time span
            values with the following changes:
            <list type="bullet">
            <item>
            <description>
            The "c", "g", and "G" specifiers result in a formatted string that can contain more than 7 digits of
            fractional seconds.  The fractional seconds can contain as many digits as necessary to
            display the full value of the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </description>
            </item>
            <item>
            <description>
            If you specify a custom specifier for <paramref name="format"/>, the custom specifier can contain
            more than 7 digits of fractional seconds, "f" or "F".
            </description>
            </item>
            </list>
            </returns>
            <seealso keyword="9f6c95eb-63ae-4dcc-9c32-f81985c75794" keywordType="msdn">Standard TimeSpan Format Strings</seealso>
            <seealso keyword="a63ebf55-7269-416b-b4f5-286f6c03bf0e" keywordType="msdn">Custom TimeSpan Format Strings</seealso>
            <lastupdated>12/17/2013 1:34:45 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance using the specified format and format provider.
            </summary>
            <param name="format">
            A standard or custom <see cref="T:System.TimeSpan"/> format string.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>
            A string that represents the value of this instance.  The value is formatted similarly to
            how <see cref="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" crefType="PartiallyQualified"/> formats time span
            values with the following changes:
            <list type="bullet">
            <item>
            <description>
            The "c", "g", and "G" specifiers result in a formatted string that can contain more than 7 digits of
            fractional seconds.  The fractional seconds can contain as many digits as necessary to
            display the full value of the <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            </description>
            </item>
            <item>
            <description>
            If you specify a custom specifier for <paramref name="format"/>, the custom specifier can contain
            more than 7 digits of fractional seconds, "f" or "F".
            </description>
            </item>
            </list>
            </returns>
            <seealso keyword="9f6c95eb-63ae-4dcc-9c32-f81985c75794" keywordType="msdn">Standard TimeSpan Format Strings</seealso>
            <seealso keyword="a63ebf55-7269-416b-b4f5-286f6c03bf0e" keywordType="msdn">Custom TimeSpan Format Strings</seealso>
            <lastupdated>12/17/2013 1:34:37 PM</lastupdated>
            <updatedby>Lisa Hannan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionTimeSpan.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:21:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.WholeSeconds">
            <summary>
            Gets the value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure expressed in whole seconds. This property is read-only.
            </summary>
            <value>
            The total number of whole seconds represented by the <see cref="T:NationalInstruments.PrecisionDateTime"/> instance.
            </value>
            <remarks>
            This property returns only whole seconds. For example, if the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> represents 4.5 seconds (4 seconds
            and 500 milliseconds), this property returns 4.
            </remarks>
            <lastupdated>10/4/2006 1:06:14 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks">
            <summary>
            Gets the number of fractional second ticks represented by the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance. This property is read-only.
            </summary>
            <value>
            The number of 2^(-64) seconds after the whole seconds represented by this instance.
            </value>
            <remarks>
              <para>
            This property is always zero or positive. It returns the number of positive 2^(-64) seconds after
            the whole seconds of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            Each tick of this value represents 0.05421010862427522170... attoseconds. For example,
            if the time represented by the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            is 4.8 seconds, this property returns 14757395258967641293 (0.8 represented by 2^(-64) seconds).
            </para>
              <para>
            To convert this value to fractional seconds, multiply
            it by <see cref="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks"/>.
            Rounding errors may occur.
            </para>
            </remarks>
            <seealso cref="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks"/>
            <lastupdated>10/4/2006 1:01:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.FractionalSeconds">
            <summary>
            Gets the number of fractional seconds represented by the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> instance. This property is read-only.
            </summary>
            <value>
            The number of seconds after the whole seconds represented by this instance.
            </value>
            <remarks>
              <para>
            This property returns the number of fractional seconds after the whole seconds
            represented by the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>.
            For example, if the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            represents 4.5 seconds, this property returns 0.5.
            </para>
              <para>
            This property converts <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>
            to fractional seconds by multiplying
            <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>
            by <see cref="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks"/>.
            Therefore, some rounding errors may occur when using this property instead of
            <see cref="P:NationalInstruments.PrecisionTimeSpan.FractionalSecondTicks"/>
            to obtain the fractional seconds represented by this instance.
            </para>
            </remarks>
            <seealso cref="F:NationalInstruments.PrecisionTimeSpan.SecondsPerFractionalTicks"/>
            <lastupdated>10/4/2006 1:00:50 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.Days">
            <summary>
            Gets the number of whole days represented by the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure. This property is read-only.
            </summary>
            <value>
            The day component of this instance. The return value can be positive or negative.
            </value>
            <remarks>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value can be represented as
            [-]<format type="italics">d hh:mm:ss.ff</format>, where the optional minus sign
            indicates a negative time interval, the <format type="italics">d</format>
            component is days, <format type="italics">hh</format> is hours as measured on a 24-hour
            clock, <format type="italics">mm</format> is minutes, <format type="italics">ss</format>
            is seconds, and <format type="italics">ff</format> is fractions of a second. The
            value of the <see cref="P:NationalInstruments.PrecisionTimeSpan.Days"/> property is
            the day component, <format type="italics">d</format>.
            </remarks>
            <lastupdated>10/4/2006 1:00:08 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.Hours">
            <summary>
            Gets the number of whole hours represented by the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> structure. This property
            is read-only.
            </summary>
            <value>
            The hour component of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure. The return value ranges from -23 through 23.
            </value>
            <remarks>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value can be represented as
            [-]<format type="italics">d hh:mm:ss.ff</format>, where the optional minus sign
            indicates a negative time interval, the <format type="italics">d</format>
            component is days, <format type="italics">hh</format> is hours as measured on a 24-hour
            clock, <format type="italics">mm</format> is minutes, <format type="italics">ss</format>
            is seconds, and <format type="italics">ff</format> is fractions of a second. The
            value of the <see cref="P:NationalInstruments.PrecisionTimeSpan.Hours"/> property is
            the hours component, <format type="italics">hh</format>.
            </remarks>
            <lastupdated>10/4/2006 1:02:09 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.Minutes">
            <summary>
            Gets the number of whole minutes represented by the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> structure.
            This property is read-only.
            </summary>
            <value>
            The minute component of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure. The return value ranges from -59 through 59.
            </value>
            <remarks>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value can be represented as
            [-]<format type="italics">d hh:mm:ss.ff</format>, where the optional minus sign
            indicates a negative time interval, the <format type="italics">d</format>
            component is days, <format type="italics">hh</format> is hours as measured on a 24-hour
            clock, <format type="italics">mm</format> is minutes, <format type="italics">ss</format>
            is seconds, and <format type="italics">ff</format> is fractions of a second. The
            value of the <see cref="P:NationalInstruments.PrecisionTimeSpan.Minutes"/> property is
            the minute component, <format type="italics">mm</format>.
            </remarks>
            <lastupdated>10/12/2006 12:20:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.Seconds">
            <summary>
            Gets the number of whole seconds represented by the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> structure.
            This property is read-only.
            </summary>
            <value>
            The second component of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure. The return value ranges from -59 through 59.
            </value>
            <remarks>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value can be represented as
            [-]<format type="italics">d hh:mm:ss.ff</format>, where the optional minus sign
            indicates a negative time interval, the <format type="italics">d</format>
            component is days, <format type="italics">hh</format> is hours as measured on a 24-hour
            clock, <format type="italics">mm</format> is minutes, <format type="italics">ss</format>
            is seconds, and <format type="italics">ff</format> is fractions of a second. The
            value of the <see cref="P:NationalInstruments.PrecisionTimeSpan.Seconds"/> property is
            the second component, <format type="italics">ss</format>.
            </remarks>
            <lastupdated>10/4/2006 1:04:04 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.Milliseconds">
            <summary>
            Gets the number of whole milliseconds represented by the current
            <see cref="T:NationalInstruments.PrecisionTimeSpan"/> structure.
            This property is read-only.
            </summary>
            <value>
            The millisecond component of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure. The return value ranges from -999 through 999.
            </value>
            <remarks>
            A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value can be represented as
            [-]<format type="italics">d hh:mm:ss.ff</format>, where the optional minus sign
            indicates a negative time interval, the <format type="italics">d</format>
            component is days, <format type="italics">hh</format> is hours as measured on a 24-hour
            clock, <format type="italics">mm</format> is minutes, <format type="italics">ss</format>
            is seconds, and <format type="italics">ff</format> is fractions of a second. The
            value of the <see cref="P:NationalInstruments.PrecisionTimeSpan.Milliseconds"/> property is
            the fractional second component, <format type="italics">ff</format>.
            </remarks>
            <lastupdated>10/4/2006 1:02:31 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.TotalDays">
            <summary>
            Gets the value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure expressed in whole and fractional days. This property is read-only.
            </summary>
            <value>
            The total number of days represented by this instance.
            </value>
            <remarks>
            This property converts the value of this instance from whole seconds and fractional
            second ticks (2^(-64) seconds) to days. This number might include whole
            and fractional days.
            </remarks>
            <lastupdated>10/4/2006 1:04:21 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.TotalHours">
            <summary>
            Gets the value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure expressed in whole and fractional hours. This property is read-only.
            </summary>
            <value>
            The total number of hours represented by this instance.
            </value>
            <remarks>
            This property converts the value of this instance from whole seconds and fractional
            second ticks (2^(-64) seconds) to hours. This number might include whole
            and fractional hours.
            </remarks>
            <lastupdated>10/4/2006 1:04:53 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.TotalMinutes">
            <summary>
            Gets the value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure expressed in whole and fractional minutes. This property is read-only.
            </summary>
            <value>
            The total number of minutes represented by this instance.
            </value>
            <remarks>
            This property converts the value of this instance from whole seconds and fractional
            second ticks (2^(-64) seconds) to minutes. This number might include whole
            and fractional minutes.
            </remarks>
            <lastupdated>10/4/2006 1:05:41 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.TotalSeconds">
            <summary>
            Gets the value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure expressed in whole and fractional seconds. This property is read-only.
            </summary>
            <value>
            The total number of seconds represented by this instance.
            </value>
            <remarks>
            This property converts the value of this instance from whole seconds and fractional
            second ticks (2^(-64) seconds) to seconds. This number might include whole
            and fractional seconds.
            </remarks>
            <lastupdated>10/12/2006 12:20:52 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionTimeSpan.TotalMilliseconds">
            <summary>
            Gets the value of the current <see cref="T:NationalInstruments.PrecisionTimeSpan"/>
            structure expressed in whole and fractional milliseconds. This property is read-only.
            </summary>
            <value>
            The total number of milliseconds represented by this instance.
            </value>
            <remarks>
            This property converts the value of this instance from whole seconds and fractional
            second ticks (2^(-64) seconds) to milliseconds. This number might include whole
            and fractional milliseconds.
            </remarks>
            <lastupdated>10/4/2006 1:05:08 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.PrecisionWaveformTiming">
            <summary>
            Provides a class that encapsulates waveform timing information with a higher
            precision than <see cref="T:NationalInstruments.WaveformTiming"/>.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
                <para>
                    <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> provides a higher precision
                    than <see cref="T:NationalInstruments.WaveformTiming"/> by using
                    <see cref="T:NationalInstruments.PrecisionDateTime"/> for the time stamps and
                    <see cref="T:NationalInstruments.PrecisionTimeSpan"/> for the time offset and interval.
                </para>
                <para>
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/>
                    indicates whether the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> has
                    a <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>.
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/> is the time offset from the
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> to the
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>.
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/>
                    indicates whether the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> has a
                    <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval"/> and whether
                    the <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval"/> is
                    <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> or
                    <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>.
                </para>
                <para>
                    Create a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> class by calling one of the following factory methods:
                    <see cref="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionDateTime)"/>,
                    <see cref="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan)"/>, or
                    <see cref="M:NationalInstruments.PrecisionWaveformTiming.CreateWithIrregularInterval(NationalInstruments.PrecisionDateTime[])"/>.
                    Use <see cref="F:NationalInstruments.PrecisionWaveformTiming.Empty"/> to specify no timing information.
                </para>
            </remarks>
            <seealso cref="T:NationalInstruments.PrecisionDateTime"/>
            <seealso cref="T:NationalInstruments.PrecisionTimeSpan"/>
            <lastupdated>10/4/2006 9:07:47 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.PrecisionWaveformTiming.Empty">
            <summary>
            Represents a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> that has no time stamp, time offset, or sample interval.
            </summary>
            <lastupdated>10/4/2006 9:07:59 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionDateTime)">
            <summary>
            Creates a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> without an interval with the specified time stamp.
            </summary>
            <param name="timeStamp">
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the start of an acquisition.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance with no interval.
            </returns>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition.  When using
            this method to create a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/> is set to zero,
            indicating that there is no time difference between the start of the acquisition and the
            time of the first sample.
            </remarks>
            <lastupdated>3/6/2007 5:09:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Creates a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> without an interval and with the specified time offset.
            </summary>
            <param name="timeOffset">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> representing the time difference between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance with no interval.
            </returns>
            <remarks>
            If you use this method to create a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            object, the value of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> is not set,
            and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> returns false.
            </remarks>
            <lastupdated>3/6/2007 5:10:04 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithNoInterval(NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Creates a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> without an interval with the specified time stamp and time offset.
            </summary>
            <param name="timeStamp">
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the start of an acquisition.
            </param>
            <param name="timeOffset">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> representing the time difference between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance with no interval.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
                <para>- or -</para>
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>.</para>
            </exception>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition and the
            <paramref name="timeOffset"/> represents the time difference between the start of
            the acquisition and the first sample.  If you use this method to create a
            <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> is set to
            <paramref name="timeStamp"/> and the value of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>
            is set to <paramref name="timeOffset"/>.  The value of <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>
            is equal to the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> plus
            the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>.
            </remarks>
            <lastupdated>3/6/2007 5:09:45 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> with the specified sample interval.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> between samples.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance.
            </returns>
            <lastupdated>10/4/2006 9:13:57 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> with the specified sample interval and time offset.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> between samples.
            </param>
            <param name="timeOffset">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> representing the time between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance.
            </returns>
            <remarks>
            If you use this method to create a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>
            object, the value of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> is not set,
            and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> returns false.
            </remarks>
            <lastupdated>3/6/2007 5:13:01 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionDateTime)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> with the specified sample interval and time stamp.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> between samples.
            </param>
            <param name="timeStamp">
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the start of an acquisition.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance.
            </returns>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition.  When using
            this method to create a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/> is set to zero,
            indicating that there is no time difference between the start of the acquisition and the
            time of the first sample.
            </remarks>
            <lastupdated>3/6/2007 5:10:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithRegularInterval(NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> with the specified sample interval, time stamp, and time offset.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> between samples.
            </param>
            <param name="timeStamp">
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> representing the start of an acquisition.
            </param>
            <param name="timeOffset">
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> representing the time difference between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
                <para>- or -</para>
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is less than <see cref="F:NationalInstruments.PrecisionDateTime.MinValue"/>.</para>
            </exception>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition and the
            <paramref name="timeOffset"/> represents the time difference between the start of
            the acquisition and the first sample.  If you use this method to create a
            <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> is set to
            <paramref name="timeStamp"/> and the value of <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>
            is set to <paramref name="timeOffset"/>.  The value of <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>
            is equal to the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> plus
            the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>.
            </remarks>
            <lastupdated>3/6/2007 5:11:10 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.CreateWithIrregularInterval(NationalInstruments.PrecisionDateTime[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> with an irregular interval.
            </summary>
            <param name="timeStamps">
            An array of <see cref="T:NationalInstruments.PrecisionDateTime"/> time stamp values
            that represents the irregular interval. The array needs to contain a time stamp for each point in the waveform that specifies the time that the point was acquired.
            </param>
            <returns>
            An irregular interval <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="timeStamps"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="timeStamps"/> are not in ascending or descending order.
            </exception>
            <lastupdated>3/6/2007 5:09:18 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.GetTimeStamps(System.Int32)">
            <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and the generated time stamp values are greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>, and <paramref name="count"/> is greater than the number of irregular time stamps.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count"/> is less than zero.
            </exception>
            <lastupdated>10/4/2006 9:21:53 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.GetTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
            <param name="sampleIndex">
            The start sample.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and the generated time stamp values are greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>, and <paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the number of irregular time stamps.</para>
            </exception>
            <lastupdated>10/4/2006 9:22:29 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.GetTimeStamps(System.Int32,System.Int32,NationalInstruments.PrecisionDateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
            <param name="sampleIndex">
            The start sample.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The <see cref="T:NationalInstruments.PrecisionDateTime"/> buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and the generated time stamp values are greater than <see cref="F:NationalInstruments.PrecisionDateTime.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>, and <paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the number of irregular time stamps.</para>
                <para>- or -</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <lastupdated>10/4/2006 9:23:10 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.GetBuffer(System.Int32)">
            <summary>
            Gets a buffer representing the precision time stamps.
            </summary>
            <param name="count">
            An <see cref="T:System.Int32" crefType="Unqualified"/> specifying the number of time stamps to get.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing
            the precision time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para><see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None" crefType="Unqualified"/>.</para>
                <para>- or -</para>
                <para><see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular" crefType="Unqualified"/> and <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp" crefType="Unqualified"/> is <see langword="false"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode" crefType="Unqualified"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular" crefType="Unqualified"/> and <paramref name="count"/> is greater than the number of time stamps available.</para>
            </exception>
            <remarks>
                <para>
            The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
            by <see cref="M:NationalInstruments.PrecisionWaveformTiming.GetBuffer(System.Int32)" crefType="Unqualified"/>
            is a read-only view of the waveform precision time stamps.  Calling
            <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
            on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
            makes a copy of the precision time stamp data.  The time stamps values of a
            <see cref="T:NationalInstruments.PrecisionWaveformTiming" crefType="Unqualified"/> object cannot
            be modified.
            </para>
            </remarks>
            <lastupdated>6/7/2012 1:31:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.FromWaveformTiming(NationalInstruments.WaveformTiming)">
            <summary>
            Converts a <see cref="T:NationalInstruments.WaveformTiming"/> object to a
            <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>.
            </summary>
            <param name="timing">
            The <see cref="T:NationalInstruments.WaveformTiming"/> object that initialized the
            <see cref="T:NationalInstruments.PrecisionWaveformTiming"/>.
            </param>
            <returns>
            A new <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> object that represents
            the same waveform timing information as <paramref name="timing"/>.
            </returns>
            <lastupdated>10/4/2006 9:21:29 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.ToWaveformTiming">
            <summary>
            Converts the current <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> to a
            <see cref="T:NationalInstruments.WaveformTiming"/> object.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.WaveformTiming"/> object which represents the
            same timing information as the current
            <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> instance.
            </returns>
            <remarks>
                <para>
            Since the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> class has a higher
            precision than <see cref="T:NationalInstruments.WaveformTiming"/>, some precision may be lost
            when performing this conversion.
            </para>
            </remarks>
            <lastupdated>10/4/2006 9:23:31 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>9/19/2009 4:21:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.#ctor(System.Boolean,NationalInstruments.PrecisionDateTime,NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionTimeSpan,NationalInstruments.PrecisionDateTime[],NationalInstruments.WaveformSampleIntervalMode)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.Equals(NationalInstruments.PrecisionWaveformTiming)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.PrecisionWaveformTiming.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp">
            <summary>
            Gets the time stamp of the waveform.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> that specifies an occurrence in the system that is related to the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>.
            </value>
            <remarks>The
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>  plus the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/> is equal to the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>. For example, if you configure an acquisition
            with an NI-SCOPE device to use a reference trigger, the device sets the
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>  to the time at which the trigger
            occurs, the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>  to the time of the first
            sample, and the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>  to the difference between
            the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>  and
            <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>.
            <note type="note">NI-DAQmx does not record the time at which a reference trigger occurs.  As a result,
            it sets the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> to the same value as the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <seealso cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/>
            <lastupdated>3/6/2007 5:27:32 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.StartTime">
            <summary>
            Gets the time that the first sample in the waveform was acquired.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.PrecisionDateTime"/> value representing the time of the first waveform sample.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <remarks>
            The <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/> is equal to
            the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> plus
            the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>.
            For example, if you configure an acquisition with an NI-SCOPE device to use a reference trigger, the device sets the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> to the time at which the trigger occurs, the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>  to the time of the first
            sample, and the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>  to the difference between the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>  and <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>.
            <note type="note">NI-DAQmx does not record the time at which a reference trigger occurs.  As a result, it sets the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> to the same value as the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>.
            </note>
            </remarks>
            <seealso cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>
            <seealso cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>
            <lastupdated>3/6/2007 5:07:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval">
            <summary>
            Gets the time interval between samples.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.PrecisionTimeSpan"/> value specifying the time interval between samples.
            </value>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is not <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>.
            </exception>
            <lastupdated>10/4/2006 9:08:35 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp">
            <summary>
      Gets a value indicating whether the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> has a time stamp.
    </summary><value>
      <see langword="true"/> if the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> has a <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>.
    </value><lastupdated>10/4/2006 9:08:12 AM</lastupdated><updatedby>Staci McCormick</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.RawTimeStamp">
            <summary>
            Gets the raw time stamp value, without a guard on <see cref="P:NationalInstruments.PrecisionWaveformTiming.HasTimeStamp"/>.
            </summary>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset">
            <summary>
      Gets the difference between the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/> and the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> of the waveform.
    </summary><value>
      A <see cref="T:NationalInstruments.PrecisionTimeSpan"/> that represents the time between the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/> and <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>.</value><remarks>
      The <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/> is equal to the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> plus the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/>.
      For example, if you configure an acquisition with an NI-SCOPE device to use a reference trigger,
      the device sets the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> to the time at which the trigger occurs, the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/> to the time of the first sample,
      and the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeOffset"/> to the difference between the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/> and <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/>.
      <note type="note">
        NI-DAQmx does not record the time at which a reference trigger occurs.
        As a result, it sets the <see cref="P:NationalInstruments.PrecisionWaveformTiming.TimeStamp"/> to the same value as the <see cref="P:NationalInstruments.PrecisionWaveformTiming.StartTime"/>.
      </note>
    </remarks><lastupdated>3/6/2007 5:08:14 PM</lastupdated><updatedby>Staci McCormick</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.RawSampleInterval">
            <summary>
            Gets the raw sample interval value, without a guard on <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/>.
            </summary>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.TimeStamps">
            <summary>
            Gets the <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> time stamps, or an empty array.
            </summary>
        </member>
        <member name="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode">
            <summary>
      Gets the sample interval mode that determines how the waveform is sampled.
    </summary><value>
      The <see cref="T:NationalInstruments.WaveformSampleIntervalMode"/> that determines how the waveform is sampled.
    </value><remarks>
      A <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> of <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/> indicates the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> does not have a valid <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval"/>.
      A value of <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> indicates the <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> has a <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval"/> that is constant.
      <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval"/> returns the sample interval value if <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>.
      <see cref="M:NationalInstruments.DigitalWaveform.GetTimeStamps"/> generates time stamps if <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> or <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>.
      An <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> value indicates the <see cref="P:NationalInstruments.PrecisionWaveformTiming.SampleInterval"/> is not constant.
    </remarks><lastupdated>10/4/2006 9:10:32 AM</lastupdated><updatedby>Staci McCormick</updatedby><approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Spectrum`1">
            <summary>
            Provides a data type that encapsulates analog data and frequency information.
            </summary>
            <threadsafety safety="unsafe"/>
            <typeparam name="TData">
            The underlying type of the spectrum. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.
            </typeparam>
            <remarks>
            <para>
            <see cref="T:NationalInstruments.Spectrum`1"/> encapsulates a group of sampled analog values and frequency information.
            Each sample represents an analog value. Use <see cref="P:NationalInstruments.Spectrum`1.Samples"/> to access the samples
            in a spectrum. Use <see cref="M:NationalInstruments.Spectrum`1.GetData"/> to get the analog data.</para>
            <para><see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> and <see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/>
            specify the frequency information of the <see cref="T:NationalInstruments.Spectrum`1"/>.</para>
            <filter name="VS2008|VS2010">
            <para>
            Because <see cref="T:NationalInstruments.Spectrum`1"/> requires a different amount of memory depending on the platform,
            a spectrum of the same number of samples will consume more memory when running in 64-bit mode compared to the same spectrum running in 32-bit mode.
            </para>
            </filter>
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>
            The following example demonstrates a method that displays all the analog values in an <see cref="T:NationalInstruments.Spectrum`1"/>.
            Each line displays a new analog value.
            <code lang="VB.NET">
            Private Sub DisplaySpectrum(Of TData)(ByVal spectrum As Spectrum(Of TData))
                 For Each sample As SpectrumSample(Of TData) In spectrum.Samples
                      Debug.WriteLine(String.Format("{0}", sample.Value))
                 Next
            End Sub
            </code>
            </example>
            <example>
            <code lang="C#">
            private void DisplaySpectrum&lt;TData&gt;(Spectrum&lt;TData&gt; spectrum)
            {
                 foreach (SpectrumSample&lt;TData&gt; sample in spectrum.Samples)
                 {
                      Debug.WriteLine(String.Format("{0}", sample.Value));
                 }
            }
            </code>
            </example>
            <seealso keyword="DataConverter" keywordType="mstudio">Converting Data Types Using Measurement Studio DataConverter</seealso>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>11/26/2013 11:28:14 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.Spectrum`1"/> with the specified sample
            count.
            </summary>
            <param name="sampleCount">
            The number of samples in the <see cref="T:NationalInstruments.Spectrum`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="sampleCount"/> is less than zero.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> and <see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> are set to zero.
            </remarks>
            <lastupdated>11/26/2013 12:22:39 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.Spectrum`1"/> with the specified sample
            count and capacity.
            </summary>
            <param name="sampleCount">
            The number of samples in the <see cref="T:NationalInstruments.Spectrum`1"/>.
            </param>
            <param name="capacity">
            The total capacity of the <see cref="T:NationalInstruments.Spectrum`1"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="capacity"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="capacity"/> is less than <paramref name="sampleCount"/>.
            </exception>
            <remarks>
            <para>
            Setting the capacity of the <see cref="T:NationalInstruments.Spectrum`1"/> initializes the memory
            required for that capacity without increasing the number of samples in the spectrum.  Setting the capacity
            large enough to fit any data that may be added to the <see cref="T:NationalInstruments.Spectrum`1"/>
            after creation makes adding data later more efficient.  Initializing a <see cref="T:NationalInstruments.Spectrum`1"/>
            with a capacity greater than the number of samples allocates extra memory for the capacity specified, so that
            appending <see cref="T:NationalInstruments.Spectrum`1"/> using <see cref="M:NationalInstruments.Spectrum`1.Append(`0[])"/>
            does not require new allocation of memory or copying of existing samples.
            </para>
            <para>
            Upon construction, <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> and <see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> are set to zero.
            </para>
            </remarks>
            <lastupdated>11/26/2013 12:22:53 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.FromArray1D(`0[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.Spectrum`1"/> from an array of values.
            </summary>
            <param name="array">
            The array of values.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Spectrum`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Upon construction, <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> and <see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> are set to zero.
            </remarks>
            <lastupdated>11/26/2013 12:06:26 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.FromArray2D(`0[0:,0:])">
            <summary>
            Creates a <see cref="T:NationalInstruments.Spectrum`1"/> array from a two-dimensional array of values.
            </summary>
            <param name="array">
            The two-dimensional array of values.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Spectrum`1"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <remarks>
            Each <see cref="T:NationalInstruments.Spectrum`1"/> instance in the returned array represents a row of data
            in the two-dimensional <paramref name="array"/>. Upon construction, <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> and <see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> are set to zero.
            </remarks>
            <lastupdated>11/26/2013 12:06:57 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.CopySamples(NationalInstruments.Spectrum{`0},NationalInstruments.Spectrum{`0},System.Int32)">
            <summary>
            Copies the data of a source spectrum to a destination spectrum.
            </summary>
            <param name="source">The source <see cref="T:NationalInstruments.Spectrum`1"/>.</param>
            <param name="destination">The destination <see cref="T:NationalInstruments.Spectrum`1"/>.</param>
            <param name="sampleCount">The number of samples to copy.</param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="destination"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than the <paramref name="source"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is greater than the <paramref name="destination"/> sample count.</para>
            </exception>
            <lastupdated>11/26/2013 12:23:33 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.CopySamples(NationalInstruments.Spectrum{`0},System.Int32,NationalInstruments.Spectrum{`0},System.Int32,System.Int32)">
            <summary>
            Copies the data of a source spectrum to a destination spectrum with the specified indexes.
            </summary>
            <param name="source">
            The source <see cref="T:NationalInstruments.Spectrum`1"/>.
            </param>
            <param name="sourceSampleIndex">
            The source sample index.
            </param>
            <param name="destination">
            The destination <see cref="T:NationalInstruments.Spectrum`1"/>.
            </param>
            <param name="destinationSampleIndex">
            The destination sample index.
            </param>
            <param name="sampleCount">
            The number of samples to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="source"/> is <see langword="null"/>.</para>
                <para>-or-</para>
                <para><paramref name="destination"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="sourceSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleCount"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sourceSampleIndex"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="source"/> sample count.</para>
                <para>-or-</para>
                <para><paramref name="destinationSampleIndex"/> plus <paramref name="sampleCount"/> is greater than the <paramref name="destination"/> sample count.</para>
            </exception>
            <lastupdated>11/26/2013 12:23:27 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.GetData">
            <summary>
            Returns the spectrum data.
            </summary>
            <returns>
            The spectrum data.
            </returns>
            <remarks>
            The data returned is a copy of the data in the spectrum.
            </remarks>
            <lastupdated>11/26/2013 12:07:35 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.GetData(System.Int32,System.Int32)">
            <summary>
            Returns the spectrum data using the specified sample index and count.
            </summary>
            <param name="sampleIndex">
            The beginning index of the spectrum from which to get the data.
            </param>
            <param name="count">
            The number of samples to return.
            </param>
            <returns>
            The spectrum data.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            The data returned is a copy of the data in the spectrum.
            </remarks>
            <lastupdated>11/26/2013 12:07:51 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.GetData(System.Int32,System.Int32,`0[],System.Int32)">
            <summary>
            Returns the spectrum data using the specified sample index, count, and array index.
            </summary>
            <param name="sampleIndex">
            The beginning index of the spectrum from which to get the data.
            </param>
            <param name="count">
            The number of samples to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            The data returned is a copy of the data in the spectrum.
            </remarks>
            <lastupdated>11/26/2013 12:14:33 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
            <see cref="M:NationalInstruments.Spectrum`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.Spectrum`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>11/26/2013 12:23:52 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.System#ICloneable#Clone">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.GetBuffer(System.Boolean)">
            <summary>
            Gets a buffer representing the data of the spectrum.
            </summary>
            <param name="copy">Indicates whether a copy of the spectrum data is returned.</param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing the
            data of the spectrum.
            </returns>
            <remarks>
            <para>
            The number of samples in the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
            is equal to <see cref="P:NationalInstruments.Spectrum`1.SampleCount" crefType="Unqualified"/>.
            </para>
            <para>
            The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
            by <see cref="M:NationalInstruments.Spectrum`1.GetBuffer(System.Boolean)" crefType="Unqualified"/>
            is a read-only view of the spectrum data.  Calling <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
            on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
            makes a copy of the spectrum data.  To modify the actual data in the spectrum, call
            <see cref="M:NationalInstruments.Spectrum`1.GetWritableBuffer" crefType="Unqualified"/>.
            </para>
            <para>
            When <paramref name="copy"/> is <see langword="true"/>, the returned buffer is populated with a copy of
            the spectrum data. It is safe to access the samples of the returned buffer until it is explicitly disposed.
            </para>
            <para>
            When <paramref name="copy"/> is <see langword="false"/>, the returned buffer contains a direct reference
            to the spectrum data. It is only safe to access the samples of the returned buffer when the data in the
            spectrum is not changed. Calling <see cref="M:NationalInstruments.Spectrum`1.Append(NationalInstruments.Spectrum{`0})" crefType="Unqualified"/>
            changes the data through the buffer returned by <see cref="M:NationalInstruments.Spectrum`1.GetWritableBuffer" crefType="Unqualified"/>, and
             using a memory-optimized read method invalidates the returned buffer and makes it unsafe to use.
            </para>
            </remarks>
            <example>
            The following code demonstrates how to use <see cref="M:NationalInstruments.Spectrum`1.GetBuffer(System.Boolean)" crefType="Unqualified"/>.
            <code lang="VB.NET">
            Dim buffer As NationalInstruments.DataInfrastructure.Buffer(Of Double) = spectrum.GetBuffer(True)
            For i As Integer = 0 To (buffer.Size - 1)
                 'Access data samples using an indexer property to write sample values to an output window.
                 Debug.WriteLine(buffer(i))
            Next
            </code>
            <code lang="C#">
            NationalInstruments.DataInfrastructure.Buffer&lt;double&gt; buffer = spectrum.GetBuffer(true);
            for (int i = 0; i &lt; buffer.Size; i++)
            {
                 // Access data samples using an indexer property to write sample values to an output window.
                 Debug.WriteLine(buffer[i]);
            }
            </code>
            </example>
            <lastupdated>11/28/2013 4:08:01 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.GetWritableBuffer">
             <summary>
             Gets a writable buffer representing the data of the spectrum.
             </summary>
             <returns>
             A <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/> representing the
             data of the spectrum.
             </returns>
             <example>
             The following code demonstrates how to use <see cref="T:NationalInstruments.DataInfrastructure.WritableBuffer`1" crefType="Unqualified"/>.
             <code lang="VB.NET">
             Dim r As New Random()
             Dim writableBuffer As NationalInstruments.DataInfrastructure.WritableBuffer(Of Double) = spectrum.GetWritableBuffer()
            
             For i As Integer = 0 To writableBuffer.Size - 1
                  'Add a random value.
                  writableBuffer(i) += r.NextDouble()
             Next
             </code>
             <code lang="C#">
             Random r = new Random();
             NationalInstruments.DataInfrastructure.WritableBuffer&lt;double&gt; writableBuffer = spectrum.GetWritableBuffer();
            
             for (int i = 0; i &lt; writableBuffer.Size; i++)
             {
                  // Add a random value.
                  writableBuffer[i] += r.NextDouble();
             }
            
             </code>
             </example>
             <lastupdated>11/26/2013 12:14:47 PM</lastupdated>
             <updatedby>ITAdmin</updatedby>
             <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.Append(`0[])">
            <summary>
            Appends data to the spectrum.
            </summary>
            <param name="data">
            The data to append to the spectrum.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.Spectrum`1.SampleCount" crefType="Unqualified"/> plus
            the number of elements in <paramref name="data"/> is larger than <see cref="P:NationalInstruments.Spectrum`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the spectrum data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.Spectrum`1.Capacity" crefType="Unqualified"/>
            of the spectrum large enough to hold the data you append.
            <note type="note">
             Appending the data to the <see cref="T:NationalInstruments.Spectrum`1"/>  using this method does not affect the <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> or the<see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> values.
            </note>
            </remarks>
            <lastupdated>11/28/2013 4:36:19 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.Append(NationalInstruments.Spectrum{`0})">
            <summary>
            Appends spectrum data to the current spectrum.
            </summary>
            <param name="spectrum">
            The <see cref="T:NationalInstruments.Spectrum`1" crefType="Unqualified"/> to append to
            the current spectrum.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="spectrum"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            If <see cref="P:NationalInstruments.Spectrum`1.SampleCount" crefType="Unqualified"/> plus
            the number of samples in <paramref name="spectrum"/> is larger than <see cref="P:NationalInstruments.Spectrum`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the spectrum data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the <see cref="P:NationalInstruments.Spectrum`1.Capacity" crefType="Unqualified"/>
            of the spectrum large enough to hold the spectrum data you append.
            </para>
            <note type="note">
             Appending the data to the <see cref="T:NationalInstruments.Spectrum`1"/>  using this method does not affect the <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> or the <see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> values.
            </note>
            </remarks>
            <lastupdated>11/28/2013 4:35:42 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.Append(NationalInstruments.Spectrum{`0}[])">
            <summary>
            Appends spectrum data from an array of spectrums to the current spectrum.
            </summary>
            <param name="spectrums">
            An array of <see cref="T:NationalInstruments.Spectrum`1" crefType="Unqualified"/> objects to append to
            the current spectrum.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para><paramref name="spectrums"/> is <see langword="null"/>.</para>
                <para>- or -</para>
                <para>An element in <paramref name="spectrums"/> is <see langword="null"/>.</para>
            </exception>
            <remarks>
            <para>
            The spectrums are appended to the current spectrum in the order in which they appear
            in <paramref name="spectrums"/>.
            </para>
            <para>
            If <see cref="P:NationalInstruments.Spectrum`1.SampleCount" crefType="Unqualified"/> plus
            the sum of the number of samples in the spectrums in  <paramref name="spectrums"/> is larger than
            <see cref="P:NationalInstruments.Spectrum`1.Capacity" crefType="Unqualified"/>,
            the memory used to store the spectrum data is reallocated to increase the capacity, which decreases the performance of this operation.  You can
            force this allocation to occur before appending data by setting the
            <see cref="P:NationalInstruments.Spectrum`1.Capacity" crefType="Unqualified"/>
            of the spectrum large enough to hold the spectrum data you append.
            </para>
            <note type="note">
             Appending the data to the <see cref="T:NationalInstruments.Spectrum`1"/>  using this method does not affect the <see cref="P:NationalInstruments.Spectrum`1.StartFrequency"/> or the<see cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/> values.
            </note>
            </remarks>
            <lastupdated>11/28/2013 4:35:57 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>11/26/2013 12:24:34 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Spectrum`1.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.Samples">
            <summary>
            Gets the samples of the spectrum.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1"/> containing the
            <see cref="T:NationalInstruments.Spectrum`1"/> objects.
            </value>
            <remarks>
            To access the number of samples in the spectrum, use <see cref="P:NationalInstruments.Spectrum`1.SampleCount"/>.
            </remarks>
            <lastupdated>11/26/2013 11:36:54 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.SampleCount">
            <summary>
            Gets the number of samples in <see cref="T:NationalInstruments.Spectrum`1"/>.
            </summary>
            <value>
            The number of samples in <see cref="T:NationalInstruments.Spectrum`1"/>.
            </value>
            <lastupdated>11/26/2013 11:36:49 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.DataType">
            <summary>
            Gets the data type of the spectrum.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the spectrum.
            </value>
            <lastupdated>11/26/2013 11:28:56 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.ChannelName">
            <summary>
            Gets or sets the name of the device channel from which the spectrum was acquired.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the name of the device channel from which the
            <see cref="T:NationalInstruments.Spectrum`1"/> was acquired.
            The default value is an empty string.
            </value>
            <lastupdated>11/26/2013 11:28:47 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.UnitDescription">
            <summary>
            Gets or sets the unit of measurement, such as volts, of the spectrum.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the unit of measurement of the <see cref="T:NationalInstruments.Spectrum`1"/>.
            The default value is an empty string.
            </value>
            <lastupdated>11/26/2013 11:37:15 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.ExtendedProperties">
            <summary>
            Gets the extended properties for the spectrum.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.ExtendedPropertyDictionary"/> that contains the extended
            properties of the spectrum.
            </value>
            <remarks>
            <see cref="P:NationalInstruments.Spectrum`1.ExtendedProperties"/> stores key value pair information
            specific to the spectrum.
            </remarks>
            <lastupdated>11/26/2013 11:26:57 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.Capacity">
            <summary>
            Gets or sets the total capacity available for <see cref="T:NationalInstruments.Spectrum`1"/> data.
            </summary>
            <value>
            The total capacity available for <see cref="T:NationalInstruments.Spectrum`1"/> data.
            </value>
            <remarks>
            <para>
            The capacity of a <see cref="T:NationalInstruments.Spectrum`1"/> is represented as the number of samples
            of data that can be stored in the spectrum with the current amount of memory allocated for the data.
            Changing the capacity of the <see cref="T:NationalInstruments.Spectrum`1"/>
            reallocates the memory used to store the <see cref="T:NationalInstruments.Spectrum`1"/>
            data.  Changing the capacity is slower for <see cref="T:NationalInstruments.Spectrum`1"/>
            with a larger number of samples.
            </para>
            <para>
            Setting the capacity to the required number of samples of data before calling <see cref="M:NationalInstruments.Spectrum`1.Append(`0[])"/>
            improves the performance of <see cref="M:NationalInstruments.Spectrum`1.Append(`0[])"/>, especially when appending to
            spectrums with a large number of samples.  Setting the capacity to the required amount  also improves the performance of
            memory-optimized reads performed by hardware .NET APIs.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The specified value is less than <see cref="P:NationalInstruments.Spectrum`1.SampleCount"/>.
            </exception>
            <lastupdated>11/26/2013 11:28:33 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.StartFrequency">
            <summary>
            Gets or sets the start frequency of the spectrum.
            </summary>
            <value>
            The start frequency of the spectrum. The default value is 0.
            </value>
            <seealso cref="P:NationalInstruments.Spectrum`1.FrequencyIncrement"/>
            <lastupdated>11/26/2013 11:37:01 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Spectrum`1.FrequencyIncrement">
            <summary>
            Gets or sets the frequency increment information of the spectrum.
            </summary>
            <value>
            The frequency increment information of the spectrum. The default value is 0.
            </value>
            <seealso cref="P:NationalInstruments.Spectrum`1.StartFrequency"/>
            <lastupdated>11/26/2013 11:36:43 AM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.SpectrumCollection`1">
            <summary>
            Represents a strongly typed collection of <see cref="T:NationalInstruments.Spectrum`1"/> objects.
            </summary>
            <typeparam name="TData">
            The underlying type of the spectrums. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.
            </typeparam>
            <threadsafety safety="unsafe"/>
            <remarks>
            <para>
            A <see cref="T:NationalInstruments.SpectrumCollection`1"/> contains a strongly typed collection of
            <see cref="T:NationalInstruments.Spectrum`1"/> objects; one object for each channel and record combination.
            You can access these objects through the 1D indexer or the 2D indexer.  The 1D indexer accepts a single integer referring
            to the absolute position of the <see cref="T:NationalInstruments.Spectrum`1"/> in the collection, and is
            most useful when the collection contains only one record per channel or one channel with multiple records.  The 2D indexer
            accepts two indexes: one for the record index and one for the channel index.  To determine the total number of
            <see cref="T:NationalInstruments.Spectrum`1"/> objects in the collection, access the
            <see cref="P:NationalInstruments.SpectrumCollection`1.Count"/> property.
            To determine the number of records and channels, access the <see cref="P:NationalInstruments.SpectrumCollection`1.Records"/>
            and <see cref="P:NationalInstruments.SpectrumCollection`1.Channels"/> properties, respectively.
            </para>
            <para>
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </para>
            </remarks>
            <seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
            <lastupdated>11/26/2013 12:31:41 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            </summary>
            <remarks>
            Upon construction, <see cref="T:NationalInstruments.SpectrumCollection`1"/>
            is set to an empty collection of <see cref="T:NationalInstruments.Spectrum`1"/> objects.
            </remarks>
            <lastupdated>11/26/2013 12:40:05 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.Clone">
            <summary>
            Creates a new object that is a deep copy of this instance.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
            <see cref="M:NationalInstruments.SpectrumCollection`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by
            the fields in the object.
            </para>
            </remarks>
            <lastupdated>11/26/2013 12:40:31 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#ICloneable#Clone">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.CopyTo(NationalInstruments.Spectrum{`0}[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="arrayIndex">
            The index in the target array at which you want to begin copying the collection to.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.</para>
                <para>-or-</para>
                <para>The number of elements in the collection is greater than the available space between <paramref name="arrayIndex"/> and the end of <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Collections#Generic#IEnumerable{NationalInstruments#Spectrum{TData}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>  that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Collections#Generic#ICollection{NationalInstruments#Spectrum{TData}}#Remove(NationalInstruments.Spectrum{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <returns>The return value is not documented because the method is not supported.</returns>
            <remarks>
            <see cref="T:NationalInstruments.SpectrumCollection`1" crefType="Unqualified"/>
            is read only and does not support removing items from the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Collections#Generic#ICollection{NationalInstruments#Spectrum{TData}}#Contains(NationalInstruments.Spectrum{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </param>
            <returns>
            <see langword="true"/> if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Collections#Generic#ICollection{NationalInstruments#Spectrum{TData}}#Clear">
            <summary>
            This method is not supported.
            </summary>
            <remarks>
            <see cref="T:NationalInstruments.SpectrumCollection`1" crefType="Unqualified"/>
            is read only and does not support clearing the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#Collections#Generic#ICollection{NationalInstruments#Spectrum{TData}}#Add(NationalInstruments.Spectrum{`0})">
            <summary>
            This method is not supported.
            </summary>
            <param name="item">This parameter is not documented because the method is not supported.</param>
            <remarks>
            <see cref="T:NationalInstruments.SpectrumCollection`1" crefType="Unqualified"/>
            is read only and does not support adding new items to the collection.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
        </member>
        <member name="M:NationalInstruments.SpectrumCollection`1.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.Channels">
            <summary>
            Gets the number of channels in <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            </summary>
            <value>
            The number of channels in <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            </value>
            <lastupdated>11/26/2013 12:40:46 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.Count">
            <summary>
            Gets the number of spectrums in <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            </summary>
            <value>
            The number of spectrums in <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            <see cref="P:NationalInstruments.SpectrumCollection`1.Count"/> is defined as the number of
            channels in the collection multiplied by the number of records.
            </value>
            <lastupdated>11/26/2013 12:31:52 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.Records">
            <summary>
            Gets the number of records in <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            </summary>
            <value>
            The number of records in <see cref="T:NationalInstruments.SpectrumCollection`1"/>.
            </value>
            <lastupdated>11/26/2013 12:32:13 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.Spectrum`1"/> at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the <see cref="T:NationalInstruments.Spectrum`1"/> to locate in the collection.
            Valid values range from zero to <see cref="P:NationalInstruments.SpectrumCollection`1.Count"/> - 1.
            </param>
            <value>
            The <see cref="T:NationalInstruments.Spectrum`1"/> at the specified index.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="index"/> is greater than or equal to <see cref="P:NationalInstruments.SpectrumCollection`1.Count"/>.</para>
            </exception>
            <remarks>
            The <see cref="T:NationalInstruments.SpectrumCollection`1"/> stores all of its contained spectrums in a single
            one-dimensional array.  The spectrums within the array are arranged sequentially by record rather than sequentially by channel.
            This means that the record 0 spectrums for all channels are located in the array before the record 1 spectrums for the channels.
            For example, a <see cref="T:NationalInstruments.SpectrumCollection`1"/> with two records and two channels stores
            the data in this format: [ R0C0 R0C1 R1C0 R1C1 ].
            Use the 2D indexer to retrieve the waveform for a specific record index and channel index.
            </remarks>
            <lastupdated>11/26/2013 12:41:07 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.Spectrum`1"/> at the specified indexes.
            </summary>
            <param name="recordIndex">
            The zero-based record index of the <see cref="T:NationalInstruments.Spectrum`1"/> to locate in the collection.
            Valid values range from zero to <see cref="P:NationalInstruments.SpectrumCollection`1.Records"/> - 1.
            </param>
            <param name="channelIndex">
            The zero-based channel index of the <see cref="T:NationalInstruments.Spectrum`1"/> to locate in the collection.
            Valid values range from zero to <see cref="P:NationalInstruments.SpectrumCollection`1.Channels"/> - 1.
            </param>
            <value>
            The <see cref="T:NationalInstruments.Spectrum`1"/> at the specified indexes.
            </value>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="recordIndex"/> or <paramref name="channelIndex"/> is less than zero.
                <para>-or-</para>
                <para><paramref name="recordIndex"/> is greater than or equal to <see cref="P:NationalInstruments.SpectrumCollection`1.Records"/>.</para>
                <para>-or-</para>
                <para><paramref name="channelIndex"/> is greater than or equal to <see cref="P:NationalInstruments.SpectrumCollection`1.Channels"/>.</para>
            </exception>
            <lastupdated>11/26/2013 12:41:02 PM</lastupdated>
            <updatedby>ITAdmin</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.IsSynchronized">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.SyncRoot">
            <exclude/>
        </member>
        <member name="P:NationalInstruments.SpectrumCollection`1.System#Collections#Generic#ICollection{NationalInstruments#Spectrum{TData}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/>  is read-only.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.WaveformSampleIntervalMode">
            <summary>
            Specifies the sample interval mode that determines how the waveform is sampled.
            </summary>
            <lastupdated>9/19/2005 2:18:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.WaveformSampleIntervalMode.None">
            <summary>
            No sample interval.
            </summary>
            <lastupdated>9/15/2005 6:21:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.WaveformSampleIntervalMode.Regular">
            <summary>
            The sample interval is regular.
            </summary>
            <lastupdated>9/15/2005 6:21:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.WaveformSampleIntervalMode.Irregular">
            <summary>
            The sample interval is irregular.
            </summary>
            <lastupdated>9/15/2005 6:21:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.WaveformScaleMode">
            <summary>
            Represents a class used to scale waveform data.
            </summary>
            <remarks>
            <see cref="T:NationalInstruments.WaveformScaleMode"/> scales waveform data. Use
            <see cref="M:NationalInstruments.WaveformScaleMode.CreateLinearMode(System.Double,System.Double)"/> to create a linear scale.
            <see cref="P:NationalInstruments.WaveformScaleMode.None"/> represents a scale mode that does
            not scale the data.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>3/2/2006 2:30:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformScaleMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.WaveformScaleMode"/> class.
            </summary>
            <lastupdated>3/2/2006 2:30:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0})">
            <summary>
            Returns the scaled analog waveform data.
            </summary>
            <param name="waveform">
            The waveform to get the scaled data from.
            </param>
            <typeparam name="TData">
            The underlying type of <paramref name="waveform"/>. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Byte"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.Decimal"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.Int16"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int64"/>, and
            <see cref="T:System.UInt64"/>.
            </typeparam>
            <returns>
            The scaled data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <see cref="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0})"/> calls
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetRawData"/> to get the data to scale, and then calls
            <see cref="M:NationalInstruments.WaveformScaleMode.TransformData(System.Double[])"/> to perform the transformation.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>9/16/2009 10:06:15 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0},System.Int32,System.Int32)">
            <summary>
            Returns the scaled analog waveform data using the specified sample index and count.
            </summary>
            <param name="waveform">
            The waveform to get the scaled data from.
            </param>
            <param name="sampleIndex">
            The start index.
            </param>
            <param name="count">
            The amount of scaled data to return.
            </param>
            <typeparam name="TData">
            The underlying type of <paramref name="waveform"/>. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Byte"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.Decimal"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.Int16"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int64"/>, and
            <see cref="T:System.UInt64"/>.
            </typeparam>
            <returns>
            The scaled data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
            </exception>
            <remarks>
            <see cref="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0})"/> calls
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetRawData"/> to get the data to scale, and then calls
            <see cref="M:NationalInstruments.WaveformScaleMode.TransformData(System.Double[])"/> to perform the transformation.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>9/16/2009 10:06:45 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0},System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Returns the scaled analog waveform data using the specified sample index, count, and array index.
            </summary>
            <typeparam name="TData">
            The underlying type of <paramref name="waveform"/>. The following data types are supported by <typeparamref name="TData"/>:
            <see cref="T:System.Byte"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.Decimal"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.Int16"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.Int64"/>, and
            <see cref="T:System.UInt64"/>.
            </typeparam>
            <param name="waveform">
            The waveform to get the scaled data from.
            </param>
            <param name="sampleIndex">
            The start sample.
            </param>
            <param name="count">
            The amount of scaled data to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the scaled data into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the scaled data into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>-or-</para>
                <para><paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the sample count.</para>
                <para>-or-</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <remarks>
            <see cref="M:NationalInstruments.WaveformScaleMode.GetScaledData``1(NationalInstruments.AnalogWaveform{``0})"/> calls
            <see cref="M:NationalInstruments.AnalogWaveform`1.GetRawData"/> to get the data to scale, and then calls
            <see cref="M:NationalInstruments.WaveformScaleMode.TransformData(System.Double[])"/> to perform the transformation.
            <note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>9/16/2009 10:07:00 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformScaleMode.TransformData(System.Double[])">
            <summary>
            Returns the transformed data.
            </summary>
            <param name="data">
            The raw, untransformed data.
            </param>
            <returns>
            The transformed data.
            </returns>
            <lastupdated>3/2/2006 2:37:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformScaleMode.CreateLinearMode(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.WaveformScaleMode"/> that scales data linearly.
            </summary>
            <param name="gain">
            The gain of the linear scale.
            </param>
            <param name="offset">
            The offset of the linear scale.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.WaveformScaleMode"/> that scales data linearly.
            </returns>
            <remarks>
            The scaled values are calculated by multiplying <paramref name="gain"/> by the value of the waveform sample and then adding the
            <paramref name="offset"/>.
            </remarks>
            <lastupdated>3/2/2006 2:31:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.WaveformScaleMode.None">
            <summary>
            Gets a <see cref="T:NationalInstruments.WaveformScaleMode"/> that does not scale data.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.WaveformScaleMode"/> that does not scale data.
            </value>
            <lastupdated>3/2/2006 2:30:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.WaveformTiming">
            <summary>
            Provides a class that encapsulates waveform timing information.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
                <para>
                    <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> indicates whether the <see cref="T:NationalInstruments.WaveformTiming"/> has
                    a <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>. <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/> is the time offset from the
                    <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> to the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>. <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/>
                    indicates whether the <see cref="T:NationalInstruments.WaveformTiming"/> has a <see cref="P:NationalInstruments.WaveformTiming.SampleInterval"/> and whether
                    the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> or
                    <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>.
                </para>
                <para>
                    Create a <see cref="T:NationalInstruments.WaveformTiming"/> class by calling one of the following factory methods:
                    <see cref="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime)"/>,
                    <see cref="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan)"/>, or
                    <see cref="M:NationalInstruments.WaveformTiming.CreateWithIrregularInterval(System.DateTime[])"/>. Use <see cref="F:NationalInstruments.WaveformTiming.Empty"/> to specify no timing information.
                </para>
            </remarks>
            <lastupdated>9/19/2005 9:38:35 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.WaveformTiming.Empty">
            <summary>
            Represents a <see cref="T:NationalInstruments.WaveformTiming"/> that has no time stamp, time offset, or sample interval.
            </summary>
            <lastupdated>9/19/2005 9:34:45 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime)">
            <summary>
            Creates a <see cref="T:NationalInstruments.WaveformTiming"/> without an interval with the specified time stamp.
            </summary>
            <param name="timeStamp">
            The <see cref="T:System.DateTime"/> representing the start of an acquisition.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.WaveformTiming"/> instance with no interval.
            </returns>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition.  When using
            this method to create a <see cref="T:NationalInstruments.WaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/> is set to zero,
            indicating that there is no time difference between the start of the acquisition and the
            time of the first sample.
            </remarks>
            <lastupdated>3/6/2007 5:14:25 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:NationalInstruments.WaveformTiming"/> without an interval and with the specified time offset.
            </summary>
            <param name="timeOffset">
            The <see cref="T:System.TimeSpan"/> representing the time difference between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.WaveformTiming"/> instance with no interval.
            </returns>
            <remarks>
            If you use this method to create a <see cref="T:NationalInstruments.WaveformTiming"/>
            object, the value of <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> is not set,
            and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> returns false.
            </remarks>
            <lastupdated>3/6/2007 5:14:53 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithNoInterval(System.DateTime,System.TimeSpan)">
            <summary>
            Creates a <see cref="T:NationalInstruments.WaveformTiming"/> without an interval with the specified time stamp and time offset.
            </summary>
            <param name="timeStamp">
            The <see cref="T:System.DateTime"/> representing the start of an acquisition.
            </param>
            <param name="timeOffset">
            The <see cref="T:System.TimeSpan"/> representing the time difference between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.WaveformTiming"/> instance with no interval.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
                <para>- or -</para>
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is less than <see cref="F:System.DateTime.MinValue"/>.</para>
            </exception>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition and the
            <paramref name="timeOffset"/> represents the time difference between the start of
            the acquisition and the first sample.  If you use this method to create a
            <see cref="T:NationalInstruments.WaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> is set to
            <paramref name="timeStamp"/> and the value of <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>
            is set to <paramref name="timeOffset"/>.  The value of <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>
            is equal to the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> plus
            the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>.
            </remarks>
            <lastupdated>3/6/2007 5:14:40 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.WaveformTiming"/> with the specified sample interval.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:System.TimeSpan"/> between samples.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.WaveformTiming"/> instance.
            </returns>
            <lastupdated>3/6/2007 5:15:03 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.WaveformTiming"/> with the specified sample interval and time offset.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:System.TimeSpan"/> between samples.
            </param>
            <param name="timeOffset">
            The <see cref="T:System.TimeSpan"/> representing the time between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.WaveformTiming"/> instance.
            </returns>
            <remarks>
            If you use this method to create a <see cref="T:NationalInstruments.WaveformTiming"/>
            object, the value of <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> is not set,
            and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> returns false.
            </remarks>
            <lastupdated>3/6/2007 5:15:49 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.DateTime)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.WaveformTiming"/> with the specified sample interval and time stamp.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:System.TimeSpan"/> between samples.
            </param>
            <param name="timeStamp">
            The <see cref="T:System.DateTime"/> representing the start of an acquisition.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.WaveformTiming"/> instance.
            </returns>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition.  When using
            this method to create a <see cref="T:NationalInstruments.WaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/> is set to zero,
            indicating that there is no time difference between the start of the acquisition and the
            time of the first sample.
            </remarks>
            <lastupdated>3/6/2007 5:15:22 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithRegularInterval(System.TimeSpan,System.DateTime,System.TimeSpan)">
            <summary>
            Creates a regular interval <see cref="T:NationalInstruments.WaveformTiming"/> with the specified sample interval, time stamp, and time offset.
            </summary>
            <param name="sampleInterval">
            The <see cref="T:System.TimeSpan"/> between samples.
            </param>
            <param name="timeStamp">
            The <see cref="T:System.DateTime"/> representing the start of an acquisition.
            </param>
            <param name="timeOffset">
            The <see cref="T:System.TimeSpan"/> representing the time difference between the
            start of an acquisition and the first sample.
            </param>
            <returns>
            A regular interval <see cref="T:NationalInstruments.WaveformTiming"/> instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
                <para>- or -</para>
                <para>The <paramref name="timeStamp"/> plus <paramref name="timeOffset"/> is less than <see cref="F:System.DateTime.MinValue"/>.</para>
            </exception>
            <remarks>
            The <paramref name="timeStamp"/> represents the time of the start of an acquisition and the
            <paramref name="timeOffset"/> represents the time difference between the start of
            the acquisition and the first sample.  If you use this method to create a
            <see cref="T:NationalInstruments.WaveformTiming"/> object, the value
            of <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> is set to
            <paramref name="timeStamp"/> and the value of <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>
            is set to <paramref name="timeOffset"/>.  The value of <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>
            is equal to the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> plus
            the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>.
            </remarks>
            <lastupdated>3/6/2007 5:15:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.CreateWithIrregularInterval(System.DateTime[])">
            <summary>
            Creates a <see cref="T:NationalInstruments.WaveformTiming"/> with an irregular interval.
            </summary>
            <param name="timeStamps">
            An array of <see cref="T:System.DateTime"/> time stamp values
            that represents the irregular interval. The array needs to contain a time stamp for each point in the waveform that specifies the time that the point was acquired.
            </param>
            <returns>
            An irregular interval <see cref="T:NationalInstruments.WaveformTiming"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="timeStamps"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="timeStamps"/> are not in ascending order.
            </exception>
            <lastupdated>3/6/2007 5:14:15 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32)">
            <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and the generated time stamp values are greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>, and <paramref name="count"/> is greater than the number of irregular time stamps.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count"/> is less than zero.
            </exception>
            <lastupdated>9/19/2005 2:16:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32,System.Int32)">
            <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
            <param name="sampleIndex">
            The start sample.
            </param>
            <param name="count">
            The number of time stamps to return.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> array of time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and the generated time stamp values are greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>, and <paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the number of irregular time stamps.</para>
            </exception>
            <lastupdated>9/19/2005 2:16:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.GetTimeStamps(System.Int32,System.Int32,System.DateTime[],System.Int32)">
            <summary>
            Retrieves the time stamps of the waveform samples.
            </summary>
            <param name="sampleIndex">
            The start sample.
            </param>
            <param name="count">
            The number of time stamps to copy into <paramref name="buffer"/>.
            </param>
            <param name="buffer">
            The buffer to copy the time stamps into.
            </param>
            <param name="arrayIndex">
            The beginning index of <paramref name="buffer"/> to copy the time stamps into.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>, and the generated time stamp values are greater than <see cref="F:System.DateTime.MaxValue"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="sampleIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para><paramref name="arrayIndex"/> is less than zero.</para>
                <para>- or -</para>
                <para>The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>, and <paramref name="sampleIndex"/> plus <paramref name="count"/> is greater than the number of irregular time stamps.</para>
                <para>- or -</para>
                <para><paramref name="arrayIndex"/> plus <paramref name="count"/> is greater than the <paramref name="buffer"/> length.</para>
            </exception>
            <lastupdated>9/19/2005 2:16:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.GetBuffer(System.Int32)">
            <summary>
            Gets a buffer representing the time stamps.
            </summary>
            <param name="count">
            An <see cref="T:System.Int32" crefType="Unqualified"/> specifying the number of time stamps to get.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> representing
            the time stamps.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para><see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/>.</para>
                <para>- or -</para>
                <para><see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> and <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> is less than zero.</para>
                <para>- or -</para>
                <para><see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> and <paramref name="count"/> is greater than the number of time stamps available.</para>
            </exception>
            <remarks>
                <para>
            The <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/> returned
            by <see cref="M:NationalInstruments.WaveformTiming.GetBuffer(System.Int32)" crefType="Unqualified"/>
            is a read-only view of the time stamps.  Calling
            <see cref="M:NationalInstruments.DataInfrastructure.Buffer`1.MakeWritable" crefType="Unqualified"/>
            on the <see cref="T:NationalInstruments.DataInfrastructure.Buffer`1" crefType="Unqualified"/>
            makes a copy of the time stamp data.  The time stamps values of a
            <see cref="T:NationalInstruments.WaveformTiming" crefType="Unqualified"/> object cannot
            be modified.
            </para>
            </remarks>
            <lastupdated>6/7/2012 1:32:21 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>9/19/2009 4:21:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:20:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.#ctor(System.Boolean,System.DateTime,System.TimeSpan,System.TimeSpan,System.DateTime[],NationalInstruments.WaveformSampleIntervalMode)">
            <exclude/>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.Equals(NationalInstruments.WaveformTiming)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword='true'/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword='false'/>.
            </returns>
            <param name='other'>
            An object to compare with this object.
            </param>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.WaveformTiming.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.TimeStamp">
            <summary>
            Gets the time stamp of the waveform.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that specifies an occurrence in the system that is related to the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>.
            </value>
            <remarks>The
            <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>  plus the
            <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/> is equal to the
            <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>. For example, if you configure an acquisition
            with an NI-SCOPE device to use a reference trigger, the device sets the
            <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>  to the time at which the trigger
            occurs, the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>  to the time of the first
            sample, and the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>  to the difference between
            the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>  and
            <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>.
            <note type="note">NI-DAQmx does not record the time at which a reference trigger occurs.  As a result,
            it sets the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> to the same value as the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <seealso cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/>
            <lastupdated>3/7/2007 8:15:40 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.StartTime">
            <summary>
            Gets the time that the first sample in the waveform was acquired.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value representing the time of the first waveform sample.
            </value>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <remarks>
            The <see cref="P:NationalInstruments.WaveformTiming.StartTime"/> is equal to
            the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> plus
            the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>.
            For example, if you configure an acquisition with an NI-SCOPE device to use a reference trigger, the device sets the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>  to the time at which the trigger occurs, the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>  to the time of the first
            sample, and the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>  to the difference between the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>  and <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>.
            <note type="note">NI-DAQmx does not record the time at which a reference trigger occurs.  As a result, it sets the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> to the same value as the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>.
            </note>
            </remarks>
            <seealso cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>
            <seealso cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>
            <lastupdated>3/6/2007 5:13:16 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.SampleInterval">
            <summary>
            Gets the time interval between samples.
            </summary>
            <value>
            The <see cref="T:System.TimeSpan"/> value specifying the time interval between samples.
            </value>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is not <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>.
            </exception>
            <lastupdated>9/15/2005 5:33:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.HasTimeStamp">
            <summary>
      Gets a value indicating whether the <see cref="T:NationalInstruments.WaveformTiming"/> has a time stamp.
    </summary><value>
      <see langword="true"/> if the <see cref="T:NationalInstruments.WaveformTiming"/> has a <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>.
    </value><lastupdated>9/19/2005 9:35:31 AM</lastupdated><updatedby>Whitney Bates</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.RawTimeStamp">
            <summary>
            Gets the raw time stamp value, without a guard on <see cref="P:NationalInstruments.WaveformTiming.HasTimeStamp"/>.
            </summary>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.TimeOffset">
            <summary>
      Gets the difference between the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/> and the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> of the waveform.
    </summary><value>
      A <see cref="T:System.TimeSpan"/> that represents the time between the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/> and <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>.
    </value><remarks>
      The <see cref="P:NationalInstruments.WaveformTiming.StartTime"/> is equal to the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> plus the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/>.
      For example, if you configure an acquisition with an NI-SCOPE device to use a reference trigger,
      the device sets the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> to the time at which the trigger occurs, the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/> to the time of the first sample,
      and the <see cref="P:NationalInstruments.WaveformTiming.TimeOffset"/> to the difference between the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/> and <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/>.
    <note type="note">
      NI-DAQmx does not record the time at which a reference trigger occurs.
      As a result, it sets the <see cref="P:NationalInstruments.WaveformTiming.TimeStamp"/> to the same value as the <see cref="P:NationalInstruments.WaveformTiming.StartTime"/>.
    </note>
    </remarks><lastupdated>3/6/2007 5:13:35 PM</lastupdated><updatedby>Staci McCormick</updatedby><approved>True</approved>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.RawSampleInterval">
            <summary>
            Gets the raw sample interval value, without a guard on <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/>.
            </summary>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.TimeStamps">
            <summary>
            Gets the <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> time stamps, or an empty array.
            </summary>
        </member>
        <member name="P:NationalInstruments.WaveformTiming.SampleIntervalMode">
            <summary>
      Gets the sample interval mode that determines how the waveform is sampled.
    </summary><value>
      The <see cref="T:NationalInstruments.WaveformSampleIntervalMode"/> that determines how the waveform is sampled.
    </value><remarks>
      A <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> of <see cref="F:NationalInstruments.WaveformSampleIntervalMode.None"/> indicates the <see cref="T:NationalInstruments.WaveformTiming"/> does not have a valid <see cref="P:NationalInstruments.WaveformTiming.SampleInterval"/>.
      A value of <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> indicates the <see cref="T:NationalInstruments.WaveformTiming"/> has a <see cref="P:NationalInstruments.WaveformTiming.SampleInterval"/> that is constant.
      <see cref="P:NationalInstruments.WaveformTiming.SampleInterval"/> returns the sample interval value if <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/>.
      <see cref="M:NationalInstruments.DigitalWaveform.GetTimeStamps"/> generates time stamps if <see cref="P:NationalInstruments.WaveformTiming.SampleIntervalMode"/> is <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Regular"/> or <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/>.
      An <see cref="F:NationalInstruments.WaveformSampleIntervalMode.Irregular"/> value indicates the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval"/> is not constant.
    </remarks><lastupdated>9/19/2005 2:13:16 PM</lastupdated><updatedby>Whitney Bates</updatedby><approved>True</approved>
        </member>
    </members>
</doc>
